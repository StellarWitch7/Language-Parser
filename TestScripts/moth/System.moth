namespace core;

@TargetOS("windows")
public func STDIn() #File {
    return #File.init(__acrt_iob_func(0));
}

@TargetOS("windows")
public func STDOut() #File {
    return #File.init(__acrt_iob_func(1));
}

@TargetOS("windows")
public func STDErr() #File {
    return #File.init(__acrt_iob_func(2));
}

@TargetOS("linux")
public func STDIn() #File {
    return #File.init(stdin);
}

@TargetOS("linux")
public func STDOut() #File {
    return #File.init(stdout);
}

@TargetOS("linux")
public func STDErr() #File {
    return #File.init(stderr);
}

public func EOF(ch #i32) #bool {
    return ch < 0;
}

public func Write(char #char) {
    STDOut().Write(char);
    return;
}

public func Write(string #char*) {
    STDOut().Write(string);
    return;
}

public func Write(string #char*, end #char) {
    STDOut().Write(string, end);
    return;
}

public func WriteLine(string #char*) {
    STDOut().WriteLine(string);
    return;
}

public func Input(string #char*) #char* {
    return Input(string, STDOut(), STDIn());
}

public func Input(string #char*, output #File, input #File) #char* {
    output.Write(string, '\0');
    return input.ReadLine();
}

public func OpenFile(path #char*, mode #char*) #File {
    return #File.init(fopen(path, mode));
}

public struct File {
    public CFile #FILE*;

    public static func init(cfile #FILE*) #File {
        self.CFile = cfile;
        return self;
    }

    public func Write(string #char*) {
        fputs(string, self.CFile);
        fflush(self.CFile);
        return;
    }

    public func Write(char #char) {
        local str #char* = #char*(malloc(1));
        sprintf(str, "%c", char);
        self.Write(str);
        return;
    }

    public func Write(string #char*, end #char) {
        self.Write(string)
        self.Write(end);
        return;
    }

    public func WriteLine(string #char*) {
        self.Write(string, '\n');
        return;
    }

    public func GetChar() #char {
        local ch #i32 = fgetc(self.CFile);

        if !EOF(ch) {
            return #char(ch);
        } else {
            return '\0';
        }
    }

    public func ReadLine() #char* {
        local size #u32 = 512;
        local string #char* = malloc(size);
        local ch #char;
        local len #u32 = 0;

        if string == null {
            return string;
        }

        while (ch = self.GetChar()) != '\0' and ch != '\n' {
            string[len] = ch;
            ++len;
            
            if len >= size {
                string = realloc(string, size += 512);

                if string == null {
                    return string;
                }
            }
        }

        string[++len] = '\0';
        string = realloc(string, ++len);
        return string;
    }
}