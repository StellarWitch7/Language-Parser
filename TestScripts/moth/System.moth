namespace MothStd; // part of the standard libs

public class Sys {

    public static func Write(char #char) #void {
        #Sys.Write(char, stdout());
        return;
    }

    public static func Write(char #char, file #void*) #void {
        #Sys.Write("", char, file);
        return;
    }

    public static func Write(string #char*, end #char) #void {
        #Sys.Write(string, end, stdout());
        return;
    }

    public static func Write(string #char*, end #char, file #void*) #void {
        local size #u64 = #u64 <- 10000;
        local toPrint #char* = malloc(size); //TODO: terrible

        while toPrint == null {
            if size > (#u64 <- 0) {
                toPrint = malloc(--size);
            } else {
                return;
            }
        }

        sprintf(toPrint, "%s%c", string, end);
        #Sys.Write(toPrint);
        free(toPrint);
        return;
    }

    public static func Write(string #char*) #void {
        #Sys.Write(string, stdout());
        return;
    }

    public static func Write(string #char*, file #void*) #void {
        fputs(string, file);
        fflush(file);
        return;
    }

    public static func WriteLine(string #char*) #void {
        #Sys.WriteLine(string, stdout());
        return;
    }

    public static func WriteLine(string #char*, file #void*) #void {
        #Sys.Write(string, '\n', file);
        return;
    }

    public static func GetChar(file #void*) #char {
        local ch #i32 = fgetc(file);

        if !eof(ch) {
            return #char <- ch;
        } else {
            return '\0';
        }
    }

    public static func ReadLine(file #void*) #char* {
        local size #u64 = #u64 <- 512;
        local string #char* = malloc(size);
        local ch #char;
        local len ?= -1;

        if string == null {
            return string;
        }

        while (ch = #Sys.GetChar(file)) != '\0' and ch != '\n' {
            string[++len] = ch;
            
            if len >= (#i32 <- size) {
                string = realloc(string, size += (#u64 <- 512));

                if string == null {
                    return string;
                }
            }
        }

        string[++len] = '\0';
        string = realloc(string, #u64 <- ++len);
        return string;
    }

    public static func Input(string #char*) #char* {
        return #Sys.Input(string, stdout(), stdin());
    }

    public static func Input(string #char*, ouput #void*, input #void*) #char* {
        #Sys.Write(string, '\0', ouput);
        return #Sys.ReadLine(input);
    }
}

//public class Array<\T, SIZE #i32\> {
//    private value ?T*;
//
//    public static func init() #Array<\?T, SIZE\> {
//        self.value = malloc(SIZE * ?T.sizeof());
//        return self;
//    }
//
//    public func GetIndex(index #u32, ref val ?T) #bool {
//        ref val = if index > 0
//            and index < SIZE - 1
//            then self.value[index]
//            else null;
//        return if index > 0
//            and index < SIZE - 1
//            then true
//            else false;
//    }
//
//    public func SetIndex(index #u32, item ?T) #bool {
//
//        if index < 0 or index > SIZE - 1 {
//            return false;
//        }
//
//        self.value[index] = item;
//        return true;
//    }
//
//    public func AsPointer() ?T* {
//        return value;
//    }
//}