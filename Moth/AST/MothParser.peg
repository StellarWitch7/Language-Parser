@namespace Moth.AST
@classname MothParser
@accessibility public
@using Moth
@using Moth.AST.Node

script <ScriptAST> = nmspace:file_namespace statements:(top_level_decl*) { new ScriptAST(nmspace, statements.ToList()) }

file_namespace <NamespaceNode> = "namespace " nmspace:namespace ';' { nmspace }

namespace <NamespaceNode> = parent_namespace / simple_namespace

simple_namespace <NamespaceNode> = name:name { new NamespaceNode(name) }

parent_namespace <NamespaceNode> = name:name child:namespace { new NamespaceNode(name, child) }

top_level_decl <IStatementNode> = import

import <ImportNode> = "with " nmspace:namespace ';' { new ImportNode(nmspace) }

//type_ref <TypeRefNode> = default_type_ref
////                       / template_type_ref
//                       / local_type_ref
//                       / arr_type_ref
//                       / func_type_ref
//                       / ptr_type_ref
//                       / ref_type_ref
//
//child_type_ref <TypeRefNode> = default_type_ref
////                             / template_type_ref
//                             / local_type_ref
//                             / arr_type_ref
//                             / child_func_type_ref
//                             / ptr_type_ref
//                             / ref_type_ref
//
//default_type_ref <NamedTypeRefNode> = '#' name:name { new NamedTypeRefNode(name) }
//
////TODO: template_type_ref
//
//local_type_ref <LocalTypeRefNode> = '?' name:name { new TemplateTypeRefNode(name) }
//
//arr_type_ref <ArrTypeRefNode> = '#[' elementType:type_ref ']' { new ArrTypeRefNode(elementType) }
//
//base_func_type_ref <FuncTypeRefNode> = '(' paramTypes:(<List<TypeRefNode>> type_ref<0,,",">) ')' ret:type_ref { new FuncTypeRefNode(ret, paramTypes) }
//
//func_type_ref <FuncTypeRefNode> = '#' base:base_func_type_ref { base }
//
//child_func_type_ref <FuncTypeRefNode> = '#' '(' base:base_func_type_ref ')' { base }
//
//ptr_type_ref <PtrTypeRefNode> = child:child_type_ref '*' { new PtrTypeRefNode(child) }
//
//ref_type_ref <RefTypeRefNode> = child:child_type_ref '&' { new RefTypeRefNode(child) }

name <string> = [a-zA-Z_][a-zA-Z_0-9]*

literal_int <int> = value:('' [0-9]+) { int.Parse(value) }

literal_float <double> = value:([0-9]+ '.' [0-9]+) { double.Parse(value) }

whitespace <string> = '' [ \n\t\r]+