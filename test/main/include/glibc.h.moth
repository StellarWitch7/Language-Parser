namespace test::interop::glibc;

with core::math;

pub foreign global stdin #_IO_FILE*;
pub foreign global stdout #_IO_FILE*;
pub foreign global stderr #_IO_FILE*;
pub foreign global optarg #i8*;
pub foreign global optind #i32;
pub foreign global opterr #i32;
pub foreign global optopt #i32;
pub foreign global argp_program_version #i8*;
pub foreign global argp_program_version_hook #(#_IO_FILE*, #argp_state*) #void;
pub foreign global argp_program_bug_address #i8*;
pub foreign global argp_err_exit_status #i32;
pub foreign global error_print_progname #() #void;
pub foreign global error_message_count #u32;
pub foreign global error_one_per_line #i32;
pub foreign global __fpu_control #u16;
pub foreign global _r_debug #r_debug;
pub foreign global _DYNAMIC #Elf64_Dyn*;
pub foreign global signgam #i32;
pub foreign global in6addr_any #in6_addr;
pub foreign global in6addr_loopback #in6_addr;
pub foreign global obstack_alloc_failed_handler #() #void;
pub foreign global obstack_exit_failure #i32;
pub foreign global __tzname #[#i8*; 2];
pub foreign global __daylight #i32;
pub foreign global __timezone #i64;
pub foreign global tzname #[#i8*; 2];
pub foreign global daylight #i32;
pub foreign global timezone #i64;
pub foreign global re_syntax_options #u64;
pub foreign global _ns_flagdata #_ns_flagdata*;
pub foreign global __environ #i8**;

pub foreign fn aio_read(__aiocbp #aiocb*) #i32;

pub foreign fn aio_write(__aiocbp #aiocb*) #i32;

pub foreign fn lio_listio(__mode #i32, __list #aiocb**, __nent #i32, __sig #sigevent*) #i32;

pub foreign fn aio_error(__aiocbp #aiocb*) #i32;

pub foreign fn aio_return(__aiocbp #aiocb*) #i32;

pub foreign fn aio_cancel(__fildes #i32, __aiocbp #aiocb*) #i32;

pub foreign fn aio_suspend(__list #aiocb**, __nent #i32, __timeout #timespec*) #i32;

pub foreign fn aio_fsync(__operation #i32, __aiocbp #aiocb*) #i32;

pub foreign fn setaliasent() #void;

pub foreign fn endaliasent() #void;

pub foreign fn getaliasent() #aliasent*;

pub foreign fn getaliasent_r(__result_buf #aliasent*, __buffer #i8*, __buflen #i32, __result #aliasent**) #i32;

pub foreign fn getaliasbyname(__name #i8*) #aliasent*;

pub foreign fn getaliasbyname_r(__name #i8*, __result_buf #aliasent*, __buffer #i8*, __buflen #i32, __result #aliasent**) #i32;

pub foreign fn alloca(__size #i32) #void*;

pub foreign fn remove(__filename #i8*) #i32;

pub foreign fn rename(__old #i8*, __new #i8*) #i32;

pub foreign fn renameat(__oldfd #i32, __old #i8*, __newfd #i32, __new #i8*) #i32;

pub foreign fn fclose(__stream #_IO_FILE*) #i32;

pub foreign fn tmpfile() #_IO_FILE*;

pub foreign fn tmpnam(_ #[#i8; 20]) #i8*;

pub foreign fn tmpnam_r(__s #[#i8; 20]) #i8*;

pub foreign fn tempnam(__dir #i8*, __pfx #i8*) #i8*;

pub foreign fn fflush(__stream #_IO_FILE*) #i32;

pub foreign fn fflush_unlocked(__stream #_IO_FILE*) #i32;

pub foreign fn fopen(__filename #i8*, __modes #i8*) #_IO_FILE*;

pub foreign fn freopen(__filename #i8*, __modes #i8*, __stream #_IO_FILE*) #_IO_FILE*;

pub foreign fn fdopen(__fd #i32, __modes #i8*) #_IO_FILE*;

pub foreign fn fopencookie(__magic_cookie #void*, __modes #i8*, __io_funcs #_IO_cookie_io_functions_t) #_IO_FILE*;

pub foreign fn fmemopen(__s #void*, __len #i32, __modes #i8*) #_IO_FILE*;

pub foreign fn open_memstream(__bufloc #i8**, __sizeloc #i32*) #_IO_FILE*;

pub foreign fn setbuf(__stream #_IO_FILE*, __buf #i8*) #void;

pub foreign fn setvbuf(__stream #_IO_FILE*, __buf #i8*, __modes #i32, __n #i32) #i32;

pub foreign fn setbuffer(__stream #_IO_FILE*, __buf #i8*, __size #i32) #void;

pub foreign fn setlinebuf(__stream #_IO_FILE*) #void;

pub foreign fn fprintf(__stream #_IO_FILE*, __format #i8*, ...) #i32;

pub foreign fn printf(__format #i8*, ...) #i32;

pub foreign fn sprintf(__s #i8*, __format #i8*, ...) #i32;

pub foreign fn vfprintf(__s #_IO_FILE*, __format #i8*, __arg #i32) #i32;

pub foreign fn vprintf(__format #i8*, __arg #i32) #i32;

pub foreign fn vsprintf(__s #i8*, __format #i8*, __arg #i32) #i32;

pub foreign fn snprintf(__s #i8*, __maxlen #i32, __format #i8*, ...) #i32;

pub foreign fn vsnprintf(__s #i8*, __maxlen #i32, __format #i8*, __arg #i32) #i32;

pub foreign fn vasprintf(__ptr #i8**, __f #i8*, __arg #i32) #i32;

pub foreign fn __asprintf(__ptr #i8**, __fmt #i8*, ...) #i32;

pub foreign fn asprintf(__ptr #i8**, __fmt #i8*, ...) #i32;

pub foreign fn vdprintf(__fd #i32, __fmt #i8*, __arg #i32) #i32;

pub foreign fn dprintf(__fd #i32, __fmt #i8*, ...) #i32;

pub foreign fn fscanf(__stream #_IO_FILE*, __format #i8*, ...) #i32;

pub foreign fn scanf(__format #i8*, ...) #i32;

pub foreign fn sscanf(__s #i8*, __format #i8*, ...) #i32;

pub foreign fn fscanf(__stream #_IO_FILE*, __format #i8*, ...) #i32;

pub foreign fn scanf(__format #i8*, ...) #i32;

pub foreign fn sscanf(__s #i8*, __format #i8*, ...) #i32;

pub foreign fn vfscanf(__s #_IO_FILE*, __format #i8*, __arg #i32) #i32;

pub foreign fn vscanf(__format #i8*, __arg #i32) #i32;

pub foreign fn vsscanf(__s #i8*, __format #i8*, __arg #i32) #i32;

pub foreign fn vfscanf(__s #_IO_FILE*, __format #i8*, __arg #i32) #i32;

pub foreign fn vscanf(__format #i8*, __arg #i32) #i32;

pub foreign fn vsscanf(__s #i8*, __format #i8*, __arg #i32) #i32;

pub foreign fn fgetc(__stream #_IO_FILE*) #i32;

pub foreign fn getc(__stream #_IO_FILE*) #i32;

pub foreign fn getchar() #i32;

pub foreign fn getc_unlocked(__stream #_IO_FILE*) #i32;

pub foreign fn getchar_unlocked() #i32;

pub foreign fn fgetc_unlocked(__stream #_IO_FILE*) #i32;

pub foreign fn fputc(__c #i32, __stream #_IO_FILE*) #i32;

pub foreign fn putc(__c #i32, __stream #_IO_FILE*) #i32;

pub foreign fn putchar(__c #i32) #i32;

pub foreign fn fputc_unlocked(__c #i32, __stream #_IO_FILE*) #i32;

pub foreign fn putc_unlocked(__c #i32, __stream #_IO_FILE*) #i32;

pub foreign fn putchar_unlocked(__c #i32) #i32;

pub foreign fn getw(__stream #_IO_FILE*) #i32;

pub foreign fn putw(__w #i32, __stream #_IO_FILE*) #i32;

pub foreign fn fgets(__s #i8*, __n #i32, __stream #_IO_FILE*) #i8*;

pub foreign fn __getdelim(__lineptr #i8**, __n #i32*, __delimiter #i32, __stream #_IO_FILE*) #i32;

pub foreign fn getdelim(__lineptr #i8**, __n #i32*, __delimiter #i32, __stream #_IO_FILE*) #i32;

pub foreign fn getline(__lineptr #i8**, __n #i32*, __stream #_IO_FILE*) #i32;

pub foreign fn fputs(__s #i8*, __stream #_IO_FILE*) #i32;

pub foreign fn puts(__s #i8*) #i32;

pub foreign fn ungetc(__c #i32, __stream #_IO_FILE*) #i32;

pub foreign fn fread(__ptr #void*, __size #i32, __n #i32, __stream #_IO_FILE*) #i32;

pub foreign fn fwrite(__ptr #void*, __size #i32, __n #i32, __s #_IO_FILE*) #i32;

pub foreign fn fread_unlocked(__ptr #void*, __size #i32, __n #i32, __stream #_IO_FILE*) #i32;

pub foreign fn fwrite_unlocked(__ptr #void*, __size #i32, __n #i32, __stream #_IO_FILE*) #i32;

pub foreign fn fseek(__stream #_IO_FILE*, __off #i64, __whence #i32) #i32;

pub foreign fn ftell(__stream #_IO_FILE*) #i64;

pub foreign fn rewind(__stream #_IO_FILE*) #void;

pub foreign fn fseeko(__stream #_IO_FILE*, __off #i32, __whence #i32) #i32;

pub foreign fn ftello(__stream #_IO_FILE*) #i32;

pub foreign fn fgetpos(__stream #_IO_FILE*, __pos #_G_fpos_t*) #i32;

pub foreign fn fsetpos(__stream #_IO_FILE*, __pos #_G_fpos_t*) #i32;

pub foreign fn clearerr(__stream #_IO_FILE*) #void;

pub foreign fn feof(__stream #_IO_FILE*) #i32;

pub foreign fn ferror(__stream #_IO_FILE*) #i32;

pub foreign fn clearerr_unlocked(__stream #_IO_FILE*) #void;

pub foreign fn feof_unlocked(__stream #_IO_FILE*) #i32;

pub foreign fn ferror_unlocked(__stream #_IO_FILE*) #i32;

pub foreign fn perror(__s #i8*) #void;

pub foreign fn fileno(__stream #_IO_FILE*) #i32;

pub foreign fn fileno_unlocked(__stream #_IO_FILE*) #i32;

pub foreign fn pclose(__stream #_IO_FILE*) #i32;

pub foreign fn popen(__command #i8*, __modes #i8*) #_IO_FILE*;

pub foreign fn ctermid(__s #i8*) #i8*;

pub foreign fn flockfile(__stream #_IO_FILE*) #void;

pub foreign fn ftrylockfile(__stream #_IO_FILE*) #i32;

pub foreign fn funlockfile(__stream #_IO_FILE*) #void;

pub foreign fn __uflow(_ #_IO_FILE*) #i32;

pub foreign fn __overflow(_ #_IO_FILE*, _ #i32) #i32;

pub foreign fn __ctype_b_loc() #u16**;

pub foreign fn __ctype_tolower_loc() #i32**;

pub foreign fn __ctype_toupper_loc() #i32**;

pub foreign fn isalnum(_ #i32) #i32;

pub foreign fn isalpha(_ #i32) #i32;

pub foreign fn iscntrl(_ #i32) #i32;

pub foreign fn isdigit(_ #i32) #i32;

pub foreign fn islower(_ #i32) #i32;

pub foreign fn isgraph(_ #i32) #i32;

pub foreign fn isprint(_ #i32) #i32;

pub foreign fn ispunct(_ #i32) #i32;

pub foreign fn isspace(_ #i32) #i32;

pub foreign fn isupper(_ #i32) #i32;

pub foreign fn isxdigit(_ #i32) #i32;

pub foreign fn tolower(__c #i32) #i32;

pub foreign fn toupper(__c #i32) #i32;

pub foreign fn isblank(_ #i32) #i32;

pub foreign fn isascii(__c #i32) #i32;

pub foreign fn toascii(__c #i32) #i32;

pub foreign fn _toupper(_ #i32) #i32;

pub foreign fn _tolower(_ #i32) #i32;

pub foreign fn isalnum_l(_ #i32, _ #i32) #i32;

pub foreign fn isalpha_l(_ #i32, _ #i32) #i32;

pub foreign fn iscntrl_l(_ #i32, _ #i32) #i32;

pub foreign fn isdigit_l(_ #i32, _ #i32) #i32;

pub foreign fn islower_l(_ #i32, _ #i32) #i32;

pub foreign fn isgraph_l(_ #i32, _ #i32) #i32;

pub foreign fn isprint_l(_ #i32, _ #i32) #i32;

pub foreign fn ispunct_l(_ #i32, _ #i32) #i32;

pub foreign fn isspace_l(_ #i32, _ #i32) #i32;

pub foreign fn isupper_l(_ #i32, _ #i32) #i32;

pub foreign fn isxdigit_l(_ #i32, _ #i32) #i32;

pub foreign fn isblank_l(_ #i32, _ #i32) #i32;

pub foreign fn __tolower_l(__c #i32, __l #i32) #i32;

pub foreign fn tolower_l(__c #i32, __l #i32) #i32;

pub foreign fn __toupper_l(__c #i32, __l #i32) #i32;

pub foreign fn toupper_l(__c #i32, __l #i32) #i32;

pub foreign fn getopt(___argc #i32, ___argv #i8**, __shortopts #i8*) #i32;

pub foreign fn getopt_long(___argc #i32, ___argv #i8**, __shortopts #i8*, __longopts #option*, __longind #i32*) #i32;

pub foreign fn getopt_long_only(___argc #i32, ___argv #i8**, __shortopts #i8*, __longopts #option*, __longind #i32*) #i32;

pub foreign fn __errno_location() #i32*;

pub foreign fn argp_parse(__argp #argp*, __argc #i32, __argv #i8**, __flags #u32, __arg_index #i32*, __input #void*) #i32;

pub foreign fn __argp_parse(__argp #argp*, __argc #i32, __argv #i8**, __flags #u32, __arg_index #i32*, __input #void*) #i32;

pub foreign fn argp_help(__argp #argp*, __stream #_IO_FILE*, __flags #u32, __name #i8*) #void;

pub foreign fn __argp_help(__argp #argp*, __stream #_IO_FILE*, __flags #u32, __name #i8*) #void;

pub foreign fn argp_state_help(__state #argp_state*, __stream #_IO_FILE*, __flags #u32) #void;

pub foreign fn __argp_state_help(__state #argp_state*, __stream #_IO_FILE*, __flags #u32) #void;

pub foreign fn argp_usage(__state #argp_state*) #void;

pub foreign fn __argp_usage(__state #argp_state*) #void;

pub foreign fn argp_error(__state #argp_state*, __fmt #i8*, ...) #void;

pub foreign fn __argp_error(__state #argp_state*, __fmt #i8*, ...) #void;

pub foreign fn argp_failure(__state #argp_state*, __status #i32, __errnum #i32, __fmt #i8*, ...) #void;

pub foreign fn __argp_failure(__state #argp_state*, __status #i32, __errnum #i32, __fmt #i8*, ...) #void;

pub foreign fn _option_is_short(__opt #argp_option*) #i32;

pub foreign fn __option_is_short(__opt #argp_option*) #i32;

pub foreign fn _option_is_end(__opt #argp_option*) #i32;

pub foreign fn __option_is_end(__opt #argp_option*) #i32;

pub foreign fn _argp_input(__argp #argp*, __state #argp_state*) #void*;

pub foreign fn __argp_input(__argp #argp*, __state #argp_state*) #void*;

pub foreign fn memcpy(__dest #void*, __src #void*, __n #i32) #void*;

pub foreign fn memmove(__dest #void*, __src #void*, __n #i32) #void*;

pub foreign fn memccpy(__dest #void*, __src #void*, __c #i32, __n #i32) #void*;

pub foreign fn memset(__s #void*, __c #i32, __n #i32) #void*;

pub foreign fn memcmp(__s1 #void*, __s2 #void*, __n #i32) #i32;

pub foreign fn __memcmpeq(__s1 #void*, __s2 #void*, __n #i32) #i32;

pub foreign fn memchr(__s #void*, __c #i32, __n #i32) #void*;

pub foreign fn strcpy(__dest #i8*, __src #i8*) #i8*;

pub foreign fn strncpy(__dest #i8*, __src #i8*, __n #i32) #i8*;

pub foreign fn strcat(__dest #i8*, __src #i8*) #i8*;

pub foreign fn strncat(__dest #i8*, __src #i8*, __n #i32) #i8*;

pub foreign fn strcmp(__s1 #i8*, __s2 #i8*) #i32;

pub foreign fn strncmp(__s1 #i8*, __s2 #i8*, __n #i32) #i32;

pub foreign fn strcoll(__s1 #i8*, __s2 #i8*) #i32;

pub foreign fn strxfrm(__dest #i8*, __src #i8*, __n #i32) #i32;

pub foreign fn strcoll_l(__s1 #i8*, __s2 #i8*, __l #i32) #i32;

pub foreign fn strxfrm_l(__dest #i8*, __src #i8*, __n #i32, __l #i32) #i32;

pub foreign fn strdup(__s #i8*) #i8*;

pub foreign fn strndup(__string #i8*, __n #i32) #i8*;

pub foreign fn strchr(__s #i8*, __c #i32) #i8*;

pub foreign fn strrchr(__s #i8*, __c #i32) #i8*;

pub foreign fn strchrnul(__s #i8*, __c #i32) #i8*;

pub foreign fn strcspn(__s #i8*, __reject #i8*) #i32;

pub foreign fn strspn(__s #i8*, __accept #i8*) #i32;

pub foreign fn strpbrk(__s #i8*, __accept #i8*) #i8*;

pub foreign fn strstr(__haystack #i8*, __needle #i8*) #i8*;

pub foreign fn strtok(__s #i8*, __delim #i8*) #i8*;

pub foreign fn __strtok_r(__s #i8*, __delim #i8*, __save_ptr #i8**) #i8*;

pub foreign fn strtok_r(__s #i8*, __delim #i8*, __save_ptr #i8**) #i8*;

pub foreign fn strcasestr(__haystack #i8*, __needle #i8*) #i8*;

pub foreign fn memmem(__haystack #void*, __haystacklen #i32, __needle #void*, __needlelen #i32) #void*;

pub foreign fn __mempcpy(__dest #void*, __src #void*, __n #i32) #void*;

pub foreign fn mempcpy(__dest #void*, __src #void*, __n #i32) #void*;

pub foreign fn strlen(__s #i8*) #i32;

pub foreign fn strnlen(__string #i8*, __maxlen #i32) #i32;

pub foreign fn strerror(__errnum #i32) #i8*;

pub foreign fn strerror_r(__errnum #i32, __buf #i8*, __buflen #i32) #i32;

pub foreign fn strerror_l(__errnum #i32, __l #i32) #i8*;

pub foreign fn bcmp(__s1 #void*, __s2 #void*, __n #i32) #i32;

pub foreign fn bcopy(__src #void*, __dest #void*, __n #i32) #void;

pub foreign fn bzero(__s #void*, __n #i32) #void;

pub foreign fn index(__s #i8*, __c #i32) #i8*;

pub foreign fn rindex(__s #i8*, __c #i32) #i8*;

pub foreign fn ffs(__i #i32) #i32;

pub foreign fn ffsl(__l #i64) #i32;

pub foreign fn ffsll(__ll #i64) #i32;

pub foreign fn strcasecmp(__s1 #i8*, __s2 #i8*) #i32;

pub foreign fn strncasecmp(__s1 #i8*, __s2 #i8*, __n #i32) #i32;

pub foreign fn strcasecmp_l(__s1 #i8*, __s2 #i8*, __loc #i32) #i32;

pub foreign fn strncasecmp_l(__s1 #i8*, __s2 #i8*, __n #i32, __loc #i32) #i32;

pub foreign fn explicit_bzero(__s #void*, __n #i32) #void;

pub foreign fn strsep(__stringp #i8**, __delim #i8*) #i8*;

pub foreign fn strsignal(__sig #i32) #i8*;

pub foreign fn __stpcpy(__dest #i8*, __src #i8*) #i8*;

pub foreign fn stpcpy(__dest #i8*, __src #i8*) #i8*;

pub foreign fn __stpncpy(__dest #i8*, __src #i8*, __n #i32) #i8*;

pub foreign fn stpncpy(__dest #i8*, __src #i8*, __n #i32) #i8*;

pub foreign fn strlcpy(__dest #i8*, __src #i8*, __n #i32) #i32;

pub foreign fn strlcat(__dest #i8*, __src #i8*, __n #i32) #i32;

pub foreign fn __argz_create(__argv #i8**, __argz #i8**, __len #i32*) #i32;

pub foreign fn argz_create(__argv #i8**, __argz #i8**, __len #i32*) #i32;

pub foreign fn argz_create_sep(__string #i8*, __sep #i32, __argz #i8**, __len #i32*) #i32;

pub foreign fn __argz_count(__argz #i8*, __len #i32) #i32;

pub foreign fn argz_count(__argz #i8*, __len #i32) #i32;

pub foreign fn __argz_extract(__argz #i8*, __len #i32, __argv #i8**) #void;

pub foreign fn argz_extract(__argz #i8*, __len #i32, __argv #i8**) #void;

pub foreign fn __argz_stringify(__argz #i8*, __len #i32, __sep #i32) #void;

pub foreign fn argz_stringify(__argz #i8*, __len #i32, __sep #i32) #void;

pub foreign fn argz_append(__argz #i8**, __argz_len #i32*, __buf #i8*, __buf_len #i32) #i32;

pub foreign fn argz_add(__argz #i8**, __argz_len #i32*, __str #i8*) #i32;

pub foreign fn argz_add_sep(__argz #i8**, __argz_len #i32*, __string #i8*, __delim #i32) #i32;

pub foreign fn argz_delete(__argz #i8**, __argz_len #i32*, __entry #i8*) #void;

pub foreign fn argz_insert(__argz #i8**, __argz_len #i32*, __before #i8*, __entry #i8*) #i32;

pub foreign fn argz_replace(__argz #i8**, __argz_len #i32*, __str #i8*, __with #i8*, __replace_count #u32*) #i32;

pub foreign fn __argz_next(__argz #i8*, __argz_len #i32, __entry #i8*) #i8*;

pub foreign fn argz_next(__argz #i8*, __argz_len #i32, __entry #i8*) #i8*;

pub foreign fn __assert_fail(__assertion #i8*, __file #i8*, __line #u32, __function #i8*) #void;

pub foreign fn __assert_perror_fail(__errnum #i32, __file #i8*, __line #u32, __function #i8*) #void;

pub foreign fn __assert(__assertion #i8*, __file #i8*, __line #i32) #void;

pub foreign fn __bswap_16(__bsx #u16) #u16;

pub foreign fn __bswap_32(__bsx #u32) #u32;

pub foreign fn __bswap_64(__bsx #u64) #u64;

pub foreign fn cacos(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __cacos(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn casin(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __casin(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn catan(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __catan(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn ccos(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __ccos(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn csin(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __csin(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn ctan(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __ctan(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn cacosh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __cacosh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn casinh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __casinh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn catanh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __catanh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn ccosh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __ccosh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn csinh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __csinh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn ctanh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __ctanh(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn cexp(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __cexp(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn clog(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __clog(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn cpow(__x #Complex<#f64>, __y #Complex<#f64>) #Complex<#f64>;

pub foreign fn __cpow(__x #Complex<#f64>, __y #Complex<#f64>) #Complex<#f64>;

pub foreign fn csqrt(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __csqrt(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn cabs(__z #Complex<#f64>) #f64;

pub foreign fn __cabs(__z #Complex<#f64>) #f64;

pub foreign fn carg(__z #Complex<#f64>) #f64;

pub foreign fn __carg(__z #Complex<#f64>) #f64;

pub foreign fn conj(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __conj(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn cproj(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn __cproj(__z #Complex<#f64>) #Complex<#f64>;

pub foreign fn cimag(__z #Complex<#f64>) #f64;

pub foreign fn __cimag(__z #Complex<#f64>) #f64;

pub foreign fn creal(__z #Complex<#f64>) #f64;

pub foreign fn __creal(__z #Complex<#f64>) #f64;

pub foreign fn closedir(__dirp #__dirstream*) #i32;

pub foreign fn opendir(__name #i8*) #__dirstream*;

pub foreign fn fdopendir(__fd #i32) #__dirstream*;

pub foreign fn readdir(__dirp #__dirstream*) #dirent*;

pub foreign fn readdir_r(__dirp #__dirstream*, __entry #dirent*, __result #dirent**) #i32;

pub foreign fn rewinddir(__dirp #__dirstream*) #void;

pub foreign fn seekdir(__dirp #__dirstream*, __pos #i64) #void;

pub foreign fn telldir(__dirp #__dirstream*) #i64;

pub foreign fn dirfd(__dirp #__dirstream*) #i32;

pub foreign fn scandir(__dir #i8*, __namelist #dirent***, __selector #(#dirent*) #i32, __cmp #(#dirent**, #dirent**) #i32) #i32;

pub foreign fn alphasort(__e1 #dirent**, __e2 #dirent**) #i32;

pub foreign fn getdirentries(__fd #i32, __buf #i8*, __nbytes #i32, __basep #i32*) #i32;

pub foreign fn dlopen(__file #i8*, __mode #i32) #void*;

pub foreign fn dlclose(__handle #void*) #i32;

pub foreign fn dlsym(__handle #void*, __name #i8*) #void*;

pub foreign fn dlerror() #i8*;

pub foreign fn __uint16_identity(__x #u16) #u16;

pub foreign fn __uint32_identity(__x #u32) #u32;

pub foreign fn __uint64_identity(__x #u64) #u64;

pub foreign fn envz_entry(__envz #i8*, __envz_len #i32, __name #i8*) #i8*;

pub foreign fn envz_get(__envz #i8*, __envz_len #i32, __name #i8*) #i8*;

pub foreign fn envz_add(__envz #i8**, __envz_len #i32*, __name #i8*, __value #i8*) #i32;

pub foreign fn envz_merge(__envz #i8**, __envz_len #i32*, __envz2 #i8*, __envz2_len #i32, __override #i32) #i32;

pub foreign fn envz_remove(__envz #i8**, __envz_len #i32*, __name #i8*) #void;

pub foreign fn envz_strip(__envz #i8**, __envz_len #i32*) #void;

pub foreign fn warn(__format #i8*, ...) #void;

pub foreign fn vwarn(__format #i8*, _ #void*) #void;

pub foreign fn warnx(__format #i8*, ...) #void;

pub foreign fn vwarnx(__format #i8*, _ #void*) #void;

pub foreign fn err(__status #i32, __format #i8*, ...) #void;

pub foreign fn verr(__status #i32, __format #i8*, _ #void*) #void;

pub foreign fn errx(__status #i32, __format #i8*, ...) #void;

pub foreign fn verrx(__status #i32, _ #i8*, _ #void*) #void;

pub foreign fn error(__status #i32, __errnum #i32, __format #i8*, ...) #void;

pub foreign fn error_at_line(__status #i32, __errnum #i32, __fname #i8*, __lineno #u32, __format #i8*, ...) #void;

pub foreign fn backtrace(__array #void**, __size #i32) #i32;

pub foreign fn backtrace_symbols(__array #void**, __size #i32) #i8**;

pub foreign fn backtrace_symbols_fd(__array #void**, __size #i32, __fd #i32) #void;

pub foreign fn fcntl(__fd #i32, __cmd #i32, ...) #i32;

pub foreign fn open(__file #i8*, __oflag #i32, ...) #i32;

pub foreign fn openat(__fd #i32, __file #i8*, __oflag #i32, ...) #i32;

pub foreign fn creat(__file #i8*, __mode #i32) #i32;

pub foreign fn lockf(__fd #i32, __cmd #i32, __len #i32) #i32;

pub foreign fn posix_fadvise(__fd #i32, __offset #i32, __len #i32, __advise #i32) #i32;

pub foreign fn posix_fallocate(__fd #i32, __offset #i32, __len #i32) #i32;

pub foreign fn feclearexcept(__excepts #i32) #i32;

pub foreign fn fegetexceptflag(__flagp #u16*, __excepts #i32) #i32;

pub foreign fn feraiseexcept(__excepts #i32) #i32;

pub foreign fn fesetexceptflag(__flagp #u16*, __excepts #i32) #i32;

pub foreign fn fetestexcept(__excepts #i32) #i32;

pub foreign fn fegetround() #i32;

pub foreign fn fesetround(__rounding_direction #i32) #i32;

pub foreign fn fegetenv(__envp #fenv_t*) #i32;

pub foreign fn feholdexcept(__envp #fenv_t*) #i32;

pub foreign fn fesetenv(__envp #fenv_t*) #i32;

pub foreign fn feupdateenv(__envp #fenv_t*) #i32;

pub foreign fn fmtmsg(__classification #i64, __label #i8*, __severity #i32, __text #i8*, __action #i8*, __tag #i8*) #i32;

pub foreign fn addseverity(__severity #i32, __string #i8*) #i32;

pub foreign fn fnmatch(__pattern #i8*, __name #i8*, __flags #i32) #i32;

pub foreign fn getfsent() #fstab*;

pub foreign fn getfsspec(__name #i8*) #fstab*;

pub foreign fn getfsfile(__name #i8*) #fstab*;

pub foreign fn setfsent() #i32;

pub foreign fn endfsent() #void;

pub foreign fn fts_children(_ #FTS*, _ #i32) #_ftsent*;

pub foreign fn fts_close(_ #FTS*) #i32;

pub foreign fn fts_open(_ #i8**, _ #i32, _ #(#_ftsent**, #_ftsent**) #i32) #FTS*;

pub foreign fn fts_read(_ #FTS*) #_ftsent*;

pub foreign fn fts_set(_ #FTS*, _ #_ftsent*, _ #i32) #i32;

pub foreign fn stat(__file #i8*, __buf #stat*) #i32;

pub foreign fn fstat(__fd #i32, __buf #stat*) #i32;

pub foreign fn fstatat(__fd #i32, __file #i8*, __buf #stat*, __flag #i32) #i32;

pub foreign fn lstat(__file #i8*, __buf #stat*) #i32;

pub foreign fn chmod(__file #i8*, __mode #i32) #i32;

pub foreign fn lchmod(__file #i8*, __mode #i32) #i32;

pub foreign fn fchmod(__fd #i32, __mode #i32) #i32;

pub foreign fn fchmodat(__fd #i32, __file #i8*, __mode #i32, __flag #i32) #i32;

pub foreign fn umask(__mask #i32) #i32;

pub foreign fn mkdir(__path #i8*, __mode #i32) #i32;

pub foreign fn mkdirat(__fd #i32, __path #i8*, __mode #i32) #i32;

pub foreign fn mknod(__path #i8*, __mode #i32, __dev #i32) #i32;

pub foreign fn mknodat(__fd #i32, __path #i8*, __mode #i32, __dev #i32) #i32;

pub foreign fn mkfifo(__path #i8*, __mode #i32) #i32;

pub foreign fn mkfifoat(__fd #i32, __path #i8*, __mode #i32) #i32;

pub foreign fn utimensat(__fd #i32, __path #i8*, __times #[#timespec; 2], __flags #i32) #i32;

pub foreign fn futimens(__fd #i32, __times #[#timespec; 2]) #i32;

pub foreign fn ftw(__dir #i8*, __func #(#i8*, #stat*, #i32) #i32, __descriptors #i32) #i32;

pub foreign fn glob(__pattern #i8*, __flags #i32, __errfunc #(#i8*, #i32) #i32, __pglob #glob_t*) #i32;

pub foreign fn globfree(__pglob #glob_t*) #void;

pub foreign fn setgrent() #void;

pub foreign fn endgrent() #void;

pub foreign fn getgrent() #group*;

pub foreign fn fgetgrent(__stream #_IO_FILE*) #group*;

pub foreign fn getgrgid(__gid #i32) #group*;

pub foreign fn getgrnam(__name #i8*) #group*;

pub foreign fn getgrgid_r(__gid #i32, __resultbuf #group*, __buffer #i8*, __buflen #u64, __result #group**) #i32;

pub foreign fn getgrnam_r(__name #i8*, __resultbuf #group*, __buffer #i8*, __buflen #u64, __result #group**) #i32;

pub foreign fn fgetgrent_r(__stream #_IO_FILE*, __resultbuf #group*, __buffer #i8*, __buflen #u64, __result #group**) #i32;

pub foreign fn setgroups(__n #u64, __groups #i32*) #i32;

pub foreign fn getgrouplist(__user #i8*, __group #i32, __groups #i32*, __ngroups #i32*) #i32;

pub foreign fn initgroups(__user #i8*, __group #i32) #i32;

pub foreign fn setsgent() #void;

pub foreign fn endsgent() #void;

pub foreign fn getsgent() #sgrp*;

pub foreign fn getsgnam(__name #i8*) #sgrp*;

pub foreign fn sgetsgent(__string #i8*) #sgrp*;

pub foreign fn fgetsgent(__stream #_IO_FILE*) #sgrp*;

pub foreign fn putsgent(__g #sgrp*, __stream #_IO_FILE*) #i32;

pub foreign fn getsgent_r(__result_buf #sgrp*, __buffer #i8*, __buflen #u64, __result #sgrp**) #i32;

pub foreign fn getsgnam_r(__name #i8*, __result_buf #sgrp*, __buffer #i8*, __buflen #u64, __result #sgrp**) #i32;

pub foreign fn sgetsgent_r(__string #i8*, __result_buf #sgrp*, __buffer #i8*, __buflen #u64, __result #sgrp**) #i32;

pub foreign fn fgetsgent_r(__stream #_IO_FILE*, __result_buf #sgrp*, __buffer #i8*, __buflen #u64, __result #sgrp**) #i32;

pub foreign fn iconv_close(__cd #void*) #i32;

pub foreign fn iconv_open(__tocode #i8*, __fromcode #i8*) #void*;

pub foreign fn iconv(__cd #void*, __inbuf #i8**, __inbytesleft #u64*, __outbuf #i8**, __outbytesleft #u64*) #u64;

pub foreign fn socket(__domain #i32, __type #i32, __protocol #i32) #i32;

pub foreign fn socketpair(__domain #i32, __type #i32, __protocol #i32, __fds #[#i32; 2]) #i32;

pub foreign fn bind(__fd #i32, __addr #sockaddr*, __len #i32) #i32;

pub foreign fn getsockname(__fd #i32, __addr #sockaddr*, __len #i32*) #i32;

pub foreign fn connect(__fd #i32, __addr #sockaddr*, __len #i32) #i32;

pub foreign fn getpeername(__fd #i32, __addr #sockaddr*, __len #i32*) #i32;

pub foreign fn send(__fd #i32, __buf #void*, __n #u64, __flags #i32) #i32;

pub foreign fn recv(__fd #i32, __buf #void*, __n #u64, __flags #i32) #i32;

pub foreign fn sendto(__fd #i32, __buf #void*, __n #u64, __flags #i32, __addr #sockaddr*, __addr_len #i32) #i32;

pub foreign fn recvfrom(__fd #i32, __buf #void*, __n #u64, __flags #i32, __addr #sockaddr*, __addr_len #i32*) #i32;

pub foreign fn sendmsg(__fd #i32, __message #msghdr*, __flags #i32) #i32;

pub foreign fn recvmsg(__fd #i32, __message #msghdr*, __flags #i32) #i32;

pub foreign fn getsockopt(__fd #i32, __level #i32, __optname #i32, __optval #void*, __optlen #i32*) #i32;

pub foreign fn setsockopt(__fd #i32, __level #i32, __optname #i32, __optval #void*, __optlen #i32) #i32;

pub foreign fn listen(__fd #i32, __n #i32) #i32;

pub foreign fn accept(__fd #i32, __addr #sockaddr*, __addr_len #i32*) #i32;

pub foreign fn shutdown(__fd #i32, __how #i32) #i32;

pub foreign fn sockatmark(__fd #i32) #i32;

pub foreign fn isfdtype(__fd #i32, __fdtype #i32) #i32;

pub foreign fn getifaddrs(__ifap #ifaddrs**) #i32;

pub foreign fn freeifaddrs(__ifa #ifaddrs*) #void;

pub foreign fn imaxabs(__n #i64) #i64;

pub foreign fn imaxdiv(__numer #i64, __denom #i64) #imaxdiv_t;

pub foreign fn strtoimax(__nptr #i8*, __endptr #i8**, __base #i32) #i64;

pub foreign fn strtoumax(__nptr #i8*, __endptr #i8**, __base #i32) #u64;

pub foreign fn wcstoimax(__nptr #i32*, __endptr #i32**, __base #i32) #i64;

pub foreign fn wcstoumax(__nptr #i32*, __endptr #i32**, __base #i32) #u64;

pub foreign fn catopen(__cat_name #i8*, __flag #i32) #void*;

pub foreign fn catgets(__catalog #void*, __set #i32, __number #i32, __string #i8*) #i8*;

pub foreign fn catclose(__catalog #void*) #i32;

pub foreign fn nl_langinfo(__item #i32) #i8*;

pub foreign fn nl_langinfo_l(__item #i32, __l #i32) #i8*;

pub foreign fn login_tty(__fd #i32) #i32;

pub foreign fn login(__entry #utmp*) #void;

pub foreign fn logout(__ut_line #i8*) #i32;

pub foreign fn logwtmp(__ut_line #i8*, __ut_name #i8*, __ut_host #i8*) #void;

pub foreign fn updwtmp(__wtmp_file #i8*, __utmp #utmp*) #void;

pub foreign fn utmpname(__file #i8*) #i32;

pub foreign fn getutent() #utmp*;

pub foreign fn setutent() #void;

pub foreign fn endutent() #void;

pub foreign fn getutid(__id #utmp*) #utmp*;

pub foreign fn getutline(__line #utmp*) #utmp*;

pub foreign fn pututline(__utmp_ptr #utmp*) #utmp*;

pub foreign fn getutent_r(__buffer #utmp*, __result #utmp**) #i32;

pub foreign fn getutid_r(__id #utmp*, __buffer #utmp*, __result #utmp**) #i32;

pub foreign fn getutline_r(__line #utmp*, __buffer #utmp*, __result #utmp**) #i32;

pub foreign fn dirname(__path #i8*) #i8*;

pub foreign fn __xpg_basename(__path #i8*) #i8*;

pub foreign fn gettext(__msgid #i8*) #i8*;

pub foreign fn dgettext(__domainname #i8*, __msgid #i8*) #i8*;

pub foreign fn __dgettext(__domainname #i8*, __msgid #i8*) #i8*;

pub foreign fn dcgettext(__domainname #i8*, __msgid #i8*, __category #i32) #i8*;

pub foreign fn __dcgettext(__domainname #i8*, __msgid #i8*, __category #i32) #i8*;

pub foreign fn ngettext(__msgid1 #i8*, __msgid2 #i8*, __n #u64) #i8*;

pub foreign fn dngettext(__domainname #i8*, __msgid1 #i8*, __msgid2 #i8*, __n #u64) #i8*;

pub foreign fn dcngettext(__domainname #i8*, __msgid1 #i8*, __msgid2 #i8*, __n #u64, __category #i32) #i8*;

pub foreign fn textdomain(__domainname #i8*) #i8*;

pub foreign fn bindtextdomain(__domainname #i8*, __dirname #i8*) #i8*;

pub foreign fn bind_textdomain_codeset(__domainname #i8*, __codeset #i8*) #i8*;

pub foreign fn la_x86_64_gnu_pltenter(__sym #Elf64_Sym*, __ndx #u32, __refcook #u64*, __defcook #u64*, __regs #La_x86_64_regs*, __flags #u32*, __symname #i8*, __framesizep #i64*) #u64;

pub foreign fn la_x86_64_gnu_pltexit(__sym #Elf64_Sym*, __ndx #u32, __refcook #u64*, __defcook #u64*, __inregs #La_x86_64_regs*, __outregs #La_x86_64_retval*, __symname #i8*) #u32;

pub foreign fn la_x32_gnu_pltenter(__sym #Elf32_Sym*, __ndx #u32, __refcook #u64*, __defcook #u64*, __regs #La_x86_64_regs*, __flags #u32*, __symname #i8*, __framesizep #i64*) #u32;

pub foreign fn la_x32_gnu_pltexit(__sym #Elf32_Sym*, __ndx #u32, __refcook #u64*, __defcook #u64*, __inregs #La_x86_64_regs*, __outregs #La_x86_64_retval*, __symname #i8*) #u32;

pub foreign fn setlocale(__category #i32, __locale #i8*) #i8*;

pub foreign fn localeconv() #lconv*;

pub foreign fn newlocale(__category_mask #i32, __locale #i8*, __base #i32) #i32;

pub foreign fn duplocale(__dataset #i32) #i32;

pub foreign fn freelocale(__dataset #i32) #void;

pub foreign fn uselocale(__dataset #i32) #i32;

pub foreign fn malloc(__size #u64) #void*;

pub foreign fn calloc(__nmemb #u64, __size #u64) #void*;

pub foreign fn realloc(__ptr #void*, __size #u64) #void*;

pub foreign fn reallocarray(__ptr #void*, __nmemb #u64, __size #u64) #void*;

pub foreign fn free(__ptr #void*) #void;

pub foreign fn memalign(__alignment #u64, __size #u64) #void*;

pub foreign fn valloc(__size #u64) #void*;

pub foreign fn pvalloc(__size #u64) #void*;

pub foreign fn mallinfo() #mallinfo;

pub foreign fn mallinfo2() #mallinfo2;

pub foreign fn mallopt(__param #i32, __val #i32) #i32;

pub foreign fn malloc_trim(__pad #u64) #i32;

pub foreign fn malloc_usable_size(__ptr #void*) #u64;

pub foreign fn malloc_stats() #void;

pub foreign fn malloc_info(__options #i32, __fp #_IO_FILE*) #i32;

pub foreign fn __fpclassify(__value #f64) #i32;

pub foreign fn __signbit(__value #f64) #i32;

pub foreign fn __isinf(__value #f64) #i32;

pub foreign fn __finite(__value #f64) #i32;

pub foreign fn __isnan(__value #f64) #i32;

pub foreign fn __iseqsig(__x #f64, __y #f64) #i32;

pub foreign fn __issignaling(__value #f64) #i32;

pub foreign fn acos(__x #f64) #i32;

pub foreign fn __acos(__x #f64) #f64;

pub foreign fn asin(__x #f64) #i32;

pub foreign fn __asin(__x #f64) #f64;

pub foreign fn atan(__x #f64) #i32;

pub foreign fn __atan(__x #f64) #f64;

pub foreign fn atan2(__y #f64, __x #f64) #i32;

pub foreign fn __atan2(__y #f64, __x #f64) #f64;

pub foreign fn cos(__x #f64) #i32;

pub foreign fn __cos(__x #f64) #f64;

pub foreign fn sin(__x #f64) #i32;

pub foreign fn __sin(__x #f64) #f64;

pub foreign fn tan(__x #f64) #i32;

pub foreign fn __tan(__x #f64) #f64;

pub foreign fn cosh(__x #f64) #i32;

pub foreign fn __cosh(__x #f64) #f64;

pub foreign fn sinh(__x #f64) #i32;

pub foreign fn __sinh(__x #f64) #f64;

pub foreign fn tanh(__x #f64) #i32;

pub foreign fn __tanh(__x #f64) #f64;

pub foreign fn acosh(__x #f64) #i32;

pub foreign fn __acosh(__x #f64) #f64;

pub foreign fn asinh(__x #f64) #i32;

pub foreign fn __asinh(__x #f64) #f64;

pub foreign fn atanh(__x #f64) #i32;

pub foreign fn __atanh(__x #f64) #f64;

pub foreign fn exp(__x #f64) #i32;

pub foreign fn __exp(__x #f64) #f64;

pub foreign fn frexp(__x #f64, __exponent #i32*) #f64;

pub foreign fn __frexp(__x #f64, __exponent #i32*) #f64;

pub foreign fn ldexp(__x #f64, __exponent #i32) #f64;

pub foreign fn __ldexp(__x #f64, __exponent #i32) #f64;

pub foreign fn log(__x #f64) #i32;

pub foreign fn __log(__x #f64) #f64;

pub foreign fn log10(__x #f64) #i32;

pub foreign fn __log10(__x #f64) #f64;

pub foreign fn modf(__x #f64, __iptr #f64*) #f64;

pub foreign fn __modf(__x #f64, __iptr #f64*) #f64;

pub foreign fn expm1(__x #f64) #i32;

pub foreign fn __expm1(__x #f64) #f64;

pub foreign fn log1p(__x #f64) #i32;

pub foreign fn __log1p(__x #f64) #f64;

pub foreign fn logb(__x #f64) #f64;

pub foreign fn __logb(__x #f64) #f64;

pub foreign fn exp2(__x #f64) #i32;

pub foreign fn __exp2(__x #f64) #f64;

pub foreign fn log2(__x #f64) #i32;

pub foreign fn __log2(__x #f64) #f64;

pub foreign fn pow(__x #f64, __y #f64) #i32;

pub foreign fn __pow(__x #f64, __y #f64) #f64;

pub foreign fn sqrt(__x #f64) #f64;

pub foreign fn __sqrt(__x #f64) #f64;

pub foreign fn hypot(__x #f64, __y #f64) #i32;

pub foreign fn __hypot(__x #f64, __y #f64) #f64;

pub foreign fn cbrt(__x #f64) #i32;

pub foreign fn __cbrt(__x #f64) #f64;

pub foreign fn ceil(__x #f64) #f64;

pub foreign fn __ceil(__x #f64) #f64;

pub foreign fn fabs(__x #f64) #f64;

pub foreign fn __fabs(__x #f64) #f64;

pub foreign fn floor(__x #f64) #f64;

pub foreign fn __floor(__x #f64) #f64;

pub foreign fn fmod(__x #f64, __y #f64) #f64;

pub foreign fn __fmod(__x #f64, __y #f64) #f64;

pub foreign fn isinf(__value #f64) #i32;

pub foreign fn finite(__value #f64) #i32;

pub foreign fn drem(__x #f64, __y #f64) #f64;

pub foreign fn __drem(__x #f64, __y #f64) #f64;

pub foreign fn significand(__x #f64) #f64;

pub foreign fn __significand(__x #f64) #f64;

pub foreign fn copysign(__x #f64, __y #f64) #f64;

pub foreign fn __copysign(__x #f64, __y #f64) #f64;

pub foreign fn nan(__tagb #i8*) #f64;

pub foreign fn __nan(__tagb #i8*) #f64;

pub foreign fn isnan(__value #f64) #i32;

pub foreign fn j0(_ #f64) #f64;

pub foreign fn __j0(_ #f64) #f64;

pub foreign fn j1(_ #f64) #f64;

pub foreign fn __j1(_ #f64) #f64;

pub foreign fn jn(_ #i32, _ #f64) #f64;

pub foreign fn __jn(_ #i32, _ #f64) #f64;

pub foreign fn y0(_ #f64) #f64;

pub foreign fn __y0(_ #f64) #f64;

pub foreign fn y1(_ #f64) #f64;

pub foreign fn __y1(_ #f64) #f64;

pub foreign fn yn(_ #i32, _ #f64) #f64;

pub foreign fn __yn(_ #i32, _ #f64) #f64;

pub foreign fn erf(_ #f64) #i32;

pub foreign fn __erf(_ #f64) #f64;

pub foreign fn erfc(_ #f64) #i32;

pub foreign fn __erfc(_ #f64) #f64;

pub foreign fn lgamma(_ #f64) #f64;

pub foreign fn __lgamma(_ #f64) #f64;

pub foreign fn tgamma(_ #f64) #f64;

pub foreign fn __tgamma(_ #f64) #f64;

pub foreign fn gamma(_ #f64) #f64;

pub foreign fn __gamma(_ #f64) #f64;

pub foreign fn lgamma_r(_ #f64, __signgamp #i32*) #f64;

pub foreign fn __lgamma_r(_ #f64, __signgamp #i32*) #f64;

pub foreign fn rint(__x #f64) #f64;

pub foreign fn __rint(__x #f64) #f64;

pub foreign fn nextafter(__x #f64, __y #f64) #f64;

pub foreign fn __nextafter(__x #f64, __y #f64) #f64;

pub foreign fn nexttoward(__x #f64, __y #f64) #f64;

pub foreign fn __nexttoward(__x #f64, __y #f64) #f64;

pub foreign fn remainder(__x #f64, __y #f64) #f64;

pub foreign fn __remainder(__x #f64, __y #f64) #f64;

pub foreign fn scalbn(__x #f64, __n #i32) #f64;

pub foreign fn __scalbn(__x #f64, __n #i32) #f64;

pub foreign fn ilogb(__x #f64) #i32;

pub foreign fn __ilogb(__x #f64) #i32;

pub foreign fn scalbln(__x #f64, __n #i64) #f64;

pub foreign fn __scalbln(__x #f64, __n #i64) #f64;

pub foreign fn nearbyint(__x #f64) #f64;

pub foreign fn __nearbyint(__x #f64) #f64;

pub foreign fn round(__x #f64) #f64;

pub foreign fn __round(__x #f64) #f64;

pub foreign fn trunc(__x #f64) #f64;

pub foreign fn __trunc(__x #f64) #f64;

pub foreign fn remquo(__x #f64, __y #f64, __quo #i32*) #f64;

pub foreign fn __remquo(__x #f64, __y #f64, __quo #i32*) #f64;

pub foreign fn lrint(__x #f64) #i64;

pub foreign fn __lrint(__x #f64) #i64;

pub foreign fn llrint(__x #f64) #i64;

pub foreign fn __llrint(__x #f64) #i64;

pub foreign fn lround(__x #f64) #i64;

pub foreign fn __lround(__x #f64) #i64;

pub foreign fn llround(__x #f64) #i64;

pub foreign fn __llround(__x #f64) #i64;

pub foreign fn fdim(__x #f64, __y #f64) #f64;

pub foreign fn __fdim(__x #f64, __y #f64) #f64;

pub foreign fn fmax(__x #f64, __y #f64) #f64;

pub foreign fn __fmax(__x #f64, __y #f64) #f64;

pub foreign fn fmin(__x #f64, __y #f64) #f64;

pub foreign fn __fmin(__x #f64, __y #f64) #f64;

pub foreign fn fma(__x #f64, __y #f64, __z #f64) #f64;

pub foreign fn __fma(__x #f64, __y #f64, __z #f64) #f64;

pub foreign fn scalb(__x #f64, __n #f64) #f64;

pub foreign fn __scalb(__x #f64, __n #f64) #f64;

pub foreign fn mcheck(__abortfunc #(#mcheck_status) #void) #i32;

pub foreign fn mcheck_pedantic(__abortfunc #(#mcheck_status) #void) #i32;

pub foreign fn mcheck_check_all() #void;

pub foreign fn mprobe(__ptr #void*) #mcheck_status;

pub foreign fn mtrace() #void;

pub foreign fn muntrace() #void;

pub foreign fn setmntent(__file #i8*, __mode #i8*) #_IO_FILE*;

pub foreign fn getmntent(__stream #_IO_FILE*) #mntent*;

pub foreign fn getmntent_r(__stream #_IO_FILE*, __result #mntent*, __buffer #i8*, __bufsize #i32) #mntent*;

pub foreign fn addmntent(__stream #_IO_FILE*, __mnt #mntent*) #i32;

pub foreign fn endmntent(__stream #_IO_FILE*) #i32;

pub foreign fn hasmntopt(__mnt #mntent*, __opt #i8*) #i8*;

pub foreign fn strfmon(__s #i8*, __maxsize #u64, __format #i8*, ...) #i32;

pub foreign fn strfmon_l(__s #i8*, __maxsize #u64, __loc #i32, __format #i8*, ...) #i32;

pub foreign fn mq_open(__name #i8*, __oflag #i32, ...) #i32;

pub foreign fn mq_close(__mqdes #i32) #i32;

pub foreign fn mq_getattr(__mqdes #i32, __mqstat #mq_attr*) #i32;

pub foreign fn mq_setattr(__mqdes #i32, __mqstat #mq_attr*, __omqstat #mq_attr*) #i32;

pub foreign fn mq_unlink(__name #i8*) #i32;

pub foreign fn mq_notify(__mqdes #i32, __notification #sigevent*) #i32;

pub foreign fn mq_receive(__mqdes #i32, __msg_ptr #i8*, __msg_len #u64, __msg_prio #u32*) #i32;

pub foreign fn mq_send(__mqdes #i32, __msg_ptr #i8*, __msg_len #u64, __msg_prio #u32) #i32;

pub foreign fn mq_timedreceive(__mqdes #i32, __msg_ptr #i8*, __msg_len #u64, __msg_prio #u32*, __abs_timeout #timespec*) #i32;

pub foreign fn mq_timedsend(__mqdes #i32, __msg_ptr #i8*, __msg_len #u64, __msg_prio #u32, __abs_timeout #timespec*) #i32;

pub foreign fn ntohl(__netlong #u32) #u32;

pub foreign fn ntohs(__netshort #u16) #u16;

pub foreign fn htonl(__hostlong #u32) #u32;

pub foreign fn htons(__hostshort #u16) #u16;

pub foreign fn bindresvport(__sockfd #i32, __sock_in #sockaddr_in*) #i32;

pub foreign fn bindresvport6(__sockfd #i32, __sock_in #sockaddr_in6*) #i32;

pub foreign fn setrpcent(__stayopen #i32) #void;

pub foreign fn endrpcent() #void;

pub foreign fn getrpcbyname(__name #i8*) #rpcent*;

pub foreign fn getrpcbynumber(__number #i32) #rpcent*;

pub foreign fn getrpcent() #rpcent*;

pub foreign fn getrpcbyname_r(__name #i8*, __result_buf #rpcent*, __buffer #i8*, __buflen #u64, __result #rpcent**) #i32;

pub foreign fn getrpcbynumber_r(__number #i32, __result_buf #rpcent*, __buffer #i8*, __buflen #u64, __result #rpcent**) #i32;

pub foreign fn getrpcent_r(__result_buf #rpcent*, __buffer #i8*, __buflen #u64, __result #rpcent**) #i32;

pub foreign fn __h_errno_location() #i32*;

pub foreign fn herror(__str #i8*) #void;

pub foreign fn hstrerror(__err_num #i32) #i8*;

pub foreign fn sethostent(__stay_open #i32) #void;

pub foreign fn endhostent() #void;

pub foreign fn gethostent() #hostent*;

pub foreign fn gethostbyaddr(__addr #void*, __len #u32, __type #i32) #hostent*;

pub foreign fn gethostbyname(__name #i8*) #hostent*;

pub foreign fn gethostbyname2(__name #i8*, __af #i32) #hostent*;

pub foreign fn gethostent_r(__result_buf #hostent*, __buf #i8*, __buflen #u64, __result #hostent**, __h_errnop #i32*) #i32;

pub foreign fn gethostbyaddr_r(__addr #void*, __len #u32, __type #i32, __result_buf #hostent*, __buf #i8*, __buflen #u64, __result #hostent**, __h_errnop #i32*) #i32;

pub foreign fn gethostbyname_r(__name #i8*, __result_buf #hostent*, __buf #i8*, __buflen #u64, __result #hostent**, __h_errnop #i32*) #i32;

pub foreign fn gethostbyname2_r(__name #i8*, __af #i32, __result_buf #hostent*, __buf #i8*, __buflen #u64, __result #hostent**, __h_errnop #i32*) #i32;

pub foreign fn setnetent(__stay_open #i32) #void;

pub foreign fn endnetent() #void;

pub foreign fn getnetent() #netent*;

pub foreign fn getnetbyaddr(__net #u32, __type #i32) #netent*;

pub foreign fn getnetbyname(__name #i8*) #netent*;

pub foreign fn getnetent_r(__result_buf #netent*, __buf #i8*, __buflen #u64, __result #netent**, __h_errnop #i32*) #i32;

pub foreign fn getnetbyaddr_r(__net #u32, __type #i32, __result_buf #netent*, __buf #i8*, __buflen #u64, __result #netent**, __h_errnop #i32*) #i32;

pub foreign fn getnetbyname_r(__name #i8*, __result_buf #netent*, __buf #i8*, __buflen #u64, __result #netent**, __h_errnop #i32*) #i32;

pub foreign fn setservent(__stay_open #i32) #void;

pub foreign fn endservent() #void;

pub foreign fn getservent() #servent*;

pub foreign fn getservbyname(__name #i8*, __proto #i8*) #servent*;

pub foreign fn getservbyport(__port #i32, __proto #i8*) #servent*;

pub foreign fn getservent_r(__result_buf #servent*, __buf #i8*, __buflen #u64, __result #servent**) #i32;

pub foreign fn getservbyname_r(__name #i8*, __proto #i8*, __result_buf #servent*, __buf #i8*, __buflen #u64, __result #servent**) #i32;

pub foreign fn getservbyport_r(__port #i32, __proto #i8*, __result_buf #servent*, __buf #i8*, __buflen #u64, __result #servent**) #i32;

pub foreign fn setprotoent(__stay_open #i32) #void;

pub foreign fn endprotoent() #void;

pub foreign fn getprotoent() #protoent*;

pub foreign fn getprotobyname(__name #i8*) #protoent*;

pub foreign fn getprotobynumber(__proto #i32) #protoent*;

pub foreign fn getprotoent_r(__result_buf #protoent*, __buf #i8*, __buflen #u64, __result #protoent**) #i32;

pub foreign fn getprotobyname_r(__name #i8*, __result_buf #protoent*, __buf #i8*, __buflen #u64, __result #protoent**) #i32;

pub foreign fn getprotobynumber_r(__proto #i32, __result_buf #protoent*, __buf #i8*, __buflen #u64, __result #protoent**) #i32;

pub foreign fn setnetgrent(__netgroup #i8*) #i32;

pub foreign fn endnetgrent() #void;

pub foreign fn getnetgrent(__hostp #i8**, __userp #i8**, __domainp #i8**) #i32;

pub foreign fn innetgr(__netgroup #i8*, __host #i8*, __user #i8*, __domain #i8*) #i32;

pub foreign fn getnetgrent_r(__hostp #i8**, __userp #i8**, __domainp #i8**, __buffer #i8*, __buflen #u64) #i32;

pub foreign fn rcmd(__ahost #i8**, __rport #u16, __locuser #i8*, __remuser #i8*, __cmd #i8*, __fd2p #i32*) #i32;

pub foreign fn rcmd_af(__ahost #i8**, __rport #u16, __locuser #i8*, __remuser #i8*, __cmd #i8*, __fd2p #i32*, __af #i32) #i32;

pub foreign fn rexec(__ahost #i8**, __rport #i32, __name #i8*, __pass #i8*, __cmd #i8*, __fd2p #i32*) #i32;

pub foreign fn rexec_af(__ahost #i8**, __rport #i32, __name #i8*, __pass #i8*, __cmd #i8*, __fd2p #i32*, __af #i32) #i32;

pub foreign fn ruserok(__rhost #i8*, __suser #i32, __remuser #i8*, __locuser #i8*) #i32;

pub foreign fn ruserok_af(__rhost #i8*, __suser #i32, __remuser #i8*, __locuser #i8*, __af #i32) #i32;

pub foreign fn iruserok(__raddr #u32, __suser #i32, __remuser #i8*, __locuser #i8*) #i32;

pub foreign fn iruserok_af(__raddr #void*, __suser #i32, __remuser #i8*, __locuser #i8*, __af #i32) #i32;

pub foreign fn rresvport(__alport #i32*) #i32;

pub foreign fn rresvport_af(__alport #i32*, __af #i32) #i32;

pub foreign fn getaddrinfo(__name #i8*, __service #i8*, __req #addrinfo*, __pai #addrinfo**) #i32;

pub foreign fn freeaddrinfo(__ai #addrinfo*) #void;

pub foreign fn gai_strerror(__ecode #i32) #i8*;

pub foreign fn getnameinfo(__sa #sockaddr*, __salen #i32, __host #i8*, __hostlen #i32, __serv #i8*, __servlen #i32, __flags #i32) #i32;

pub foreign fn __nss_configure_lookup(__dbname #i8*, __string #i8*) #i32;

pub foreign fn _obstack_newchunk(_ #obstack*, _ #i32) #void;

pub foreign fn _obstack_begin(_ #obstack*, _ #i32, _ #i32, _ #(#i64) #void*, _ #(#void*) #void) #i32;

pub foreign fn _obstack_begin_1(_ #obstack*, _ #i32, _ #i32, _ #(#void*, #i64) #void*, _ #(#void*, #void*) #void, _ #void*) #i32;

pub foreign fn _obstack_memory_used(_ #obstack*) #i32;

pub foreign fn obstack_free(_ #obstack*, _ #void*) #void;

pub foreign fn poll(__fds #pollfd*, __nfds #u64, __timeout #i32) #i32;

pub foreign fn register_printf_specifier(__spec #i32, __func #(#_IO_FILE*, #printf_info*, #void**) #i32, __arginfo #(#printf_info*, #u64, #i32*, #i32*) #i32) #i32;

pub foreign fn register_printf_function(__spec #i32, __func #(#_IO_FILE*, #printf_info*, #void**) #i32, __arginfo #(#printf_info*, #u64, #i32*) #i32) #i32;

pub foreign fn register_printf_modifier(__str #i32*) #i32;

pub foreign fn register_printf_type(__fct #(#void*, #i32*) #void) #i32;

pub foreign fn parse_printf_format(__fmt #i8*, __n #u64, __argtypes #i32*) #u64;

pub foreign fn printf_size(__fp #_IO_FILE*, __info #printf_info*, __args #void**) #i32;

pub foreign fn printf_size_info(__info #printf_info*, __n #u64, __argtypes #i32*) #i32;

pub foreign fn ps_pdread(_ #ps_prochandle*, _ #void*, _ #void*, _ #u64) #ps_err_e;

pub foreign fn ps_pdwrite(_ #ps_prochandle*, _ #void*, _ #void*, _ #u64) #ps_err_e;

pub foreign fn ps_ptread(_ #ps_prochandle*, _ #void*, _ #void*, _ #u64) #ps_err_e;

pub foreign fn ps_ptwrite(_ #ps_prochandle*, _ #void*, _ #void*, _ #u64) #ps_err_e;

pub foreign fn ps_lgetregs(_ #ps_prochandle*, _ #i32, _ #i32) #ps_err_e;

pub foreign fn ps_lsetregs(_ #ps_prochandle*, _ #i32, _ #i32) #ps_err_e;

pub foreign fn ps_lgetfpregs(_ #ps_prochandle*, _ #i32, _ #i32*) #ps_err_e;

pub foreign fn ps_lsetfpregs(_ #ps_prochandle*, _ #i32, _ #i32*) #ps_err_e;

pub foreign fn ps_getpid(_ #ps_prochandle*) #i32;

pub foreign fn ps_get_thread_area(_ #ps_prochandle*, _ #i32, _ #i32, _ #void**) #ps_err_e;

pub foreign fn ps_pglobal_lookup(_ #ps_prochandle*, object_name #i8*, sym_name #i8*, sym_addr #void**) #ps_err_e;

pub foreign fn ps_pstop(_ #ps_prochandle*) #ps_err_e;

pub foreign fn ps_pcontinue(_ #ps_prochandle*) #ps_err_e;

pub foreign fn ps_lstop(_ #ps_prochandle*, _ #i32) #ps_err_e;

pub foreign fn ps_lcontinue(_ #ps_prochandle*, _ #i32) #ps_err_e;

pub foreign fn __sched_cpucount(__setsize #u64, __setp #cpu_set_t*) #i32;

pub foreign fn __sched_cpualloc(__count #u64) #cpu_set_t*;

pub foreign fn __sched_cpufree(__set #cpu_set_t*) #void;

pub foreign fn sched_setparam(__pid #i32, __param #sched_param*) #i32;

pub foreign fn sched_getparam(__pid #i32, __param #sched_param*) #i32;

pub foreign fn sched_setscheduler(__pid #i32, __policy #i32, __param #sched_param*) #i32;

pub foreign fn sched_getscheduler(__pid #i32) #i32;

pub foreign fn sched_yield() #i32;

pub foreign fn sched_get_priority_max(__algorithm #i32) #i32;

pub foreign fn sched_get_priority_min(__algorithm #i32) #i32;

pub foreign fn sched_rr_get_interval(__pid #i32, __t #timespec*) #i32;

pub foreign fn clock() #i32;

pub foreign fn time(__timer #i32*) #i32;

pub foreign fn difftime(__time1 #i32, __time0 #i32) #f64;

pub foreign fn mktime(__tp #tm*) #i32;

pub foreign fn strftime(__s #i8*, __maxsize #u64, __format #i8*, __tp #tm*) #u64;

pub foreign fn strftime_l(__s #i8*, __maxsize #u64, __format #i8*, __tp #tm*, __loc #i32) #u64;

pub foreign fn gmtime(__timer #i32*) #tm*;

pub foreign fn localtime(__timer #i32*) #tm*;

pub foreign fn gmtime_r(__timer #i32*, __tp #tm*) #tm*;

pub foreign fn localtime_r(__timer #i32*, __tp #tm*) #tm*;

pub foreign fn asctime(__tp #tm*) #i8*;

pub foreign fn ctime(__timer #i32*) #i8*;

pub foreign fn asctime_r(__tp #tm*, __buf #i8*) #i8*;

pub foreign fn ctime_r(__timer #i32*, __buf #i8*) #i8*;

pub foreign fn tzset() #void;

pub foreign fn timegm(__tp #tm*) #i32;

pub foreign fn timelocal(__tp #tm*) #i32;

pub foreign fn dysize(__year #i32) #i32;

pub foreign fn nanosleep(__requested_time #timespec*, __remaining #timespec*) #i32;

pub foreign fn clock_getres(__clock_id #i32, __res #timespec*) #i32;

pub foreign fn clock_gettime(__clock_id #i32, __tp #timespec*) #i32;

pub foreign fn clock_settime(__clock_id #i32, __tp #timespec*) #i32;

pub foreign fn clock_nanosleep(__clock_id #i32, __flags #i32, __req #timespec*, __rem #timespec*) #i32;

pub foreign fn clock_getcpuclockid(__pid #i32, __clock_id #i32*) #i32;

pub foreign fn timer_create(__clock_id #i32, __evp #sigevent*, __timerid #i32*) #i32;

pub foreign fn timer_delete(__timerid #i32) #i32;

pub foreign fn timer_settime(__timerid #i32, __flags #i32, __value #itimerspec*, __ovalue #itimerspec*) #i32;

pub foreign fn timer_gettime(__timerid #i32, __value #itimerspec*) #i32;

pub foreign fn timer_getoverrun(__timerid #i32) #i32;

pub foreign fn timespec_get(__ts #timespec*, __base #i32) #i32;

pub foreign fn pthread_create(__newthread #u64*, __attr #pthread_attr_t*, __start_routine #(#void*) #void*, __arg #void*) #i32;

pub foreign fn pthread_exit(__retval #void*) #void;

pub foreign fn pthread_join(__th #u64, __thread_return #void**) #i32;

pub foreign fn pthread_detach(__th #u64) #i32;

pub foreign fn pthread_self() #u64;

pub foreign fn pthread_equal(__thread1 #u64, __thread2 #u64) #i32;

pub foreign fn pthread_attr_init(__attr #pthread_attr_t*) #i32;

pub foreign fn pthread_attr_destroy(__attr #pthread_attr_t*) #i32;

pub foreign fn pthread_attr_getdetachstate(__attr #pthread_attr_t*, __detachstate #i32*) #i32;

pub foreign fn pthread_attr_setdetachstate(__attr #pthread_attr_t*, __detachstate #i32) #i32;

pub foreign fn pthread_attr_getguardsize(__attr #pthread_attr_t*, __guardsize #u64*) #i32;

pub foreign fn pthread_attr_setguardsize(__attr #pthread_attr_t*, __guardsize #u64) #i32;

pub foreign fn pthread_attr_getschedparam(__attr #pthread_attr_t*, __param #sched_param*) #i32;

pub foreign fn pthread_attr_setschedparam(__attr #pthread_attr_t*, __param #sched_param*) #i32;

pub foreign fn pthread_attr_getschedpolicy(__attr #pthread_attr_t*, __policy #i32*) #i32;

pub foreign fn pthread_attr_setschedpolicy(__attr #pthread_attr_t*, __policy #i32) #i32;

pub foreign fn pthread_attr_getinheritsched(__attr #pthread_attr_t*, __inherit #i32*) #i32;

pub foreign fn pthread_attr_setinheritsched(__attr #pthread_attr_t*, __inherit #i32) #i32;

pub foreign fn pthread_attr_getscope(__attr #pthread_attr_t*, __scope #i32*) #i32;

pub foreign fn pthread_attr_setscope(__attr #pthread_attr_t*, __scope #i32) #i32;

pub foreign fn pthread_attr_getstackaddr(__attr #pthread_attr_t*, __stackaddr #void**) #i32;

pub foreign fn pthread_attr_setstackaddr(__attr #pthread_attr_t*, __stackaddr #void*) #i32;

pub foreign fn pthread_attr_getstacksize(__attr #pthread_attr_t*, __stacksize #u64*) #i32;

pub foreign fn pthread_attr_setstacksize(__attr #pthread_attr_t*, __stacksize #u64) #i32;

pub foreign fn pthread_attr_getstack(__attr #pthread_attr_t*, __stackaddr #void**, __stacksize #u64*) #i32;

pub foreign fn pthread_attr_setstack(__attr #pthread_attr_t*, __stackaddr #void*, __stacksize #u64) #i32;

pub foreign fn pthread_setschedparam(__target_thread #u64, __policy #i32, __param #sched_param*) #i32;

pub foreign fn pthread_getschedparam(__target_thread #u64, __policy #i32*, __param #sched_param*) #i32;

pub foreign fn pthread_setschedprio(__target_thread #u64, __prio #i32) #i32;

pub foreign fn pthread_once(__once_control #i32*, __init_routine #() #void) #i32;

pub foreign fn pthread_setcancelstate(__state #i32, __oldstate #i32*) #i32;

pub foreign fn pthread_setcanceltype(__type #i32, __oldtype #i32*) #i32;

pub foreign fn pthread_cancel(__th #u64) #i32;

pub foreign fn pthread_testcancel() #void;

pub foreign fn __pthread_register_cancel(__buf #__pthread_unwind_buf_t*) #void;

pub foreign fn __pthread_unregister_cancel(__buf #__pthread_unwind_buf_t*) #void;

pub foreign fn __pthread_unwind_next(__buf #__pthread_unwind_buf_t*) #void;

pub foreign fn __sigsetjmp(__env #[#__jmp_buf_tag; 1], __savemask #i32) #i32;

pub foreign fn pthread_mutex_init(__mutex #anon_pthreadtypes_67_9*, __mutexattr #anon_pthreadtypes_32_9*) #i32;

pub foreign fn pthread_mutex_destroy(__mutex #anon_pthreadtypes_67_9*) #i32;

pub foreign fn pthread_mutex_trylock(__mutex #anon_pthreadtypes_67_9*) #i32;

pub foreign fn pthread_mutex_lock(__mutex #anon_pthreadtypes_67_9*) #i32;

pub foreign fn pthread_mutex_timedlock(__mutex #anon_pthreadtypes_67_9*, __abstime #timespec*) #i32;

pub foreign fn pthread_mutex_unlock(__mutex #anon_pthreadtypes_67_9*) #i32;

pub foreign fn pthread_mutex_getprioceiling(__mutex #anon_pthreadtypes_67_9*, __prioceiling #i32*) #i32;

pub foreign fn pthread_mutex_setprioceiling(__mutex #anon_pthreadtypes_67_9*, __prioceiling #i32, __old_ceiling #i32*) #i32;

pub foreign fn pthread_mutex_consistent(__mutex #anon_pthreadtypes_67_9*) #i32;

pub foreign fn pthread_mutexattr_init(__attr #anon_pthreadtypes_32_9*) #i32;

pub foreign fn pthread_mutexattr_destroy(__attr #anon_pthreadtypes_32_9*) #i32;

pub foreign fn pthread_mutexattr_getpshared(__attr #anon_pthreadtypes_32_9*, __pshared #i32*) #i32;

pub foreign fn pthread_mutexattr_setpshared(__attr #anon_pthreadtypes_32_9*, __pshared #i32) #i32;

pub foreign fn pthread_mutexattr_gettype(__attr #anon_pthreadtypes_32_9*, __kind #i32*) #i32;

pub foreign fn pthread_mutexattr_settype(__attr #anon_pthreadtypes_32_9*, __kind #i32) #i32;

pub foreign fn pthread_mutexattr_getprotocol(__attr #anon_pthreadtypes_32_9*, __protocol #i32*) #i32;

pub foreign fn pthread_mutexattr_setprotocol(__attr #anon_pthreadtypes_32_9*, __protocol #i32) #i32;

pub foreign fn pthread_mutexattr_getprioceiling(__attr #anon_pthreadtypes_32_9*, __prioceiling #i32*) #i32;

pub foreign fn pthread_mutexattr_setprioceiling(__attr #anon_pthreadtypes_32_9*, __prioceiling #i32) #i32;

pub foreign fn pthread_mutexattr_getrobust(__attr #anon_pthreadtypes_32_9*, __robustness #i32*) #i32;

pub foreign fn pthread_mutexattr_setrobust(__attr #anon_pthreadtypes_32_9*, __robustness #i32) #i32;

pub foreign fn pthread_rwlock_init(__rwlock #anon_pthreadtypes_86_9*, __attr #anon_pthreadtypes_93_9*) #i32;

pub foreign fn pthread_rwlock_destroy(__rwlock #anon_pthreadtypes_86_9*) #i32;

pub foreign fn pthread_rwlock_rdlock(__rwlock #anon_pthreadtypes_86_9*) #i32;

pub foreign fn pthread_rwlock_tryrdlock(__rwlock #anon_pthreadtypes_86_9*) #i32;

pub foreign fn pthread_rwlock_timedrdlock(__rwlock #anon_pthreadtypes_86_9*, __abstime #timespec*) #i32;

pub foreign fn pthread_rwlock_wrlock(__rwlock #anon_pthreadtypes_86_9*) #i32;

pub foreign fn pthread_rwlock_trywrlock(__rwlock #anon_pthreadtypes_86_9*) #i32;

pub foreign fn pthread_rwlock_timedwrlock(__rwlock #anon_pthreadtypes_86_9*, __abstime #timespec*) #i32;

pub foreign fn pthread_rwlock_unlock(__rwlock #anon_pthreadtypes_86_9*) #i32;

pub foreign fn pthread_rwlockattr_init(__attr #anon_pthreadtypes_93_9*) #i32;

pub foreign fn pthread_rwlockattr_destroy(__attr #anon_pthreadtypes_93_9*) #i32;

pub foreign fn pthread_rwlockattr_getpshared(__attr #anon_pthreadtypes_93_9*, __pshared #i32*) #i32;

pub foreign fn pthread_rwlockattr_setpshared(__attr #anon_pthreadtypes_93_9*, __pshared #i32) #i32;

pub foreign fn pthread_rwlockattr_getkind_np(__attr #anon_pthreadtypes_93_9*, __pref #i32*) #i32;

pub foreign fn pthread_rwlockattr_setkind_np(__attr #anon_pthreadtypes_93_9*, __pref #i32) #i32;

pub foreign fn pthread_cond_init(__cond #anon_pthreadtypes_75_9*, __cond_attr #anon_pthreadtypes_41_9*) #i32;

pub foreign fn pthread_cond_destroy(__cond #anon_pthreadtypes_75_9*) #i32;

pub foreign fn pthread_cond_signal(__cond #anon_pthreadtypes_75_9*) #i32;

pub foreign fn pthread_cond_broadcast(__cond #anon_pthreadtypes_75_9*) #i32;

pub foreign fn pthread_cond_wait(__cond #anon_pthreadtypes_75_9*, __mutex #anon_pthreadtypes_67_9*) #i32;

pub foreign fn pthread_cond_timedwait(__cond #anon_pthreadtypes_75_9*, __mutex #anon_pthreadtypes_67_9*, __abstime #timespec*) #i32;

pub foreign fn pthread_condattr_init(__attr #anon_pthreadtypes_41_9*) #i32;

pub foreign fn pthread_condattr_destroy(__attr #anon_pthreadtypes_41_9*) #i32;

pub foreign fn pthread_condattr_getpshared(__attr #anon_pthreadtypes_41_9*, __pshared #i32*) #i32;

pub foreign fn pthread_condattr_setpshared(__attr #anon_pthreadtypes_41_9*, __pshared #i32) #i32;

pub foreign fn pthread_condattr_getclock(__attr #anon_pthreadtypes_41_9*, __clock_id #i32*) #i32;

pub foreign fn pthread_condattr_setclock(__attr #anon_pthreadtypes_41_9*, __clock_id #i32) #i32;

pub foreign fn pthread_spin_init(__lock #i32*, __pshared #i32) #i32;

pub foreign fn pthread_spin_destroy(__lock #i32*) #i32;

pub foreign fn pthread_spin_lock(__lock #i32*) #i32;

pub foreign fn pthread_spin_trylock(__lock #i32*) #i32;

pub foreign fn pthread_spin_unlock(__lock #i32*) #i32;

pub foreign fn pthread_barrier_init(__barrier #anon_pthreadtypes_108_9*, __attr #anon_pthreadtypes_114_9*, __count #u32) #i32;

pub foreign fn pthread_barrier_destroy(__barrier #anon_pthreadtypes_108_9*) #i32;

pub foreign fn pthread_barrier_wait(__barrier #anon_pthreadtypes_108_9*) #i32;

pub foreign fn pthread_barrierattr_init(__attr #anon_pthreadtypes_114_9*) #i32;

pub foreign fn pthread_barrierattr_destroy(__attr #anon_pthreadtypes_114_9*) #i32;

pub foreign fn pthread_barrierattr_getpshared(__attr #anon_pthreadtypes_114_9*, __pshared #i32*) #i32;

pub foreign fn pthread_barrierattr_setpshared(__attr #anon_pthreadtypes_114_9*, __pshared #i32) #i32;

pub foreign fn pthread_key_create(__key #u32*, __destr_function #(#void*) #void) #i32;

pub foreign fn pthread_key_delete(__key #u32) #i32;

pub foreign fn pthread_getspecific(__key #u32) #void*;

pub foreign fn pthread_setspecific(__key #u32, __pointer #void*) #i32;

pub foreign fn pthread_getcpuclockid(__thread_id #u64, __clock_id #i32*) #i32;

pub foreign fn pthread_atfork(__prepare #() #void, __parent #() #void, __child #() #void) #i32;

pub foreign fn cfgetospeed(__termios_p #termios*) #u32;

pub foreign fn cfgetispeed(__termios_p #termios*) #u32;

pub foreign fn cfsetospeed(__termios_p #termios*, __speed #u32) #i32;

pub foreign fn cfsetispeed(__termios_p #termios*, __speed #u32) #i32;

pub foreign fn cfsetspeed(__termios_p #termios*, __speed #u32) #i32;

pub foreign fn tcgetattr(__fd #i32, __termios_p #termios*) #i32;

pub foreign fn tcsetattr(__fd #i32, __optional_actions #i32, __termios_p #termios*) #i32;

pub foreign fn cfmakeraw(__termios_p #termios*) #void;

pub foreign fn tcsendbreak(__fd #i32, __duration #i32) #i32;

pub foreign fn tcdrain(__fd #i32) #i32;

pub foreign fn tcflush(__fd #i32, __queue_selector #i32) #i32;

pub foreign fn tcflow(__fd #i32, __action #i32) #i32;

pub foreign fn tcgetsid(__fd #i32) #i32;

pub foreign fn ioctl(__fd #i32, __request #u64, ...) #i32;

pub foreign fn openpty(__amaster #i32*, __aslave #i32*, __name #i8*, __termp #termios*, __winp #winsize*) #i32;

pub foreign fn forkpty(__amaster #i32*, __name #i8*, __termp #termios*, __winp #winsize*) #i32;

pub foreign fn setpwent() #void;

pub foreign fn endpwent() #void;

pub foreign fn getpwent() #passwd*;

pub foreign fn fgetpwent(__stream #_IO_FILE*) #passwd*;

pub foreign fn putpwent(__p #passwd*, __f #_IO_FILE*) #i32;

pub foreign fn getpwuid(__uid #i32) #passwd*;

pub foreign fn getpwnam(__name #i8*) #passwd*;

pub foreign fn getpwent_r(__resultbuf #passwd*, __buffer #i8*, __buflen #u64, __result #passwd**) #i32;

pub foreign fn getpwuid_r(__uid #i32, __resultbuf #passwd*, __buffer #i8*, __buflen #u64, __result #passwd**) #i32;

pub foreign fn getpwnam_r(__name #i8*, __resultbuf #passwd*, __buffer #i8*, __buflen #u64, __result #passwd**) #i32;

pub foreign fn fgetpwent_r(__stream #_IO_FILE*, __resultbuf #passwd*, __buffer #i8*, __buflen #u64, __result #passwd**) #i32;

pub foreign fn regcomp(__preg #re_pattern_buffer*, __pattern #i8*, __cflags #i32) #i32;

pub foreign fn regexec(__preg #re_pattern_buffer*, __String #i8*, __nmatch #u64, __pmatch #regmatch_t*, __eflags #i32) #i32;

pub foreign fn regerror(__errcode #i32, __preg #re_pattern_buffer*, __errbuf #i8*, __errbuf_size #u64) #u64;

pub foreign fn regfree(__preg #re_pattern_buffer*) #void;

pub foreign fn ns_msg_getflag(_ #__ns_msg, _ #i32) #i32;

pub foreign fn ns_get16(_ #u8*) #u32;

pub foreign fn ns_get32(_ #u8*) #u64;

pub foreign fn ns_put16(_ #u32, _ #u8*) #void;

pub foreign fn ns_put32(_ #u64, _ #u8*) #void;

pub foreign fn ns_initparse(_ #u8*, _ #i32, _ #__ns_msg*) #i32;

pub foreign fn ns_skiprr(_ #u8*, _ #u8*, _ #__ns_sect, _ #i32) #i32;

pub foreign fn ns_parserr(_ #__ns_msg*, _ #__ns_sect, _ #i32, _ #__ns_rr*) #i32;

pub foreign fn ns_sprintrr(_ #__ns_msg*, _ #__ns_rr*, _ #i8*, _ #i8*, _ #i8*, _ #u64) #i32;

pub foreign fn ns_sprintrrf(_ #u8*, _ #u64, _ #i8*, _ #__ns_class, _ #__ns_type, _ #u64, _ #u8*, _ #u64, _ #i8*, _ #i8*, _ #i8*, _ #u64) #i32;

pub foreign fn ns_format_ttl(_ #u64, _ #i8*, _ #u64) #i32;

pub foreign fn ns_parse_ttl(_ #i8*, _ #u64*) #i32;

pub foreign fn ns_datetosecs(_ #i8*, _ #i32*) #u32;

pub foreign fn ns_name_ntol(_ #u8*, _ #u8*, _ #u64) #i32;

pub foreign fn ns_name_ntop(_ #u8*, _ #i8*, _ #u64) #i32;

pub foreign fn ns_name_pton(_ #i8*, _ #u8*, _ #u64) #i32;

pub foreign fn ns_name_unpack(_ #u8*, _ #u8*, _ #u8*, _ #u8*, _ #u64) #i32;

pub foreign fn ns_name_pack(_ #u8*, _ #u8*, _ #i32, _ #u8**, _ #u8**) #i32;

pub foreign fn ns_name_uncompress(_ #u8*, _ #u8*, _ #u8*, _ #i8*, _ #u64) #i32;

pub foreign fn ns_name_compress(_ #i8*, _ #u8*, _ #u64, _ #u8**, _ #u8**) #i32;

pub foreign fn ns_name_skip(_ #u8**, _ #u8*) #i32;

pub foreign fn ns_name_rollback(_ #u8*, _ #u8**, _ #u8**) #void;

pub foreign fn ns_samedomain(_ #i8*, _ #i8*) #i32;

pub foreign fn ns_subdomain(_ #i8*, _ #i8*) #i32;

pub foreign fn ns_makecanon(_ #i8*, _ #i8*, _ #u64) #i32;

pub foreign fn ns_samename(_ #i8*, _ #i8*) #i32;

pub foreign fn __res_state() #__res_state*;

pub foreign fn __fp_nquery(_ #u8*, _ #i32, _ #_IO_FILE*) #void;

pub foreign fn __fp_query(_ #u8*, _ #_IO_FILE*) #void;

pub foreign fn __hostalias(_ #i8*) #i8*;

pub foreign fn __p_query(_ #u8*) #void;

pub foreign fn __res_close() #void;

pub foreign fn __res_init() #i32;

pub foreign fn __res_isourserver(_ #sockaddr_in*) #i32;

pub foreign fn res_mkquery(_ #i32, _ #i8*, _ #i32, _ #i32, _ #u8*, _ #i32, _ #u8*, _ #u8*, _ #i32) #i32;

pub foreign fn res_query(_ #i8*, _ #i32, _ #i32, _ #u8*, _ #i32) #i32;

pub foreign fn res_querydomain(_ #i8*, _ #i8*, _ #i32, _ #i32, _ #u8*, _ #i32) #i32;

pub foreign fn res_search(_ #i8*, _ #i32, _ #i32, _ #u8*, _ #i32) #i32;

pub foreign fn res_send(_ #u8*, _ #i32, _ #u8*, _ #i32) #i32;

pub foreign fn res_hnok(_ #i8*) #i32;

pub foreign fn res_ownok(_ #i8*) #i32;

pub foreign fn res_mailok(_ #i8*) #i32;

pub foreign fn res_dnok(_ #i8*) #i32;

pub foreign fn __sym_ston(_ #res_sym*, _ #i8*, _ #i32*) #i32;

pub foreign fn __sym_ntos(_ #res_sym*, _ #i32, _ #i32*) #i8*;

pub foreign fn __sym_ntop(_ #res_sym*, _ #i32, _ #i32*) #i8*;

pub foreign fn __b64_ntop(_ #u8*, _ #u64, _ #i8*, _ #u64) #i32;

pub foreign fn __b64_pton(_ #i8*, _ #u8*, _ #u64) #i32;

pub foreign fn __loc_aton(__ascii #i8*, __binary #u8*) #i32;

pub foreign fn __loc_ntoa(__binary #u8*, __ascii #i8*) #i8*;

pub foreign fn dn_skipname(_ #u8*, _ #u8*) #i32;

pub foreign fn __putlong(_ #u32, _ #u8*) #void;

pub foreign fn __putshort(_ #u16, _ #u8*) #void;

pub foreign fn __p_class(_ #i32) #i8*;

pub foreign fn __p_time(_ #u32) #i8*;

pub foreign fn __p_type(_ #i32) #i8*;

pub foreign fn __p_rcode(_ #i32) #i8*;

pub foreign fn __p_cdnname(_ #u8*, _ #u8*, _ #i32, _ #_IO_FILE*) #u8*;

pub foreign fn __p_cdname(_ #u8*, _ #u8*, _ #_IO_FILE*) #u8*;

pub foreign fn __p_fqnname(__cp #u8*, __msg #u8*, _ #i32, _ #i8*, _ #i32) #u8*;

pub foreign fn __p_fqname(_ #u8*, _ #u8*, _ #_IO_FILE*) #u8*;

pub foreign fn __p_option(__option #u64) #i8*;

pub foreign fn __dn_count_labels(_ #i8*) #i32;

pub foreign fn dn_comp(_ #i8*, _ #u8*, _ #i32, _ #u8**, _ #u8**) #i32;

pub foreign fn dn_expand(_ #u8*, _ #u8*, _ #u8*, _ #i8*, _ #i32) #i32;

pub foreign fn __res_randomid() #u32;

pub foreign fn __res_nameinquery(_ #i8*, _ #i32, _ #i32, _ #u8*, _ #u8*) #i32;

pub foreign fn __res_queriesmatch(_ #u8*, _ #u8*, _ #u8*, _ #u8*) #i32;

pub foreign fn __res_ninit(_ #__res_state*) #i32;

pub foreign fn __fp_resstat(_ #__res_state*, _ #_IO_FILE*) #void;

pub foreign fn __res_hostalias(_ #__res_state*, _ #i8*, _ #i8*, _ #u64) #i8*;

pub foreign fn res_nquery(_ #__res_state*, _ #i8*, _ #i32, _ #i32, _ #u8*, _ #i32) #i32;

pub foreign fn res_nsearch(_ #__res_state*, _ #i8*, _ #i32, _ #i32, _ #u8*, _ #i32) #i32;

pub foreign fn res_nquerydomain(_ #__res_state*, _ #i8*, _ #i8*, _ #i32, _ #i32, _ #u8*, _ #i32) #i32;

pub foreign fn res_nmkquery(_ #__res_state*, _ #i32, _ #i8*, _ #i32, _ #i32, _ #u8*, _ #i32, _ #u8*, _ #u8*, _ #i32) #i32;

pub foreign fn res_nsend(_ #__res_state*, _ #u8*, _ #i32, _ #u8*, _ #i32) #i32;

pub foreign fn __res_nclose(_ #__res_state*) #void;

pub foreign fn insque(__elem #void*, __prev #void*) #void;

pub foreign fn remque(__elem #void*) #void;

pub foreign fn hsearch(__item #entry, __action #ACTION) #entry*;

pub foreign fn hcreate(__nel #u64) #i32;

pub foreign fn hdestroy() #void;

pub foreign fn tsearch(__key #void*, __rootp #void**, __compar #(#void*, #void*) #i32) #void*;

pub foreign fn tfind(__key #void*, __rootp #void**, __compar #(#void*, #void*) #i32) #void*;

pub foreign fn tdelete(__key #void*, __rootp #void**, __compar #(#void*, #void*) #i32) #void*;

pub foreign fn twalk(__root #void*, __action #(#void*, #VISIT, #i32) #void) #void;

pub foreign fn lfind(__key #void*, __base #void*, __nmemb #u64*, __size #u64, __compar #(#void*, #void*) #i32) #void*;

pub foreign fn lsearch(__key #void*, __base #void*, __nmemb #u64*, __size #u64, __compar #(#void*, #void*) #i32) #void*;

pub foreign fn sem_init(__sem #sem_t*, __pshared #i32, __value #u32) #i32;

pub foreign fn sem_destroy(__sem #sem_t*) #i32;

pub foreign fn sem_open(__name #i8*, __oflag #i32, ...) #sem_t*;

pub foreign fn sem_close(__sem #sem_t*) #i32;

pub foreign fn sem_unlink(__name #i8*) #i32;

pub foreign fn sem_wait(__sem #sem_t*) #i32;

pub foreign fn sem_timedwait(__sem #sem_t*, __abstime #timespec*) #i32;

pub foreign fn sem_trywait(__sem #sem_t*) #i32;

pub foreign fn sem_post(__sem #sem_t*) #i32;

pub foreign fn sem_getvalue(__sem #sem_t*, __sval #i32*) #i32;

pub foreign fn setjmp(__env #[#__jmp_buf_tag; 1]) #i32;

pub foreign fn __sigsetjmp(__env #[#__jmp_buf_tag; 1], __savemask #i32) #i32;

pub foreign fn _setjmp(__env #[#__jmp_buf_tag; 1]) #i32;

pub foreign fn longjmp(__env #[#__jmp_buf_tag; 1], __val #i32) #void;

pub foreign fn _longjmp(__env #[#__jmp_buf_tag; 1], __val #i32) #void;

pub foreign fn siglongjmp(__env #[#__jmp_buf_tag; 1], __val #i32) #void;

pub foreign fn gtty(__fd #i32, __params #sgttyb*) #i32;

pub foreign fn stty(__fd #i32, __params #sgttyb*) #i32;

pub foreign fn setspent() #void;

pub foreign fn endspent() #void;

pub foreign fn getspent() #spwd*;

pub foreign fn getspnam(__name #i8*) #spwd*;

pub foreign fn sgetspent(__string #i8*) #spwd*;

pub foreign fn fgetspent(__stream #_IO_FILE*) #spwd*;

pub foreign fn putspent(__p #spwd*, __stream #_IO_FILE*) #i32;

pub foreign fn getspent_r(__result_buf #spwd*, __buffer #i8*, __buflen #u64, __result #spwd**) #i32;

pub foreign fn getspnam_r(__name #i8*, __result_buf #spwd*, __buffer #i8*, __buflen #u64, __result #spwd**) #i32;

pub foreign fn sgetspent_r(__string #i8*, __result_buf #spwd*, __buffer #i8*, __buflen #u64, __result #spwd**) #i32;

pub foreign fn fgetspent_r(__stream #_IO_FILE*, __result_buf #spwd*, __buffer #i8*, __buflen #u64, __result #spwd**) #i32;

pub foreign fn lckpwdf() #i32;

pub foreign fn ulckpwdf() #i32;

pub foreign fn __sysv_signal(__sig #i32, __handler #(#i32) #void) #(#i32) #void;

pub foreign fn signal(__sig #i32, __handler #(#i32) #void) #(#i32) #void;

pub foreign fn kill(__pid #i32, __sig #i32) #i32;

pub foreign fn killpg(__pgrp #i32, __sig #i32) #i32;

pub foreign fn raise(__sig #i32) #i32;

pub foreign fn ssignal(__sig #i32, __handler #(#i32) #void) #(#i32) #void;

pub foreign fn gsignal(__sig #i32) #i32;

pub foreign fn psignal(__sig #i32, __s #i8*) #void;

pub foreign fn psiginfo(__pinfo #anon_siginfo_t_36_9*, __s #i8*) #void;

pub foreign fn sigblock(__mask #i32) #i32;

pub foreign fn sigsetmask(__mask #i32) #i32;

pub foreign fn siggetmask() #i32;

pub foreign fn sigemptyset(__set #__sigset_t*) #i32;

pub foreign fn sigfillset(__set #__sigset_t*) #i32;

pub foreign fn sigaddset(__set #__sigset_t*, __signo #i32) #i32;

pub foreign fn sigdelset(__set #__sigset_t*, __signo #i32) #i32;

pub foreign fn sigismember(__set #__sigset_t*, __signo #i32) #i32;

pub foreign fn sigprocmask(__how #i32, __set #__sigset_t*, __oset #__sigset_t*) #i32;

pub foreign fn sigsuspend(__set #__sigset_t*) #i32;

pub foreign fn sigaction(__sig #i32, __act #sigaction*, __oact #sigaction*) #i32;

pub foreign fn sigpending(__set #__sigset_t*) #i32;

pub foreign fn sigwait(__set #__sigset_t*, __sig #i32*) #i32;

pub foreign fn sigwaitinfo(__set #__sigset_t*, __info #anon_siginfo_t_36_9*) #i32;

pub foreign fn sigtimedwait(__set #__sigset_t*, __info #anon_siginfo_t_36_9*, __timeout #timespec*) #i32;

pub foreign fn sigqueue(__pid #i32, __sig #i32, __val #sigval) #i32;

pub foreign fn sigreturn(__scp #sigcontext*) #i32;

pub foreign fn siginterrupt(__sig #i32, __interrupt #i32) #i32;

pub foreign fn sigaltstack(__ss #stack_t*, __oss #stack_t*) #i32;

pub foreign fn sigstack(__ss #sigstack*, __oss #sigstack*) #i32;

pub foreign fn pthread_sigmask(__how #i32, __newmask #__sigset_t*, __oldmask #__sigset_t*) #i32;

pub foreign fn pthread_kill(__threadid #u64, __signo #i32) #i32;

pub foreign fn __libc_current_sigrtmin() #i32;

pub foreign fn __libc_current_sigrtmax() #i32;

pub foreign fn posix_spawn(__pid #i32*, __path #i8*, __file_actions #posix_spawn_file_actions_t*, __attrp #anon_spawn_29_9*, __argv #i8**, __envp #i8**) #i32;

pub foreign fn posix_spawnp(__pid #i32*, __file #i8*, __file_actions #posix_spawn_file_actions_t*, __attrp #anon_spawn_29_9*, __argv #i8**, __envp #i8**) #i32;

pub foreign fn posix_spawnattr_init(__attr #anon_spawn_29_9*) #i32;

pub foreign fn posix_spawnattr_destroy(__attr #anon_spawn_29_9*) #i32;

pub foreign fn posix_spawnattr_getsigdefault(__attr #anon_spawn_29_9*, __sigdefault #__sigset_t*) #i32;

pub foreign fn posix_spawnattr_setsigdefault(__attr #anon_spawn_29_9*, __sigdefault #__sigset_t*) #i32;

pub foreign fn posix_spawnattr_getsigmask(__attr #anon_spawn_29_9*, __sigmask #__sigset_t*) #i32;

pub foreign fn posix_spawnattr_setsigmask(__attr #anon_spawn_29_9*, __sigmask #__sigset_t*) #i32;

pub foreign fn posix_spawnattr_getflags(__attr #anon_spawn_29_9*, __flags #i16*) #i32;

pub foreign fn posix_spawnattr_setflags(_attr #anon_spawn_29_9*, __flags #i16) #i32;

pub foreign fn posix_spawnattr_getpgroup(__attr #anon_spawn_29_9*, __pgroup #i32*) #i32;

pub foreign fn posix_spawnattr_setpgroup(__attr #anon_spawn_29_9*, __pgroup #i32) #i32;

pub foreign fn posix_spawnattr_getschedpolicy(__attr #anon_spawn_29_9*, __schedpolicy #i32*) #i32;

pub foreign fn posix_spawnattr_setschedpolicy(__attr #anon_spawn_29_9*, __schedpolicy #i32) #i32;

pub foreign fn posix_spawnattr_getschedparam(__attr #anon_spawn_29_9*, __schedparam #sched_param*) #i32;

pub foreign fn posix_spawnattr_setschedparam(__attr #anon_spawn_29_9*, __schedparam #sched_param*) #i32;

pub foreign fn posix_spawn_file_actions_init(__file_actions #posix_spawn_file_actions_t*) #i32;

pub foreign fn posix_spawn_file_actions_destroy(__file_actions #posix_spawn_file_actions_t*) #i32;

pub foreign fn posix_spawn_file_actions_addopen(__file_actions #posix_spawn_file_actions_t*, __fd #i32, __path #i8*, __oflag #i32, __mode #i32) #i32;

pub foreign fn posix_spawn_file_actions_addclose(__file_actions #posix_spawn_file_actions_t*, __fd #i32) #i32;

pub foreign fn posix_spawn_file_actions_adddup2(__file_actions #posix_spawn_file_actions_t*, __fd #i32, __newfd #i32) #i32;

pub foreign fn posix_spawn_file_actions_addchdir_np(__actions #posix_spawn_file_actions_t*, __path #i8*) #i32;

pub foreign fn posix_spawn_file_actions_addfchdir_np(_ #posix_spawn_file_actions_t*, __fd #i32) #i32;

pub foreign fn posix_spawn_file_actions_addclosefrom_np(_ #posix_spawn_file_actions_t*, __from #i32) #i32;

pub foreign fn posix_spawn_file_actions_addtcsetpgrp_np(_ #posix_spawn_file_actions_t*, __tcfd #i32) #i32;

pub foreign fn __fbufsize(__fp #_IO_FILE*) #u64;

pub foreign fn __freading(__fp #_IO_FILE*) #i32;

pub foreign fn __fwriting(__fp #_IO_FILE*) #i32;

pub foreign fn __freadable(__fp #_IO_FILE*) #i32;

pub foreign fn __fwritable(__fp #_IO_FILE*) #i32;

pub foreign fn __flbf(__fp #_IO_FILE*) #i32;

pub foreign fn __fpurge(__fp #_IO_FILE*) #void;

pub foreign fn __fpending(__fp #_IO_FILE*) #u64;

pub foreign fn _flushlbf() #void;

pub foreign fn __fsetlocking(__fp #_IO_FILE*, __type #i32) #i32;

pub foreign fn __ctype_get_mb_cur_max() #u64;

pub foreign fn atof(__nptr #i8*) #f64;

pub foreign fn atoi(__nptr #i8*) #i32;

pub foreign fn atol(__nptr #i8*) #i64;

pub foreign fn atoll(__nptr #i8*) #i64;

pub foreign fn strtod(__nptr #i8*, __endptr #i8**) #f64;

pub foreign fn strtof(__nptr #i8*, __endptr #i8**) #f32;

pub foreign fn strtold(__nptr #i8*, __endptr #i8**) #f64;

pub foreign fn strtol(__nptr #i8*, __endptr #i8**, __base #i32) #i64;

pub foreign fn strtoul(__nptr #i8*, __endptr #i8**, __base #i32) #u64;

pub foreign fn strtoq(__nptr #i8*, __endptr #i8**, __base #i32) #i64;

pub foreign fn strtouq(__nptr #i8*, __endptr #i8**, __base #i32) #u64;

pub foreign fn strtoll(__nptr #i8*, __endptr #i8**, __base #i32) #i64;

pub foreign fn strtoull(__nptr #i8*, __endptr #i8**, __base #i32) #u64;

pub foreign fn l64a(__n #i64) #i8*;

pub foreign fn a64l(__s #i8*) #i64;

pub foreign fn random() #i64;

pub foreign fn srandom(__seed #u32) #void;

pub foreign fn initstate(__seed #u32, __statebuf #i8*, __statelen #u64) #i8*;

pub foreign fn setstate(__statebuf #i8*) #i8*;

pub foreign fn random_r(__buf #random_data*, __result #i32*) #i32;

pub foreign fn srandom_r(__seed #u32, __buf #random_data*) #i32;

pub foreign fn initstate_r(__seed #u32, __statebuf #i8*, __statelen #u64, __buf #random_data*) #i32;

pub foreign fn setstate_r(__statebuf #i8*, __buf #random_data*) #i32;

pub foreign fn rand() #i32;

pub foreign fn srand(__seed #u32) #void;

pub foreign fn rand_r(__seed #u32*) #i32;

pub foreign fn drand48() #f64;

pub foreign fn erand48(__xsubi #[#u16; 3]) #f64;

pub foreign fn lrand48() #i64;

pub foreign fn nrand48(__xsubi #[#u16; 3]) #i64;

pub foreign fn mrand48() #i64;

pub foreign fn jrand48(__xsubi #[#u16; 3]) #i64;

pub foreign fn srand48(__seedval #i64) #void;

pub foreign fn seed48(__seed16v #[#u16; 3]) #u16*;

pub foreign fn lcong48(__param #[#u16; 7]) #void;

pub foreign fn drand48_r(__buffer #drand48_data*, __result #f64*) #i32;

pub foreign fn erand48_r(__xsubi #[#u16; 3], __buffer #drand48_data*, __result #f64*) #i32;

pub foreign fn lrand48_r(__buffer #drand48_data*, __result #i64*) #i32;

pub foreign fn nrand48_r(__xsubi #[#u16; 3], __buffer #drand48_data*, __result #i64*) #i32;

pub foreign fn mrand48_r(__buffer #drand48_data*, __result #i64*) #i32;

pub foreign fn jrand48_r(__xsubi #[#u16; 3], __buffer #drand48_data*, __result #i64*) #i32;

pub foreign fn srand48_r(__seedval #i64, __buffer #drand48_data*) #i32;

pub foreign fn seed48_r(__seed16v #[#u16; 3], __buffer #drand48_data*) #i32;

pub foreign fn lcong48_r(__param #[#u16; 7], __buffer #drand48_data*) #i32;

pub foreign fn arc4random() #u32;

pub foreign fn arc4random_buf(__buf #void*, __size #u64) #void;

pub foreign fn arc4random_uniform(__upper_bound #u32) #u32;

pub foreign fn malloc(__size #u64) #void*;

pub foreign fn calloc(__nmemb #u64, __size #u64) #void*;

pub foreign fn realloc(__ptr #void*, __size #u64) #void*;

pub foreign fn free(__ptr #void*) #void;

pub foreign fn reallocarray(__ptr #void*, __nmemb #u64, __size #u64) #void*;

pub foreign fn reallocarray(__ptr #void*, __nmemb #u64, __size #u64) #void*;

pub foreign fn valloc(__size #u64) #void*;

pub foreign fn posix_memalign(__memptr #void**, __alignment #u64, __size #u64) #i32;

pub foreign fn aligned_alloc(__alignment #u64, __size #u64) #void*;

pub foreign fn abort() #void;

pub foreign fn atexit(__func #() #void) #i32;

pub foreign fn at_quick_exit(__func #() #void) #i32;

pub foreign fn on_exit(__func #(#i32, #void*) #void, __arg #void*) #i32;

pub foreign fn exit(__status #i32) #void;

pub foreign fn quick_exit(__status #i32) #void;

pub foreign fn _Exit(__status #i32) #void;

pub foreign fn getenv(__name #i8*) #i8*;

pub foreign fn putenv(__string #i8*) #i32;

pub foreign fn setenv(__name #i8*, __value #i8*, __replace #i32) #i32;

pub foreign fn unsetenv(__name #i8*) #i32;

pub foreign fn clearenv() #i32;

pub foreign fn mktemp(__template #i8*) #i8*;

pub foreign fn mkstemp(__template #i8*) #i32;

pub foreign fn mkstemps(__template #i8*, __suffixlen #i32) #i32;

pub foreign fn mkdtemp(__template #i8*) #i8*;

pub foreign fn system(__command #i8*) #i32;

pub foreign fn realpath(__name #i8*, __resolved #i8*) #i8*;

pub foreign fn bsearch(__key #void*, __base #void*, __nmemb #u64, __size #u64, __compar #(#void*, #void*) #i32) #void*;

pub foreign fn qsort(__base #void*, __nmemb #u64, __size #u64, __compar #(#void*, #void*) #i32) #void;

pub foreign fn abs(__x #i32) #i32;

pub foreign fn labs(__x #i64) #i64;

pub foreign fn llabs(__x #i64) #i64;

pub foreign fn div(__numer #i32, __denom #i32) #div_t;

pub foreign fn ldiv(__numer #i64, __denom #i64) #ldiv_t;

pub foreign fn lldiv(__numer #i64, __denom #i64) #lldiv_t;

pub foreign fn ecvt(__value #f64, __ndigit #i32, __decpt #i32*, __sign #i32*) #i8*;

pub foreign fn fcvt(__value #f64, __ndigit #i32, __decpt #i32*, __sign #i32*) #i8*;

pub foreign fn gcvt(__value #f64, __ndigit #i32, __buf #i8*) #i8*;

pub foreign fn qecvt(__value #f64, __ndigit #i32, __decpt #i32*, __sign #i32*) #i8*;

pub foreign fn qfcvt(__value #f64, __ndigit #i32, __decpt #i32*, __sign #i32*) #i8*;

pub foreign fn qgcvt(__value #f64, __ndigit #i32, __buf #i8*) #i8*;

pub foreign fn ecvt_r(__value #f64, __ndigit #i32, __decpt #i32*, __sign #i32*, __buf #i8*, __len #u64) #i32;

pub foreign fn fcvt_r(__value #f64, __ndigit #i32, __decpt #i32*, __sign #i32*, __buf #i8*, __len #u64) #i32;

pub foreign fn qecvt_r(__value #f64, __ndigit #i32, __decpt #i32*, __sign #i32*, __buf #i8*, __len #u64) #i32;

pub foreign fn qfcvt_r(__value #f64, __ndigit #i32, __decpt #i32*, __sign #i32*, __buf #i8*, __len #u64) #i32;

pub foreign fn mblen(__s #i8*, __n #u64) #i32;

pub foreign fn mbtowc(__pwc #i32*, __s #i8*, __n #u64) #i32;

pub foreign fn wctomb(__s #i8*, __wchar #i32) #i32;

pub foreign fn mbstowcs(__pwcs #i32*, __s #i8*, __n #u64) #u64;

pub foreign fn wcstombs(__s #i8*, __pwcs #i32*, __n #u64) #u64;

pub foreign fn rpmatch(__response #i8*) #i32;

pub foreign fn getsubopt(__optionp #i8**, __tokens #i8**, __valuep #i8**) #i32;

pub foreign fn getloadavg(__loadavg #f64*, __nelem #i32) #i32;

pub foreign fn closelog() #void;

pub foreign fn openlog(__ident #i8*, __option #i32, __facility #i32) #void;

pub foreign fn setlogmask(__mask #i32) #i32;

pub foreign fn syslog(__pri #i32, __fmt #i8*, ...) #void;

pub foreign fn vsyslog(__pri #i32, __fmt #i8*, __ap #void*) #void;

pub foreign fn td_init() #td_err_e;

pub foreign fn td_log() #td_err_e;

pub foreign fn td_symbol_list() #i8**;

pub foreign fn td_ta_new(__ps #ps_prochandle*, __ta #td_thragent**) #td_err_e;

pub foreign fn td_ta_delete(__ta #td_thragent*) #td_err_e;

pub foreign fn td_ta_get_nthreads(__ta #td_thragent*, __np #i32*) #td_err_e;

pub foreign fn td_ta_get_ph(__ta #td_thragent*, __ph #ps_prochandle**) #td_err_e;

pub foreign fn td_ta_map_id2thr(__ta #td_thragent*, __pt #u64, __th #td_thrhandle*) #td_err_e;

pub foreign fn td_ta_map_lwp2thr(__ta #td_thragent*, __lwpid #i32, __th #td_thrhandle*) #td_err_e;

pub foreign fn td_ta_thr_iter(__ta #td_thragent*, __callback #(#td_thrhandle*, #void*) #i32, __cbdata_p #void*, __state #td_thr_state_e, __ti_pri #i32, __ti_sigmask_p #__sigset_t*, __ti_user_flags #u32) #td_err_e;

pub foreign fn td_ta_tsd_iter(__ta #td_thragent*, __ki #(#u32, #(#void*) #void, #void*) #i32, __p #void*) #td_err_e;

pub foreign fn td_ta_event_addr(__ta #td_thragent*, __event #td_event_e, __ptr #td_notify*) #td_err_e;

pub foreign fn td_ta_set_event(__ta #td_thragent*, __event #td_thr_events*) #td_err_e;

pub foreign fn td_ta_clear_event(__ta #td_thragent*, __event #td_thr_events*) #td_err_e;

pub foreign fn td_ta_event_getmsg(__ta #td_thragent*, __msg #td_event_msg*) #td_err_e;

pub foreign fn td_ta_setconcurrency(__ta #td_thragent*, __level #i32) #td_err_e;

pub foreign fn td_ta_enable_stats(__ta #td_thragent*, __enable #i32) #td_err_e;

pub foreign fn td_ta_reset_stats(__ta #td_thragent*) #td_err_e;

pub foreign fn td_ta_get_stats(__ta #td_thragent*, __statsp #td_ta_stats*) #td_err_e;

pub foreign fn td_thr_validate(__th #td_thrhandle*) #td_err_e;

pub foreign fn td_thr_get_info(__th #td_thrhandle*, __infop #td_thrinfo*) #td_err_e;

pub foreign fn td_thr_getfpregs(__th #td_thrhandle*, __regset #i32*) #td_err_e;

pub foreign fn td_thr_getgregs(__th #td_thrhandle*, __gregs #i32) #td_err_e;

pub foreign fn td_thr_getxregs(__th #td_thrhandle*, __xregs #void*) #td_err_e;

pub foreign fn td_thr_getxregsize(__th #td_thrhandle*, __sizep #i32*) #td_err_e;

pub foreign fn td_thr_setfpregs(__th #td_thrhandle*, __fpregs #i32*) #td_err_e;

pub foreign fn td_thr_setgregs(__th #td_thrhandle*, __gregs #i32) #td_err_e;

pub foreign fn td_thr_setxregs(__th #td_thrhandle*, __addr #void*) #td_err_e;

pub foreign fn td_thr_tlsbase(__th #td_thrhandle*, __modid #u64, __base #void**) #td_err_e;

pub foreign fn td_thr_tls_get_addr(__th #td_thrhandle*, __map_address #void*, __offset #u64, __address #void**) #td_err_e;

pub foreign fn td_thr_event_enable(__th #td_thrhandle*, __event #i32) #td_err_e;

pub foreign fn td_thr_set_event(__th #td_thrhandle*, __event #td_thr_events*) #td_err_e;

pub foreign fn td_thr_clear_event(__th #td_thrhandle*, __event #td_thr_events*) #td_err_e;

pub foreign fn td_thr_event_getmsg(__th #td_thrhandle*, __msg #td_event_msg*) #td_err_e;

pub foreign fn td_thr_setprio(__th #td_thrhandle*, __prio #i32) #td_err_e;

pub foreign fn td_thr_setsigpending(__th #td_thrhandle*, __n #u8, __ss #__sigset_t*) #td_err_e;

pub foreign fn td_thr_sigsetmask(__th #td_thrhandle*, __ss #__sigset_t*) #td_err_e;

pub foreign fn td_thr_tsd(__th #td_thrhandle*, __tk #u32, __data #void**) #td_err_e;

pub foreign fn td_thr_dbsuspend(__th #td_thrhandle*) #td_err_e;

pub foreign fn td_thr_dbresume(__th #td_thrhandle*) #td_err_e;

pub foreign fn thrd_create(__thr #u64*, __func #(#void*) #i32, __arg #void*) #i32;

pub foreign fn thrd_equal(__lhs #u64, __rhs #u64) #i32;

pub foreign fn thrd_current() #u64;

pub foreign fn thrd_sleep(__time_point #timespec*, __remaining #timespec*) #i32;

pub foreign fn thrd_exit(__res #i32) #void;

pub foreign fn thrd_detach(__thr #u64) #i32;

pub foreign fn thrd_join(__thr #u64, __res #i32*) #i32;

pub foreign fn thrd_yield() #void;

pub foreign fn mtx_init(__mutex #anon_threads_64_9*, __type #i32) #i32;

pub foreign fn mtx_lock(__mutex #anon_threads_64_9*) #i32;

pub foreign fn mtx_timedlock(__mutex #anon_threads_64_9*, __time_point #timespec*) #i32;

pub foreign fn mtx_trylock(__mutex #anon_threads_64_9*) #i32;

pub foreign fn mtx_unlock(__mutex #anon_threads_64_9*) #i32;

pub foreign fn mtx_destroy(__mutex #anon_threads_64_9*) #void;

pub foreign fn call_once(__flag #__once_flag*, __func #() #void) #void;

pub foreign fn cnd_init(__cond #anon_threads_70_9*) #i32;

pub foreign fn cnd_signal(__cond #anon_threads_70_9*) #i32;

pub foreign fn cnd_broadcast(__cond #anon_threads_70_9*) #i32;

pub foreign fn cnd_wait(__cond #anon_threads_70_9*, __mutex #anon_threads_64_9*) #i32;

pub foreign fn cnd_timedwait(__cond #anon_threads_70_9*, __mutex #anon_threads_64_9*, __time_point #timespec*) #i32;

pub foreign fn cnd_destroy(__COND #anon_threads_70_9*) #void;

pub foreign fn tss_create(__tss_id #u32*, __destructor #(#void*) #void) #i32;

pub foreign fn tss_get(__tss_id #u32) #void*;

pub foreign fn tss_set(__tss_id #u32, __val #void*) #i32;

pub foreign fn tss_delete(__tss_id #u32) #void;

pub foreign fn getttyent() #ttyent*;

pub foreign fn getttynam(__tty #i8*) #ttyent*;

pub foreign fn setttyent() #i32;

pub foreign fn endttyent() #i32;

pub foreign fn mbrtoc16(__pc16 #u16*, __s #i8*, __n #u64, __p #__mbstate_t*) #u64;

pub foreign fn c16rtomb(__s #i8*, __c16 #u16, __ps #__mbstate_t*) #u64;

pub foreign fn mbrtoc32(__pc32 #u32*, __s #i8*, __n #u64, __p #__mbstate_t*) #u64;

pub foreign fn c32rtomb(__s #i8*, __c32 #u32, __ps #__mbstate_t*) #u64;

pub foreign fn getcontext(__ucp #ucontext_t*) #i32;

pub foreign fn setcontext(__ucp #ucontext_t*) #i32;

pub foreign fn swapcontext(__oucp #ucontext_t*, __ucp #ucontext_t*) #i32;

pub foreign fn makecontext(__ucp #ucontext_t*, __func #() #void, __argc #i32, ...) #void;

pub foreign fn ulimit(__cmd #i32, ...) #i64;

pub foreign fn access(__name #i8*, __type #i32) #i32;

pub foreign fn faccessat(__fd #i32, __file #i8*, __type #i32, __flag #i32) #i32;

pub foreign fn lseek(__fd #i32, __offset #i32, __whence #i32) #i32;

pub foreign fn close(__fd #i32) #i32;

pub foreign fn closefrom(__lowfd #i32) #void;

pub foreign fn read(__fd #i32, __buf #void*, __nbytes #u64) #i32;

pub foreign fn write(__fd #i32, __buf #void*, __n #u64) #i32;

pub foreign fn pread(__fd #i32, __buf #void*, __nbytes #u64, __offset #i32) #i32;

pub foreign fn pwrite(__fd #i32, __buf #void*, __n #u64, __offset #i32) #i32;

pub foreign fn pipe(__pipedes #[#i32; 2]) #i32;

pub foreign fn alarm(__seconds #u32) #u32;

pub foreign fn sleep(__seconds #u32) #u32;

pub foreign fn ualarm(__value #i32, __interval #i32) #i32;

pub foreign fn usleep(__useconds #i32) #i32;

pub foreign fn pause() #i32;

pub foreign fn chown(__file #i8*, __owner #i32, __group #i32) #i32;

pub foreign fn fchown(__fd #i32, __owner #i32, __group #i32) #i32;

pub foreign fn lchown(__file #i8*, __owner #i32, __group #i32) #i32;

pub foreign fn fchownat(__fd #i32, __file #i8*, __owner #i32, __group #i32, __flag #i32) #i32;

pub foreign fn chdir(__path #i8*) #i32;

pub foreign fn fchdir(__fd #i32) #i32;

pub foreign fn getcwd(__buf #i8*, __size #u64) #i8*;

pub foreign fn getwd(__buf #i8*) #i8*;

pub foreign fn dup(__fd #i32) #i32;

pub foreign fn dup2(__fd #i32, __fd2 #i32) #i32;

pub foreign fn execve(__path #i8*, __argv #i8**, __envp #i8**) #i32;

pub foreign fn fexecve(__fd #i32, __argv #i8**, __envp #i8**) #i32;

pub foreign fn execv(__path #i8*, __argv #i8**) #i32;

pub foreign fn execle(__path #i8*, __arg #i8*, ...) #i32;

pub foreign fn execl(__path #i8*, __arg #i8*, ...) #i32;

pub foreign fn execvp(__file #i8*, __argv #i8**) #i32;

pub foreign fn execlp(__file #i8*, __arg #i8*, ...) #i32;

pub foreign fn nice(__inc #i32) #i32;

pub foreign fn _exit(__status #i32) #void;

pub foreign fn pathconf(__path #i8*, __name #i32) #i64;

pub foreign fn fpathconf(__fd #i32, __name #i32) #i64;

pub foreign fn sysconf(__name #i32) #i64;

pub foreign fn confstr(__name #i32, __buf #i8*, __len #u64) #u64;

pub foreign fn getpid() #i32;

pub foreign fn getppid() #i32;

pub foreign fn getpgrp() #i32;

pub foreign fn __getpgid(__pid #i32) #i32;

pub foreign fn getpgid(__pid #i32) #i32;

pub foreign fn setpgid(__pid #i32, __pgid #i32) #i32;

pub foreign fn setpgrp() #i32;

pub foreign fn setsid() #i32;

pub foreign fn getsid(__pid #i32) #i32;

pub foreign fn getuid() #i32;

pub foreign fn geteuid() #i32;

pub foreign fn getgid() #i32;

pub foreign fn getegid() #i32;

pub foreign fn getgroups(__size #i32, __list #i32*) #i32;

pub foreign fn setuid(__uid #i32) #i32;

pub foreign fn setreuid(__ruid #i32, __euid #i32) #i32;

pub foreign fn seteuid(__uid #i32) #i32;

pub foreign fn setgid(__gid #i32) #i32;

pub foreign fn setregid(__rgid #i32, __egid #i32) #i32;

pub foreign fn setegid(__gid #i32) #i32;

pub foreign fn fork() #i32;

pub foreign fn vfork() #i32;

pub foreign fn ttyname(__fd #i32) #i8*;

pub foreign fn ttyname_r(__fd #i32, __buf #i8*, __buflen #u64) #i32;

pub foreign fn isatty(__fd #i32) #i32;

pub foreign fn ttyslot() #i32;

pub foreign fn link(__from #i8*, __to #i8*) #i32;

pub foreign fn linkat(__fromfd #i32, __from #i8*, __tofd #i32, __to #i8*, __flags #i32) #i32;

pub foreign fn symlink(__from #i8*, __to #i8*) #i32;

pub foreign fn readlink(__path #i8*, __buf #i8*, __len #u64) #i32;

pub foreign fn symlinkat(__from #i8*, __tofd #i32, __to #i8*) #i32;

pub foreign fn readlinkat(__fd #i32, __path #i8*, __buf #i8*, __len #u64) #i32;

pub foreign fn unlink(__name #i8*) #i32;

pub foreign fn unlinkat(__fd #i32, __name #i8*, __flag #i32) #i32;

pub foreign fn rmdir(__path #i8*) #i32;

pub foreign fn tcgetpgrp(__fd #i32) #i32;

pub foreign fn tcsetpgrp(__fd #i32, __pgrp_id #i32) #i32;

pub foreign fn getlogin() #i8*;

pub foreign fn getlogin_r(__name #i8*, __name_len #u64) #i32;

pub foreign fn setlogin(__name #i8*) #i32;

pub foreign fn gethostname(__name #i8*, __len #u64) #i32;

pub foreign fn sethostname(__name #i8*, __len #u64) #i32;

pub foreign fn sethostid(__id #i64) #i32;

pub foreign fn getdomainname(__name #i8*, __len #u64) #i32;

pub foreign fn setdomainname(__name #i8*, __len #u64) #i32;

pub foreign fn vhangup() #i32;

pub foreign fn revoke(__file #i8*) #i32;

pub foreign fn profil(__sample_buffer #u16*, __size #u64, __offset #u64, __scale #u32) #i32;

pub foreign fn acct(__name #i8*) #i32;

pub foreign fn getusershell() #i8*;

pub foreign fn endusershell() #void;

pub foreign fn setusershell() #void;

pub foreign fn daemon(__nochdir #i32, __noclose #i32) #i32;

pub foreign fn chroot(__path #i8*) #i32;

pub foreign fn getpass(__prompt #i8*) #i8*;

pub foreign fn fsync(__fd #i32) #i32;

pub foreign fn gethostid() #i64;

pub foreign fn sync() #void;

pub foreign fn getpagesize() #i32;

pub foreign fn getdtablesize() #i32;

pub foreign fn truncate(__file #i8*, __length #i32) #i32;

pub foreign fn ftruncate(__fd #i32, __length #i32) #i32;

pub foreign fn brk(__addr #void*) #i32;

pub foreign fn sbrk(__delta #i64) #void*;

pub foreign fn syscall(__sysno #i64, ...) #i64;

pub foreign fn fdatasync(__fildes #i32) #i32;

pub foreign fn crypt(__key #i8*, __salt #i8*) #i8*;

pub foreign fn getentropy(__buffer #void*, __length #u64) #i32;

pub foreign fn utime(__file #i8*, __file_times #utimbuf*) #i32;

pub foreign fn gettimeofday(__tv #timeval*, __tz #void*) #i32;

pub foreign fn settimeofday(__tv #timeval*, __tz #timezone*) #i32;

pub foreign fn adjtime(__delta #timeval*, __olddelta #timeval*) #i32;

pub foreign fn getitimer(__which #i32, __value #itimerval*) #i32;

pub foreign fn setitimer(__which #i32, __new #itimerval*, __old #itimerval*) #i32;

pub foreign fn utimes(__file #i8*, __tvp #i32) #i32;

pub foreign fn lutimes(__file #i8*, __tvp #i32) #i32;

pub foreign fn futimes(__fd #i32, __tvp #i32) #i32;

pub foreign fn setutxent() #void;

pub foreign fn endutxent() #void;

pub foreign fn getutxent() #utmpx*;

pub foreign fn getutxid(__id #utmpx*) #utmpx*;

pub foreign fn getutxline(__line #utmpx*) #utmpx*;

pub foreign fn pututxline(__utmpx #utmpx*) #utmpx*;

pub foreign fn wait(__stat_loc #i32*) #i32;

pub foreign fn waitpid(__pid #i32, __stat_loc #i32*, __options #i32) #i32;

pub foreign fn waitid(__idtype #i32, __id #i32, __infop #anon_siginfo_t_36_9*, __options #i32) #i32;

pub foreign fn wait3(__stat_loc #i32*, __options #i32, __usage #rusage*) #i32;

pub foreign fn wait4(__pid #i32, __stat_loc #i32*, __options #i32, __usage #rusage*) #i32;

pub foreign fn wcscpy(__dest #i32*, __src #i32*) #i32*;

pub foreign fn wcsncpy(__dest #i32*, __src #i32*, __n #u64) #i32*;

pub foreign fn wcslcpy(__dest #i32*, __src #i32*, __n #u64) #u64;

pub foreign fn wcslcat(__dest #i32*, __src #i32*, __n #u64) #u64;

pub foreign fn wcscat(__dest #i32*, __src #i32*) #i32*;

pub foreign fn wcsncat(__dest #i32*, __src #i32*, __n #u64) #i32*;

pub foreign fn wcscmp(__s1 #i32*, __s2 #i32*) #i32;

pub foreign fn wcsncmp(__s1 #i32*, __s2 #i32*, __n #u64) #i32;

pub foreign fn wcscasecmp(__s1 #i32*, __s2 #i32*) #i32;

pub foreign fn wcsncasecmp(__s1 #i32*, __s2 #i32*, __n #u64) #i32;

pub foreign fn wcscasecmp_l(__s1 #i32*, __s2 #i32*, __loc #i32) #i32;

pub foreign fn wcsncasecmp_l(__s1 #i32*, __s2 #i32*, __n #u64, __loc #i32) #i32;

pub foreign fn wcscoll(__s1 #i32*, __s2 #i32*) #i32;

pub foreign fn wcsxfrm(__s1 #i32*, __s2 #i32*, __n #u64) #u64;

pub foreign fn wcscoll_l(__s1 #i32*, __s2 #i32*, __loc #i32) #i32;

pub foreign fn wcsxfrm_l(__s1 #i32*, __s2 #i32*, __n #u64, __loc #i32) #u64;

pub foreign fn wcsdup(__s #i32*) #i32*;

pub foreign fn wcschr(__wcs #i32*, __wc #i32) #i32*;

pub foreign fn wcsrchr(__wcs #i32*, __wc #i32) #i32*;

pub foreign fn wcscspn(__wcs #i32*, __reject #i32*) #u64;

pub foreign fn wcsspn(__wcs #i32*, __accept #i32*) #u64;

pub foreign fn wcspbrk(__wcs #i32*, __accept #i32*) #i32*;

pub foreign fn wcsstr(__haystack #i32*, __needle #i32*) #i32*;

pub foreign fn wcstok(__s #i32*, __delim #i32*, __ptr #i32**) #i32*;

pub foreign fn wcslen(__s #i32*) #u64;

pub foreign fn wcsnlen(__s #i32*, __maxlen #u64) #u64;

pub foreign fn wmemchr(__s #i32*, __c #i32, __n #u64) #i32*;

pub foreign fn wmemcmp(__s1 #i32*, __s2 #i32*, __n #u64) #i32;

pub foreign fn wmemcpy(__s1 #i32*, __s2 #i32*, __n #u64) #i32*;

pub foreign fn wmemmove(__s1 #i32*, __s2 #i32*, __n #u64) #i32*;

pub foreign fn wmemset(__s #i32*, __c #i32, __n #u64) #i32*;

pub foreign fn btowc(__c #i32) #u32;

pub foreign fn wctob(__c #u32) #i32;

pub foreign fn mbsinit(__ps #__mbstate_t*) #i32;

pub foreign fn mbrtowc(__pwc #i32*, __s #i8*, __n #u64, __p #__mbstate_t*) #u64;

pub foreign fn wcrtomb(__s #i8*, __wc #i32, __ps #__mbstate_t*) #u64;

pub foreign fn __mbrlen(__s #i8*, __n #u64, __ps #__mbstate_t*) #u64;

pub foreign fn mbrlen(__s #i8*, __n #u64, __ps #__mbstate_t*) #u64;

pub foreign fn mbsrtowcs(__dst #i32*, __src #i8**, __len #u64, __ps #__mbstate_t*) #u64;

pub foreign fn wcsrtombs(__dst #i8*, __src #i32**, __len #u64, __ps #__mbstate_t*) #u64;

pub foreign fn mbsnrtowcs(__dst #i32*, __src #i8**, __nmc #u64, __len #u64, __ps #__mbstate_t*) #u64;

pub foreign fn wcsnrtombs(__dst #i8*, __src #i32**, __nwc #u64, __len #u64, __ps #__mbstate_t*) #u64;

pub foreign fn wcstod(__nptr #i32*, __endptr #i32**) #f64;

pub foreign fn wcstof(__nptr #i32*, __endptr #i32**) #f32;

pub foreign fn wcstold(__nptr #i32*, __endptr #i32**) #f64;

pub foreign fn wcstol(__nptr #i32*, __endptr #i32**, __base #i32) #i64;

pub foreign fn wcstoul(__nptr #i32*, __endptr #i32**, __base #i32) #u64;

pub foreign fn wcstoll(__nptr #i32*, __endptr #i32**, __base #i32) #i64;

pub foreign fn wcstoull(__nptr #i32*, __endptr #i32**, __base #i32) #u64;

pub foreign fn wcpcpy(__dest #i32*, __src #i32*) #i32*;

pub foreign fn wcpncpy(__dest #i32*, __src #i32*, __n #u64) #i32*;

pub foreign fn open_wmemstream(__bufloc #i32**, __sizeloc #u64*) #_IO_FILE*;

pub foreign fn fwide(__fp #_IO_FILE*, __mode #i32) #i32;

pub foreign fn fwprintf(__stream #_IO_FILE*, __format #i32*, ...) #i32;

pub foreign fn wprintf(__format #i32*, ...) #i32;

pub foreign fn swprintf(__s #i32*, __n #u64, __format #i32*, ...) #i32;

pub foreign fn vfwprintf(__s #_IO_FILE*, __format #i32*, __arg #void*) #i32;

pub foreign fn vwprintf(__format #i32*, __arg #void*) #i32;

pub foreign fn vswprintf(__s #i32*, __n #u64, __format #i32*, __arg #void*) #i32;

pub foreign fn fwscanf(__stream #_IO_FILE*, __format #i32*, ...) #i32;

pub foreign fn wscanf(__format #i32*, ...) #i32;

pub foreign fn swscanf(__s #i32*, __format #i32*, ...) #i32;

pub foreign fn fwscanf(__stream #_IO_FILE*, __format #i32*, ...) #i32;

pub foreign fn wscanf(__format #i32*, ...) #i32;

pub foreign fn swscanf(__s #i32*, __format #i32*, ...) #i32;

pub foreign fn vfwscanf(__s #_IO_FILE*, __format #i32*, __arg #void*) #i32;

pub foreign fn vwscanf(__format #i32*, __arg #void*) #i32;

pub foreign fn vswscanf(__s #i32*, __format #i32*, __arg #void*) #i32;

pub foreign fn vfwscanf(__s #_IO_FILE*, __format #i32*, __arg #void*) #i32;

pub foreign fn vwscanf(__format #i32*, __arg #void*) #i32;

pub foreign fn vswscanf(__s #i32*, __format #i32*, __arg #void*) #i32;

pub foreign fn fgetwc(__stream #_IO_FILE*) #u32;

pub foreign fn getwc(__stream #_IO_FILE*) #u32;

pub foreign fn getwchar() #u32;

pub foreign fn fputwc(__wc #i32, __stream #_IO_FILE*) #u32;

pub foreign fn putwc(__wc #i32, __stream #_IO_FILE*) #u32;

pub foreign fn putwchar(__wc #i32) #u32;

pub foreign fn fgetws(__ws #i32*, __n #i32, __stream #_IO_FILE*) #i32*;

pub foreign fn fputws(__ws #i32*, __stream #_IO_FILE*) #i32;

pub foreign fn ungetwc(__wc #u32, __stream #_IO_FILE*) #u32;

pub foreign fn wcsftime(__s #i32*, __maxsize #u64, __format #i32*, __tp #tm*) #u64;

pub foreign fn iswalnum(__wc #u32) #i32;

pub foreign fn iswalpha(__wc #u32) #i32;

pub foreign fn iswcntrl(__wc #u32) #i32;

pub foreign fn iswdigit(__wc #u32) #i32;

pub foreign fn iswgraph(__wc #u32) #i32;

pub foreign fn iswlower(__wc #u32) #i32;

pub foreign fn iswprint(__wc #u32) #i32;

pub foreign fn iswpunct(__wc #u32) #i32;

pub foreign fn iswspace(__wc #u32) #i32;

pub foreign fn iswupper(__wc #u32) #i32;

pub foreign fn iswxdigit(__wc #u32) #i32;

pub foreign fn iswblank(__wc #u32) #i32;

pub foreign fn wctype(__property #i8*) #u64;

pub foreign fn iswctype(__wc #u32, __desc #u64) #i32;

pub foreign fn towlower(__wc #u32) #u32;

pub foreign fn towupper(__wc #u32) #u32;

pub foreign fn wctrans(__property #i8*) #i32*;

pub foreign fn towctrans(__wc #u32, __desc #i32*) #u32;

pub foreign fn iswalnum_l(__wc #u32, __locale #i32) #i32;

pub foreign fn iswalpha_l(__wc #u32, __locale #i32) #i32;

pub foreign fn iswcntrl_l(__wc #u32, __locale #i32) #i32;

pub foreign fn iswdigit_l(__wc #u32, __locale #i32) #i32;

pub foreign fn iswgraph_l(__wc #u32, __locale #i32) #i32;

pub foreign fn iswlower_l(__wc #u32, __locale #i32) #i32;

pub foreign fn iswprint_l(__wc #u32, __locale #i32) #i32;

pub foreign fn iswpunct_l(__wc #u32, __locale #i32) #i32;

pub foreign fn iswspace_l(__wc #u32, __locale #i32) #i32;

pub foreign fn iswupper_l(__wc #u32, __locale #i32) #i32;

pub foreign fn iswxdigit_l(__wc #u32, __locale #i32) #i32;

pub foreign fn iswblank_l(__wc #u32, __locale #i32) #i32;

pub foreign fn wctype_l(__property #i8*, __locale #i32) #u64;

pub foreign fn iswctype_l(__wc #u32, __desc #u64, __locale #i32) #i32;

pub foreign fn towlower_l(__wc #u32, __locale #i32) #u32;

pub foreign fn towupper_l(__wc #u32, __locale #i32) #u32;

pub foreign fn wctrans_l(__property #i8*, __locale #i32) #i32*;

pub foreign fn towctrans_l(__wc #u32, __desc #i32*, __locale #i32) #u32;

pub foreign fn wordexp(__words #i8*, __pwordexp #wordexp_t*, __flags #i32) #i32;

pub foreign fn wordfree(__wordexp #wordexp_t*) #void;

pub type exec {
    pub a_info #u64;
    pub a_text #u32;
    pub a_data #u32;
    pub a_bss #u32;
    pub a_syms #u32;
    pub a_entry #u32;
    pub a_trsize #u32;
    pub a_drsize #u32;
}

pub union type anon_a_out_92_3 {
    pub n_name #i8*;
    pub n_next #nlist*;
    pub n_strx #i64;
}

pub type nlist {
    pub n_name #i8*;
    pub n_next #nlist*;
    pub n_strx #i64;
    pub n_un #anon_a_out_92_3;
    pub n_type #u8;
    pub n_other #i8;
    pub n_desc #i16;
    pub n_value #u64;
}

pub type relocation_info {
    pub r_address #i32;
    pub r_symbolnum #u32;
    pub r_pcrel #u32;
    pub r_length #u32;
    pub r_extern #u32;
    pub r_pad #u32;
}

pub union type pthread_attr_t {
    pub __size #i8;
    pub __align #i64;
}

pub type anon_sigevent_t_36_2 {
    pub _function #() #void;
    pub _attribute #pthread_attr_t*;
}

pub union type anon_sigevent_t_28_5 {
    pub _function #() #void;
    pub _attribute #pthread_attr_t*;
    pub _sigev_thread #anon_sigevent_t_36_2;
}

pub type sigevent {
    pub _function #() #void;
    pub _attribute #pthread_attr_t*;
    pub _sigev_thread #anon_sigevent_t_36_2;
    pub _sigev_un #anon_sigevent_t_28_5;
}

pub type timespec {
    pub tv_sec #i32;
    pub tv_nsec #i32;
}

pub type aiocb {
    pub aio_fildes #i32;
    pub aio_lio_opcode #i32;
    pub aio_reqprio #i32;
    pub aio_buf #void*;
    pub aio_nbytes #i32;
    pub aio_sigevent #sigevent;
    pub __next_prio #aiocb*;
    pub __abs_prio #i32;
    pub __policy #i32;
    pub __error_code #i32;
    pub __return_value #i32;
    pub aio_offset #i32;
    pub __pad #i8;
    pub __glibc_reserved #[#i8; 32];
}

pub type aliasent {
    pub alias_name #i8*;
    pub alias_members_len #i32;
    pub alias_members #i8**;
    pub alias_local #i32;
}

pub type ar_hdr {
    pub ar_name #[#i8; 16];
    pub ar_date #[#i8; 12];
    pub ar_uid #[#i8; 6];
    pub ar_gid #[#i8; 6];
    pub ar_mode #[#i8; 8];
    pub ar_size #[#i8; 10];
    pub ar_fmag #[#i8; 2];
}

pub type _G_fpos_t {
    pub __pos #i32;
    pub __state #i32;
}

pub type _G_fpos64_t {
    pub __pos #i32;
    pub __state #i32;
}

pub type _IO_FILE {
    pub _flags #i32;
    pub _IO_read_ptr #i8*;
    pub _IO_read_end #i8*;
    pub _IO_read_base #i8*;
    pub _IO_write_base #i8*;
    pub _IO_write_ptr #i8*;
    pub _IO_write_end #i8*;
    pub _IO_buf_base #i8*;
    pub _IO_buf_end #i8*;
    pub _IO_save_base #i8*;
    pub _IO_backup_base #i8*;
    pub _IO_save_end #i8*;
    pub _markers #_IO_marker*;
    pub _chain #_IO_FILE*;
    pub _fileno #i32;
    pub _flags2 #i32;
    pub _old_offset #i32;
    pub _cur_column #u16;
    pub _vtable_offset #i8;
    pub _shortbuf #[#i8; 1];
    pub _lock #void*;
    pub _offset #i32;
    pub _codecvt #_IO_codecvt*;
    pub _wide_data #_IO_wide_data*;
    pub _freeres_list #_IO_FILE*;
    pub _freeres_buf #void*;
    pub __pad5 #i32;
    pub _mode #i32;
    pub _unused2 #i8;
}

pub type _IO_marker;

pub type _IO_codecvt;

pub type _IO_wide_data;

pub type _IO_cookie_io_functions_t {
    pub read #(#void*, #i8*, #i32) #i32;
    pub write #(#void*, #i8*, #i32) #i32;
    pub seek #(#void*, #i32*, #i32) #i32;
    pub close #(#void*) #i32;
}

pub type option {
    pub name #i8*;
    pub has_arg #i32;
    pub flag #i32*;
    pub val #i32;
}

pub type argp_option {
    pub name #i8*;
    pub key #i32;
    pub arg #i8*;
    pub flags #i32;
    pub doc #i8*;
    pub group #i32;
}

pub type argp {
    pub options #argp_option*;
    pub parser #(#i32, #i8*, #argp_state*) #i32;
    pub args_doc #i8*;
    pub doc #i8*;
    pub children #argp_child*;
    pub help_filter #(#i32, #i8*, #void*) #i8*;
    pub argp_domain #i8*;
}

pub type argp_state {
    pub root_argp #argp*;
    pub argc #i32;
    pub argv #i8**;
    pub next #i32;
    pub flags #u32;
    pub arg_num #u32;
    pub quoted #i32;
    pub input #void*;
    pub child_inputs #void**;
    pub hook #void*;
    pub name #i8*;
    pub err_stream #_IO_FILE*;
    pub out_stream #_IO_FILE*;
    pub pstate #void*;
}

pub type argp_child {
    pub argp #argp*;
    pub flags #i32;
    pub header #i8*;
    pub group #i32;
}

pub type dirent {
    pub d_ino #i32;
    pub d_off #i32;
    pub d_reclen #u16;
    pub d_type #u8;
    pub d_name #[#i8; 256];
}

pub type __dirstream;

pub type Elf32_Ehdr {
    pub e_ident #[#u8; 16];
    pub e_type #u16;
    pub e_machine #u16;
    pub e_version #u32;
    pub e_entry #u32;
    pub e_phoff #u32;
    pub e_shoff #u32;
    pub e_flags #u32;
    pub e_ehsize #u16;
    pub e_phentsize #u16;
    pub e_phnum #u16;
    pub e_shentsize #u16;
    pub e_shnum #u16;
    pub e_shstrndx #u16;
}

pub type Elf64_Ehdr {
    pub e_ident #[#u8; 16];
    pub e_type #u16;
    pub e_machine #u16;
    pub e_version #u32;
    pub e_entry #u64;
    pub e_phoff #u64;
    pub e_shoff #u64;
    pub e_flags #u32;
    pub e_ehsize #u16;
    pub e_phentsize #u16;
    pub e_phnum #u16;
    pub e_shentsize #u16;
    pub e_shnum #u16;
    pub e_shstrndx #u16;
}

pub type Elf32_Shdr {
    pub sh_name #u32;
    pub sh_type #u32;
    pub sh_flags #u32;
    pub sh_addr #u32;
    pub sh_offset #u32;
    pub sh_size #u32;
    pub sh_link #u32;
    pub sh_info #u32;
    pub sh_addralign #u32;
    pub sh_entsize #u32;
}

pub type Elf64_Shdr {
    pub sh_name #u32;
    pub sh_type #u32;
    pub sh_flags #u64;
    pub sh_addr #u64;
    pub sh_offset #u64;
    pub sh_size #u64;
    pub sh_link #u32;
    pub sh_info #u32;
    pub sh_addralign #u64;
    pub sh_entsize #u64;
}

pub type Elf32_Chdr {
    pub ch_type #u32;
    pub ch_size #u32;
    pub ch_addralign #u32;
}

pub type Elf64_Chdr {
    pub ch_type #u32;
    pub ch_reserved #u32;
    pub ch_size #u64;
    pub ch_addralign #u64;
}

pub type Elf32_Sym {
    pub st_name #u32;
    pub st_value #u32;
    pub st_size #u32;
    pub st_info #u8;
    pub st_other #u8;
    pub st_shndx #u16;
}

pub type Elf64_Sym {
    pub st_name #u32;
    pub st_info #u8;
    pub st_other #u8;
    pub st_shndx #u16;
    pub st_value #u64;
    pub st_size #u64;
}

pub type Elf32_Syminfo {
    pub si_boundto #u16;
    pub si_flags #u16;
}

pub type Elf64_Syminfo {
    pub si_boundto #u16;
    pub si_flags #u16;
}

pub type Elf32_Rel {
    pub r_offset #u32;
    pub r_info #u32;
}

pub type Elf64_Rel {
    pub r_offset #u64;
    pub r_info #u64;
}

pub type Elf32_Rela {
    pub r_offset #u32;
    pub r_info #u32;
    pub r_addend #i32;
}

pub type Elf64_Rela {
    pub r_offset #u64;
    pub r_info #u64;
    pub r_addend #i64;
}

pub type Elf32_Phdr {
    pub p_type #u32;
    pub p_offset #u32;
    pub p_vaddr #u32;
    pub p_paddr #u32;
    pub p_filesz #u32;
    pub p_memsz #u32;
    pub p_flags #u32;
    pub p_align #u32;
}

pub type Elf64_Phdr {
    pub p_type #u32;
    pub p_flags #u32;
    pub p_offset #u64;
    pub p_vaddr #u64;
    pub p_paddr #u64;
    pub p_filesz #u64;
    pub p_memsz #u64;
    pub p_align #u64;
}

pub union type anon_elf_855_3 {
    pub d_val #u32;
    pub d_ptr #u32;
}

pub type Elf32_Dyn {
    pub d_val #u32;
    pub d_ptr #u32;
    pub d_un #anon_elf_855_3;
}

pub union type anon_elf_865_3 {
    pub d_val #u64;
    pub d_ptr #u64;
}

pub type Elf64_Dyn {
    pub d_val #u64;
    pub d_ptr #u64;
    pub d_un #anon_elf_865_3;
}

pub type Elf32_Verdef {
    pub vd_version #u16;
    pub vd_flags #u16;
    pub vd_ndx #u16;
    pub vd_cnt #u16;
    pub vd_hash #u32;
    pub vd_aux #u32;
    pub vd_next #u32;
}

pub type Elf64_Verdef {
    pub vd_version #u16;
    pub vd_flags #u16;
    pub vd_ndx #u16;
    pub vd_cnt #u16;
    pub vd_hash #u32;
    pub vd_aux #u32;
    pub vd_next #u32;
}

pub type Elf32_Verdaux {
    pub vda_name #u32;
    pub vda_next #u32;
}

pub type Elf64_Verdaux {
    pub vda_name #u32;
    pub vda_next #u32;
}

pub type Elf32_Verneed {
    pub vn_version #u16;
    pub vn_cnt #u16;
    pub vn_file #u32;
    pub vn_aux #u32;
    pub vn_next #u32;
}

pub type Elf64_Verneed {
    pub vn_version #u16;
    pub vn_cnt #u16;
    pub vn_file #u32;
    pub vn_aux #u32;
    pub vn_next #u32;
}

pub type Elf32_Vernaux {
    pub vna_hash #u32;
    pub vna_flags #u16;
    pub vna_other #u16;
    pub vna_name #u32;
    pub vna_next #u32;
}

pub type Elf64_Vernaux {
    pub vna_hash #u32;
    pub vna_flags #u16;
    pub vna_other #u16;
    pub vna_name #u32;
    pub vna_next #u32;
}

pub union type anon_elf_1160_3 {
    pub a_val #u32;
}

pub type Elf32_auxv_t {
    pub a_val #u32;
    pub a_un #anon_elf_1160_3;
}

pub union type anon_elf_1172_3 {
    pub a_val #u64;
}

pub type Elf64_auxv_t {
    pub a_val #u64;
    pub a_un #anon_elf_1172_3;
}

pub type Elf32_Nhdr {
    pub n_namesz #u32;
    pub n_descsz #u32;
    pub n_type #u32;
}

pub type Elf64_Nhdr {
    pub n_namesz #u32;
    pub n_descsz #u32;
    pub n_type #u32;
}

pub type Elf32_Move {
    pub m_value #u64;
    pub m_info #u32;
    pub m_poffset #u32;
    pub m_repeat #u16;
    pub m_stride #u16;
}

pub type Elf64_Move {
    pub m_value #u64;
    pub m_info #u64;
    pub m_poffset #u64;
    pub m_repeat #u16;
    pub m_stride #u16;
}

pub type anon_elf_1797_3 {
    pub gt_current_g_value #u32;
    pub gt_unused #u32;
}

pub type anon_elf_1802_3 {
    pub gt_g_value #u32;
    pub gt_bytes #u32;
}

pub union type Elf32_gptab {
    pub gt_g_value #u32;
    pub gt_bytes #u32;
    pub gt_entry #anon_elf_1802_3;
}

pub type Elf32_RegInfo {
    pub ri_gprmask #u32;
    pub ri_cprmask #[#u32; 4];
    pub ri_gp_value #i32;
}

pub type Elf_Options {
    pub kind #u8;
    pub size #u8;
    pub section #u16;
    pub info #u32;
}

pub type Elf_Options_Hw {
    pub hwp_flags1 #u32;
    pub hwp_flags2 #u32;
}

pub type Elf32_Lib {
    pub l_name #u32;
    pub l_time_stamp #u32;
    pub l_checksum #u32;
    pub l_version #u32;
    pub l_flags #u32;
}

pub type Elf64_Lib {
    pub l_name #u32;
    pub l_time_stamp #u32;
    pub l_checksum #u32;
    pub l_version #u32;
    pub l_flags #u32;
}

pub type Elf_MIPS_ABIFlags_v0 {
    pub version #u16;
    pub isa_level #u8;
    pub isa_rev #u8;
    pub gpr_size #u8;
    pub cpr1_size #u8;
    pub cpr2_size #u8;
    pub fp_abi #u8;
    pub isa_ext #u32;
    pub ases #u32;
    pub flags1 #u32;
    pub flags2 #u32;
}

pub type flock {
    pub l_type #i16;
    pub l_whence #i16;
    pub l_start #i32;
    pub l_len #i32;
    pub l_pid #i32;
}

pub type fenv_t {
    pub __control_word #u16;
    pub __glibc_reserved1 #u16;
    pub __status_word #u16;
    pub __glibc_reserved2 #u16;
    pub __tags #u16;
    pub __glibc_reserved3 #u16;
    pub __eip #u32;
    pub __cs_selector #u16;
    pub __opcode #u32;
    pub __glibc_reserved4 #u32;
    pub __data_offset #u32;
    pub __data_selector #u16;
    pub __glibc_reserved5 #u16;
    pub __mxcsr #u32;
}

pub type fstab {
    pub fs_spec #i8*;
    pub fs_file #i8*;
    pub fs_vfstype #i8*;
    pub fs_mntops #i8*;
    pub fs_type #i8*;
    pub fs_freq #i32;
    pub fs_passno #i32;
}

pub type FTS {
    pub fts_cur #_ftsent*;
    pub fts_child #_ftsent*;
    pub fts_array #_ftsent**;
    pub fts_dev #i32;
    pub fts_path #i8*;
    pub fts_rfd #i32;
    pub fts_pathlen #i32;
    pub fts_nitems #i32;
    pub fts_compar #(#void*, #void*) #i32;
    pub fts_options #i32;
}

pub type _ftsent {
    pub fts_cycle #_ftsent*;
    pub fts_parent #_ftsent*;
    pub fts_link #_ftsent*;
    pub fts_number #i64;
    pub fts_pointer #void*;
    pub fts_accpath #i8*;
    pub fts_path #i8*;
    pub fts_errno #i32;
    pub fts_symfd #i32;
    pub fts_pathlen #u16;
    pub fts_namelen #u16;
    pub fts_ino #i32;
    pub fts_dev #i32;
    pub fts_nlink #i32;
    pub fts_level #i16;
    pub fts_info #u16;
    pub fts_flags #u16;
    pub fts_instr #u16;
    pub fts_statp #stat*;
    pub fts_name #[#i8; 1];
}

pub union type anon___mbstate_t_16_3 {
    pub __wch #u32;
    pub __wchb #[#i8; 4];
}

pub type __mbstate_t {
    pub __wch #u32;
    pub __wchb #[#i8; 4];
    pub __value #anon___mbstate_t_16_3;
}

pub type __gconv_step {
    pub __shlib_handle #__gconv_loaded_object*;
    pub __modname #i8*;
    pub __counter #i32;
    pub __from_name #i8*;
    pub __to_name #i8*;
    pub __fct #(#__gconv_step*, #__gconv_step_data*, #u8**, #u8*, #u8**, #i32*, #i32, #i32) #i32;
    pub __btowc_fct #(#__gconv_step*, #u8) #u32;
    pub __init_fct #(#__gconv_step*) #i32;
    pub __end_fct #(#__gconv_step*) #void;
    pub __min_needed_from #i32;
    pub __max_needed_from #i32;
    pub __min_needed_to #i32;
    pub __max_needed_to #i32;
    pub __stateful #i32;
    pub __data #void*;
}

pub type __gconv_step_data {
    pub __outbuf #u8*;
    pub __outbufend #u8*;
    pub __flags #i32;
    pub __invocation_counter #i32;
    pub __internal_use #i32;
    pub __statep #__mbstate_t*;
    pub __state #__mbstate_t;
}

pub type __gconv_loaded_object;

pub type __gconv_info {
    pub __nsteps #i32;
    pub __steps #__gconv_step*;
    pub __data #[#__gconv_step_data; 0];
}

pub type glob_t {
    pub gl_pathc #u64;
    pub gl_pathv #i8**;
    pub gl_offs #u64;
    pub gl_flags #i32;
    pub gl_closedir #(#void*) #void;
    pub gl_readdir #(#void*) #void*;
    pub gl_opendir #(#i8*) #void*;
    pub gl_lstat #(#i8*, #void*) #i32;
    pub gl_stat #(#i8*, #void*) #i32;
}

pub type group {
    pub gr_name #i8*;
    pub gr_passwd #i8*;
    pub gr_gid #i32;
    pub gr_mem #i8**;
}

pub type sgrp {
    pub sg_namp #i8*;
    pub sg_passwd #i8*;
    pub sg_adm #i8**;
    pub sg_mem #i8**;
}

pub type anon_ieee754_32_5 {
}

pub type anon_ieee754_47_5 {
}

pub union type ieee754_float {
    pub ieee_nan #anon_ieee754_47_5;
}

pub type anon_ieee754_72_5 {
}

pub type anon_ieee754_98_5 {
    pub mantissa1 #u32;
    pub mantissa0 #u32;
    pub quiet_nan #u32;
    pub exponent #u32;
    pub negative #u32;
}

pub union type ieee754_double {
    pub mantissa1 #u32;
    pub mantissa0 #u32;
    pub quiet_nan #u32;
    pub exponent #u32;
    pub negative #u32;
    pub ieee_nan #anon_ieee754_98_5;
}

pub type anon_ieee754_134_5 {
}

pub type anon_ieee754_161_5 {
}

pub union type ieee854_long_double {
    pub ieee_nan #anon_ieee754_161_5;
}

pub union type anon_ifaddrs_38_3 {
    pub ifu_broadaddr #sockaddr*;
    pub ifu_dstaddr #sockaddr*;
}

pub type ifaddrs {
    pub ifu_broadaddr #sockaddr*;
    pub ifu_dstaddr #sockaddr*;
    pub ifa_ifu #anon_ifaddrs_38_3;
    pub ifa_data #void*;
}

pub type imaxdiv_t {
    pub quot #i64;
    pub rem #i64;
}

pub type lastlog {
    pub ll_time #i32;
    pub ll_line #[#i8; 32];
    pub ll_host #[#i8; 256];
}

pub type exit_status {
    pub e_termination #i16;
    pub e_exit #i16;
}

pub type anon_utmp_77_3 {
    pub tv_sec #i32;
    pub tv_usec #i32;
}

pub type utmp {
    pub tv_sec #i32;
    pub tv_usec #i32;
    pub ut_tv #anon_utmp_77_3;
    pub ut_addr_v6 #[#i32; 4];
    pub __glibc_reserved #[#i8; 20];
}

pub union type La_x86_64_vector {
    pub ymm #[#f32*; 2];
    pub zmm #[#f64*; 1];
    pub xmm #[#f32*; 4];
}

pub type La_x86_64_regs {
    pub lr_rdx #u64;
    pub lr_r8 #u64;
    pub lr_r9 #u64;
    pub lr_rcx #u64;
    pub lr_rsi #u64;
    pub lr_rdi #u64;
    pub lr_rbp #u64;
    pub lr_rsp #u64;
    pub lr_xmm #[#f32*; 8];
    pub lr_vector #[#La_x86_64_vector; 8];
    pub __glibc_unused1 #[#i128; 4];
}

pub type La_x86_64_retval {
    pub lrv_rax #u64;
    pub lrv_rdx #u64;
    pub lrv_xmm0 #f32*;
    pub lrv_xmm1 #f32*;
    pub lrv_st0 #f64;
    pub lrv_st1 #f64;
    pub lrv_vector0 #La_x86_64_vector;
    pub lrv_vector1 #La_x86_64_vector;
    pub __glibc_unused1 #i128;
    pub __glibc_unused2 #i128;
}

pub type r_debug {
    pub r_version #i32;
    pub r_map #link_map*;
    pub r_brk #u64;
    pub r_state #anon_link_53_5;
    pub r_ldbase #u64;
}

pub type r_debug_extended {
    pub base #r_debug;
    pub r_next #r_debug_extended*;
}

pub type link_map {
    pub l_addr #u64;
    pub l_name #i8*;
    pub l_ld #Elf64_Dyn*;
    pub l_next #link_map*;
    pub l_prev #link_map*;
}

pub type lconv {
    pub decimal_point #i8*;
    pub thousands_sep #i8*;
    pub grouping #i8*;
    pub int_curr_symbol #i8*;
    pub currency_symbol #i8*;
    pub mon_decimal_point #i8*;
    pub mon_thousands_sep #i8*;
    pub mon_grouping #i8*;
    pub positive_sign #i8*;
    pub negative_sign #i8*;
    pub int_frac_digits #i8;
    pub frac_digits #i8;
    pub p_cs_precedes #i8;
    pub p_sep_by_space #i8;
    pub n_cs_precedes #i8;
    pub n_sep_by_space #i8;
    pub p_sign_posn #i8;
    pub n_sign_posn #i8;
    pub int_p_cs_precedes #i8;
    pub int_p_sep_by_space #i8;
    pub int_n_cs_precedes #i8;
    pub int_n_sep_by_space #i8;
    pub int_p_sign_posn #i8;
    pub int_n_sign_posn #i8;
}

pub type mallinfo {
    pub arena #i32;
    pub ordblks #i32;
    pub smblks #i32;
    pub hblks #i32;
    pub hblkhd #i32;
    pub usmblks #i32;
    pub fsmblks #i32;
    pub uordblks #i32;
    pub fordblks #i32;
    pub keepcost #i32;
}

pub type mallinfo2 {
    pub arena #u64;
    pub ordblks #u64;
    pub smblks #u64;
    pub hblks #u64;
    pub hblkhd #u64;
    pub usmblks #u64;
    pub fsmblks #u64;
    pub uordblks #u64;
    pub fordblks #u64;
    pub keepcost #u64;
}

pub type mntent {
    pub mnt_fsname #i8*;
    pub mnt_dir #i8*;
    pub mnt_type #i8*;
    pub mnt_opts #i8*;
    pub mnt_freq #i32;
    pub mnt_passno #i32;
}

pub type mq_attr {
    pub mq_flags #i32;
    pub mq_maxmsg #i32;
    pub mq_msgsize #i32;
    pub mq_curmsgs #i32;
    pub __pad #[#i32; 4];
}

pub type in_addr {
    pub s_addr #u32;
}

pub union type anon_in_223_5 {
    pub __u6_addr8 #[#u8; 16];
    pub __u6_addr16 #[#u16; 8];
    pub __u6_addr32 #[#u32; 4];
}

pub type in6_addr {
    pub __u6_addr8 #[#u8; 16];
    pub __u6_addr16 #[#u16; 8];
    pub __u6_addr32 #[#u32; 4];
    pub __in6_u #anon_in_223_5;
}

pub type sockaddr_in {
    pub __SOCKADDR_COMMON #() #i32;
    pub sin_port #u16;
    pub sin_addr #in_addr;
    pub sin_zero #u8;
}

pub type sockaddr_in6 {
    pub __SOCKADDR_COMMON #() #i32;
    pub sin6_port #u16;
    pub sin6_flowinfo #u32;
    pub sin6_addr #in6_addr;
    pub sin6_scope_id #u32;
}

pub type ip_mreq {
    pub imr_multiaddr #in_addr;
    pub imr_interface #in_addr;
}

pub type ip_mreqn {
    pub imr_multiaddr #in_addr;
    pub imr_address #in_addr;
    pub imr_ifindex #i32;
}

pub type ip_mreq_source {
    pub imr_multiaddr #in_addr;
    pub imr_interface #in_addr;
    pub imr_sourceaddr #in_addr;
}

pub type ipv6_mreq {
    pub ipv6mr_multiaddr #in6_addr;
    pub ipv6mr_interface #u32;
}

pub type group_req {
    pub gr_interface #u32;
    pub gr_group #sockaddr_storage;
}

pub type group_source_req {
    pub gsr_interface #u32;
    pub gsr_group #sockaddr_storage;
    pub gsr_source #sockaddr_storage;
}

pub type ip_msfilter {
    pub imsf_multiaddr #in_addr;
    pub imsf_interface #in_addr;
    pub imsf_fmode #u32;
    pub imsf_numsrc #u32;
    pub imsf_slist #[#in_addr; 1];
}

pub type group_filter {
    pub gf_interface #u32;
    pub gf_group #sockaddr_storage;
    pub gf_fmode #u32;
    pub gf_numsrc #u32;
    pub gf_slist #i32;
}

pub type rpcent {
    pub r_name #i8*;
    pub r_aliases #i8**;
    pub r_number #i32;
}

pub type netent {
    pub n_name #i8*;
    pub n_aliases #i8**;
    pub n_addrtype #i32;
    pub n_net #u32;
}

pub type hostent {
    pub h_name #i8*;
    pub h_aliases #i8**;
    pub h_addrtype #i32;
    pub h_length #i32;
    pub h_addr_list #i8**;
}

pub type servent {
    pub s_name #i8*;
    pub s_aliases #i8**;
    pub s_port #i32;
    pub s_proto #i8*;
}

pub type protoent {
    pub p_name #i8*;
    pub p_aliases #i8**;
    pub p_proto #i32;
}

pub type addrinfo {
    pub ai_flags #i32;
    pub ai_family #i32;
    pub ai_socktype #i32;
    pub ai_protocol #i32;
    pub ai_addrlen #i32;
    pub ai_addr #sockaddr*;
    pub ai_canonname #i8*;
    pub ai_next #addrinfo*;
}

pub type gaih_addrtuple {
    pub next #gaih_addrtuple*;
    pub name #i8*;
    pub family #i32;
    pub addr #[#u32; 4];
    pub scopeid #u32;
}

pub type __netgrent;

pub type ether_addr;

pub type etherent;

pub type passwd {
    pub pw_name #i8*;
    pub pw_passwd #i8*;
    pub pw_uid #i32;
    pub pw_gid #i32;
    pub pw_gecos #i8*;
    pub pw_dir #i8*;
    pub pw_shell #i8*;
}

pub type spwd {
    pub sp_namp #i8*;
    pub sp_pwdp #i8*;
    pub sp_lstchg #i64;
    pub sp_min #i64;
    pub sp_max #i64;
    pub sp_warn #i64;
    pub sp_inact #i64;
    pub sp_expire #i64;
    pub sp_flag #u64;
}

pub type traced_file;

pub type _obstack_chunk {
    pub limit #i8*;
    pub prev #_obstack_chunk*;
    pub contents #[#i8; 4];
}

pub union type anon_obstack_160_3 {
    pub tempint #i64;
    pub tempptr #void*;
}

pub type obstack {
    pub tempint #i64;
    pub tempptr #void*;
    pub temp #anon_obstack_160_3;
    pub alignment_mask #i32;
    pub chunkfun #(#void*, #i64) #_obstack_chunk*;
    pub freefun #(#void*, #_obstack_chunk*) #void;
    pub extra_arg #void*;
    pub use_extra_arg #u32;
    pub maybe_empty_object #u32;
    pub alloc_failed #u32;
}

pub type pollfd {
    pub fd #i32;
    pub events #i16;
    pub revents #i16;
}

pub type printf_info {
    pub prec #i32;
    pub width #i32;
    pub spec #i32;
    pub is_long_double #u32;
    pub is_short #u32;
    pub is_long #u32;
    pub alt #u32;
    pub space #u32;
    pub left #u32;
    pub showsign #u32;
    pub group #u32;
    pub extra #u32;
    pub is_char #u32;
    pub wide #u32;
    pub i18n #u32;
    pub is_binary128 #u32;
    pub __pad #u32;
    pub user #u16;
    pub pad #i32;
}

pub type elf_siginfo {
    pub si_signo #i32;
    pub si_code #i32;
    pub si_errno #i32;
}

pub type elf_prstatus {
    pub pr_info #elf_siginfo;
    pub pr_cursig #i16;
    pub pr_sigpend #u64;
    pub pr_sighold #u64;
    pub pr_pid #i32;
    pub pr_ppid #i32;
    pub pr_pgrp #i32;
    pub pr_sid #i32;
    pub pr_utime #timeval;
    pub pr_stime #timeval;
    pub pr_cutime #timeval;
    pub pr_cstime #timeval;
    pub pr_reg #i32;
    pub pr_fpvalid #i32;
}

pub type elf_prpsinfo {
    pub pr_state #i8;
    pub pr_sname #i8;
    pub pr_zomb #i8;
    pub pr_nice #i8;
    pub pr_flag #u64;
    pub pr_uid #i32;
    pub pr_gid #i32;
    pub pr_pid #i32;
    pub pr_ppid #i32;
    pub pr_pgrp #i32;
    pub pr_sid #i32;
    pub pr_fname #[#i8; 16];
    pub pr_psargs #[#i8; 80];
}

pub type ps_prochandle;

pub type cpu_set_t {
    pub __bits #[#i32; 32];
}

pub type tm {
    pub tm_sec #i32;
    pub tm_min #i32;
    pub tm_hour #i32;
    pub tm_mday #i32;
    pub tm_mon #i32;
    pub tm_year #i32;
    pub tm_wday #i32;
    pub tm_yday #i32;
    pub tm_isdst #i32;
    pub tm_gmtoff #i64;
    pub tm_zone #i8*;
}

pub type itimerspec {
    pub it_interval #timespec;
    pub it_value #timespec;
}

pub union type anon_pthreadtypes_32_9 {
    pub __size #i8;
    pub __align #i32;
}

pub union type anon_pthreadtypes_41_9 {
    pub __size #i8;
    pub __align #i32;
}

pub union type anon_pthreadtypes_67_9 {
    pub __data #__pthread_mutex_s;
    pub __size #i8;
    pub __align #i64;
}

pub union type anon_pthreadtypes_75_9 {
    pub __data #__pthread_cond_s;
    pub __size #i8;
    pub __align #i64;
}

pub union type anon_pthreadtypes_86_9 {
    pub __data #__pthread_rwlock_arch_t;
    pub __size #i8;
    pub __align #i64;
}

pub union type anon_pthreadtypes_93_9 {
    pub __size #i8;
    pub __align #i64;
}

pub union type anon_pthreadtypes_108_9 {
    pub __size #i8;
    pub __align #i64;
}

pub union type anon_pthreadtypes_114_9 {
    pub __size #i8;
    pub __align #i32;
}

pub type __sigset_t {
    pub __val #[#u64; 16];
}

pub type __jmp_buf_tag {
    pub __jmpbuf #[#i64; 8];
    pub __mask_was_saved #i32;
    pub __saved_mask #__sigset_t;
}

pub type _pthread_cleanup_buffer {
    pub __routine #(#void*) #void;
    pub __arg #void*;
    pub __canceltype #i32;
    pub __prev #_pthread_cleanup_buffer*;
}

pub type __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf #[#i64; 8];
    pub __mask_was_saved #i32;
}

pub type __pthread_unwind_buf_t {
    pub __cancel_jmp_buf #[#__cancel_jmp_buf_tag; 1];
    pub __pad #[#void*; 4];
}

pub type __pthread_cleanup_frame {
    pub __cancel_routine #(#void*) #void;
    pub __cancel_arg #void*;
    pub __do_it #i32;
    pub __cancel_type #i32;
}

pub type termios;

pub type winsize;

pub type re_pattern_buffer {
    pub __buffer #re_dfa_t*;
    pub __allocated #u64;
    pub __used #u64;
    pub __syntax #u64;
    pub __fastmap #i8*;
    pub __translate #u8*;
    pub re_nsub #u64;
    pub __can_be_null #u32;
    pub __regs_allocated #u32;
    pub __fastmap_accurate #u32;
    pub __no_sub #u32;
    pub __not_bol #u32;
    pub __not_eol #u32;
    pub __newline_anchor #u32;
}

pub type regmatch_t {
    pub rm_so #i32;
    pub rm_eo #i32;
}

pub type __ns_msg {
    pub _msg #u8*;
    pub _eom #u8*;
    pub _id #u16;
    pub _flags #u16;
    pub _counts #[#u16; 4];
    pub _sections #[#u8*; 4];
    pub _sect #__ns_sect;
    pub _rrnum #i32;
    pub _msg_ptr #u8*;
}

pub type _ns_flagdata {
    pub mask #i32;
    pub shift #i32;
}

pub type __ns_rr {
    pub name #[#i8; 1025];
    pub type #u16;
    pub rr_class #u16;
    pub ttl #u32;
    pub rdlength #u16;
    pub rdata #u8*;
}

pub type ns_tsig_key {
    pub name #[#i8; 1025];
    pub alg #[#i8; 1025];
    pub data #u8*;
    pub len #i32;
}

pub type ns_tcp_tsig_state {
    pub counter #i32;
    pub key #dst_key*;
    pub ctx #void*;
    pub sig #[#u8; 512];
    pub siglen #i32;
}

pub type anon_res_state_29_2 {
    pub addr #in_addr;
    pub mask #u32;
}

pub type anon_res_state_42_3 {
    pub nscount #u16;
    pub nsmap #[#u16; 3];
    pub nssocks #[#i32; 3];
    pub nscount6 #u16;
    pub nsinit #u16;
    pub nsaddrs #[#sockaddr_in6*; 3];
    pub __glibc_reserved #[#u32; 2];
}

pub union type anon_res_state_40_2 {
    pub nscount #u16;
    pub nsmap #[#u16; 3];
    pub nssocks #[#i32; 3];
    pub nscount6 #u16;
    pub nsinit #u16;
    pub nsaddrs #[#sockaddr_in6*; 3];
    pub __glibc_reserved #[#u32; 2];
    pub _ext #anon_res_state_42_3;
}

pub type __res_state {
    pub nscount #u16;
    pub nsmap #[#u16; 3];
    pub nssocks #[#i32; 3];
    pub nscount6 #u16;
    pub nsinit #u16;
    pub nsaddrs #[#sockaddr_in6*; 3];
    pub __glibc_reserved #[#u32; 2];
    pub _ext #anon_res_state_42_3;
    pub _u #anon_res_state_40_2;
}

pub type res_sym {
    pub number #i32;
    pub name #i8*;
    pub humanname #i8*;
}

pub type entry {
    pub key #i8*;
    pub data #void*;
}

pub type _ENTRY;

pub union type sem_t {
    pub __size #[#i8; 32];
    pub __align #i64;
}

pub type sgttyb;

pub type anon_siginfo_t_56_2 {
    pub si_pid #i32;
    pub si_uid #i32;
}

pub type anon_siginfo_t_63_2 {
    pub si_tid #i32;
    pub si_overrun #i32;
    pub si_sigval #i32;
}

pub type anon_siginfo_t_71_2 {
    pub si_pid #i32;
    pub si_uid #i32;
    pub si_sigval #i32;
}

pub type anon_siginfo_t_79_2 {
    pub si_pid #i32;
    pub si_uid #i32;
    pub si_status #i32;
    pub si_utime #i32;
    pub si_stime #i32;
}

pub type anon_siginfo_t_97_3 {
    pub _lower #void*;
    pub _upper #void*;
}

pub union type anon_siginfo_t_94_6 {
    pub _lower #void*;
    pub _upper #void*;
    pub _addr_bnd #anon_siginfo_t_97_3;
    pub _pkey #u32;
}

pub type anon_siginfo_t_89_2 {
    pub _lower #void*;
    pub _upper #void*;
    pub _addr_bnd #anon_siginfo_t_97_3;
    pub _pkey #u32;
    pub _bounds #anon_siginfo_t_94_6;
}

pub type anon_siginfo_t_108_2 {
    pub si_band #i64;
    pub si_fd #i32;
}

pub type anon_siginfo_t_116_2 {
    pub _call_addr #void*;
    pub _syscall #i32;
    pub _arch #u32;
}

pub union type anon_siginfo_t_51_5 {
    pub _call_addr #void*;
    pub _syscall #i32;
    pub _arch #u32;
    pub _sigsys #anon_siginfo_t_116_2;
}

pub type anon_siginfo_t_36_9 {
    pub _call_addr #void*;
    pub _syscall #i32;
    pub _arch #u32;
    pub _sigsys #anon_siginfo_t_116_2;
    pub _sifields #anon_siginfo_t_51_5;
}

pub union type anon_sigaction_31_5 {
    pub _call_addr #void*;
    pub _syscall #i32;
    pub _arch #u32;
    pub _sigsys #anon_siginfo_t_116_2;
    pub _sifields #anon_siginfo_t_51_5;
    pub sa_sigaction #(#i32, #anon_siginfo_t_36_9*, #void*) #void;
}

pub type sigaction {
    pub _call_addr #void*;
    pub _syscall #i32;
    pub _arch #u32;
    pub _sigsys #anon_siginfo_t_116_2;
    pub _sifields #anon_siginfo_t_51_5;
    pub sa_sigaction #(#i32, #anon_siginfo_t_36_9*, #void*) #void;
    pub __sigaction_handler #anon_sigaction_31_5;
    pub sa_mask #__sigset_t;
    pub sa_flags #i32;
    pub sa_restorer #() #void;
}

pub type _fpx_sw_bytes {
    pub magic1 #u32;
    pub extended_size #u32;
    pub xstate_bv #u64;
    pub xstate_size #u32;
    pub __glibc_reserved1 #[#u32; 7];
}

pub type _fpreg {
    pub significand #[#u16; 4];
    pub exponent #u16;
}

pub type _fpxreg {
    pub significand #[#u16; 4];
    pub exponent #u16;
    pub __glibc_reserved1 #[#u16; 3];
}

pub type _xmmreg {
    pub element #[#u32; 4];
}

pub type _fpstate {
    pub cwd #u16;
    pub swd #u16;
    pub ftw #u16;
    pub fop #u16;
    pub rip #u64;
    pub rdp #u64;
    pub mxcsr #u32;
    pub mxcr_mask #u32;
    pub _st #[#_fpxreg; 8];
    pub _xmm #[#_xmmreg; 16];
    pub __glibc_reserved1 #[#u32; 24];
}

pub type sigcontext {
    pub r8 #u64;
    pub r9 #u64;
    pub r10 #u64;
    pub r11 #u64;
    pub r12 #u64;
    pub r13 #u64;
    pub r14 #u64;
    pub r15 #u64;
    pub rdi #u64;
    pub rsi #u64;
    pub rbp #u64;
    pub rbx #u64;
    pub rdx #u64;
    pub rax #u64;
    pub rcx #u64;
    pub rsp #u64;
    pub rip #u64;
    pub eflags #u64;
    pub cs #u16;
    pub gs #u16;
    pub fs #u16;
    pub __pad0 #u16;
    pub err #u64;
    pub trapno #u64;
    pub oldmask #u64;
    pub cr2 #u64;
    pub __reserved1 #[#u64; 8];
}

pub type _xsave_hdr {
    pub xstate_bv #u64;
    pub __glibc_reserved1 #[#u64; 2];
    pub __glibc_reserved2 #[#u64; 5];
}

pub type _ymmh_state {
    pub ymmh_space #[#u32; 64];
}

pub type _xstate {
    pub fpstate #_fpstate;
    pub xstate_hdr #_xsave_hdr;
    pub ymmh #_ymmh_state;
}

pub type stack_t {
    pub ss_sp #void*;
    pub ss_flags #i32;
    pub ss_size #u64;
}

pub type _libc_fpxreg {
    pub significand #[#u16; 4];
    pub exponent #u16;
    pub __glibc_reserved1 #[#u16; 3];
}

pub type _libc_xmmreg {
    pub element #[#u32; 4];
}

pub type _libc_fpstate {
    pub cwd #u16;
    pub swd #u16;
    pub ftw #u16;
    pub fop #u16;
    pub rip #u64;
    pub rdp #u64;
    pub mxcsr #u32;
    pub mxcr_mask #u32;
    pub _st #[#_libc_fpxreg; 8];
    pub _xmm #[#_libc_xmmreg; 16];
    pub __glibc_reserved1 #[#u32; 24];
}

pub type mcontext_t {
    pub gregs #[#i64; 23];
    pub fpregs #_libc_fpstate*;
    pub __reserved1 #[#u64; 8];
}

pub type ucontext_t {
    pub uc_flags #u64;
    pub uc_link #ucontext_t*;
    pub uc_stack #stack_t;
    pub uc_mcontext #mcontext_t;
    pub uc_sigmask #__sigset_t;
    pub __fpregs_mem #_libc_fpstate;
    pub __ssp #[#u64; 4];
}

pub type sigstack {
    pub ss_sp #void*;
    pub ss_onstack #i32;
}

pub type anon_spawn_29_9 {
    pub __flags #i16;
    pub __pgrp #i32;
    pub __sd #__sigset_t;
    pub __ss #__sigset_t;
    pub __sp #sched_param;
    pub __policy #i32;
    pub __pad #[#i32; 16];
}

pub type posix_spawn_file_actions_t {
    pub __allocated #i32;
    pub __used #i32;
    pub __actions #__spawn_action*;
    pub __pad #[#i32; 16];
}

pub type div_t {
    pub quot #i32;
    pub rem #i32;
}

pub type ldiv_t {
    pub quot #i64;
    pub rem #i64;
}

pub type lldiv_t {
    pub quot #i64;
    pub rem #i64;
}

pub type random_data {
    pub fptr #i32*;
    pub rptr #i32*;
    pub state #i32*;
    pub rand_type #i32;
    pub rand_deg #i32;
    pub rand_sep #i32;
    pub end_ptr #i32*;
}

pub type drand48_data {
    pub __x #[#u16; 3];
    pub __old_x #[#u16; 3];
    pub __c #u16;
    pub __init #u16;
    pub __a #u64;
}

pub type td_thragent;

pub type td_thrhandle {
    pub th_ta_p #td_thragent*;
    pub th_unique #void*;
}

pub type td_thr_events {
    pub event_bits #[#u32; 2];
}

pub union type anon_thread_db_190_3 {
    pub bptaddr #void*;
    pub syscallno #i32;
}

pub type td_notify {
    pub bptaddr #void*;
    pub syscallno #i32;
    pub u #anon_thread_db_190_3;
}

pub union type anon_thread_db_202_3 {
    pub data #u64;
}

pub type td_event_msg {
    pub data #u64;
    pub msg #anon_thread_db_202_3;
}

pub type td_eventbuf_t {
    pub eventmask #td_thr_events;
    pub eventnum #td_event_e;
    pub eventdata #void*;
}

pub type td_ta_stats {
    pub nthreads #i32;
    pub r_concurrency #i32;
    pub nrunnable_num #i32;
    pub nrunnable_den #i32;
    pub a_concurrency_num #i32;
    pub a_concurrency_den #i32;
    pub nlwps_num #i32;
    pub nlwps_den #i32;
    pub nidle_num #i32;
    pub nidle_den #i32;
}

pub type td_thrinfo {
    pub ti_ta_p #td_thragent*;
    pub ti_user_flags #u32;
    pub ti_tid #u64;
    pub ti_tls #i8*;
    pub ti_startfunc #void*;
    pub ti_stkbase #void*;
    pub ti_stksize #i64;
    pub ti_ro_area #void*;
    pub ti_ro_size #i32;
    pub ti_state #td_thr_state_e;
    pub ti_db_suspended #u8;
    pub ti_type #td_thr_type_e;
    pub ti_pc #i64;
    pub ti_sp #i64;
    pub ti_flags #i16;
    pub ti_pri #i32;
    pub ti_lid #i32;
    pub ti_sigmask #__sigset_t;
    pub ti_traceme #u8;
    pub ti_preemptflag #u8;
    pub ti_pirecflag #u8;
    pub ti_pending #__sigset_t;
    pub ti_events #td_thr_events;
}

pub type __pthread_internal_list {
    pub __prev #__pthread_internal_list*;
    pub __next #__pthread_internal_list*;
}

pub type __pthread_internal_slist {
    pub __next #__pthread_internal_slist*;
}

pub type __pthread_cond_s {
    pub __wseq #i32;
    pub __g1_start #i32;
    pub __g_refs #[#u32; 2];
    pub __g_size #[#u32; 2];
    pub __g1_orig_size #u32;
    pub __wrefs #u32;
    pub __g_signals #[#u32; 2];
}

pub type __once_flag {
    pub __data #i32;
}

pub union type anon_threads_64_9 {
    pub __size #i8;
    pub __align #i64;
}

pub union type anon_threads_70_9 {
    pub __size #i8;
    pub __align #i64;
}

pub type ttyent {
    pub ty_name #i8*;
    pub ty_getty #i8*;
    pub ty_type #i8*;
    pub ty_status #i32;
    pub ty_window #i8*;
    pub ty_comment #i8*;
}

pub type utimbuf {
    pub actime #i32;
    pub modtime #i32;
}

pub type timezone {
    pub tz_minuteswest #i32;
    pub tz_dsttime #i32;
}

pub type itimerval {
    pub it_interval #timeval;
    pub it_value #timeval;
}

pub type __exit_status {
    pub __e_termination #i16;
    pub __e_exit #i16;
}

pub type anon_utmpx_75_3 {
    pub tv_sec #i32;
    pub tv_usec #i32;
}

pub type utmpx {
    pub tv_sec #i32;
    pub tv_usec #i32;
    pub ut_tv #anon_utmpx_75_3;
    pub ut_addr_v6 #[#i32; 4];
    pub __glibc_reserved #[#i8; 20];
}

pub type rusage;

pub type wordexp_t {
    pub we_wordc #u64;
    pub we_wordv #i8**;
    pub we_offs #u64;
}

pub enum machine_type {
    M_OLDSUN2 = 0,
    M_68010 = 1,
    M_68020 = 2,
    M_SPARC = 3,
    M_386 = 100,
    M_MIPS1 = 151,
    M_MIPS2 = 152,
}

pub enum anon_sigevent_consts_27_1 {
    SIGEV_SIGNAL = 0,
    SIGEV_NONE = 1,
    SIGEV_THREAD = 2,
    SIGEV_THREAD_ID = 4,
}

pub enum anon_aio_102_1 {
    AIO_CANCELED = 0,
    AIO_NOTCANCELED = 1,
    AIO_ALLDONE = 2,
}

pub enum anon_aio_114_1 {
    LIO_READ = 0,
    LIO_WRITE = 1,
    LIO_NOP = 2,
}

pub enum anon_aio_126_1 {
    LIO_WAIT = 0,
    LIO_NOWAIT = 1,
}

pub enum anon_ctype_46_1 {
    _ISupper = 256,
    _ISlower = 512,
    _ISalpha = 1024,
    _ISdigit = 2048,
    _ISxdigit = 4096,
    _ISspace = 8192,
    _ISprint = 16384,
    _ISgraph = 32768,
    _ISblank = 1,
    _IScntrl = 2,
    _ISpunct = 4,
    _ISalnum = 8,
}

pub enum anon_dirent_97_1 {
    DT_UNKNOWN = 0,
    DT_FIFO = 1,
    DT_CHR = 2,
    DT_DIR = 4,
    DT_BLK = 6,
    DT_REG = 8,
    DT_LNK = 10,
    DT_SOCK = 12,
    DT_WHT = 14,
}

pub enum anon_elf_2146_1 {
    Val_GNU_MIPS_ABI_FP_ANY = 0,
    Val_GNU_MIPS_ABI_FP_DOUBLE = 1,
    Val_GNU_MIPS_ABI_FP_SINGLE = 2,
    Val_GNU_MIPS_ABI_FP_SOFT = 3,
    Val_GNU_MIPS_ABI_FP_OLD_64 = 4,
    Val_GNU_MIPS_ABI_FP_XX = 5,
    Val_GNU_MIPS_ABI_FP_64 = 6,
    Val_GNU_MIPS_ABI_FP_64A = 7,
    Val_GNU_MIPS_ABI_FP_MAX = 7,
}

pub enum anon_fenv_24_1 {
    FE_INVALID = 1,
    __FE_DENORM = 2,
    FE_DIVBYZERO = 4,
    FE_OVERFLOW = 8,
    FE_UNDERFLOW = 16,
    FE_INEXACT = 32,
}

pub enum anon_fenv_50_1 {
    FE_TONEAREST = 0,
    FE_DOWNWARD = 1024,
    FE_UPWARD = 2048,
    FE_TOWARDZERO = 3072,
}

pub enum anon_fmtmsg_28_1 {
    MM_HARD = 1,
    MM_SOFT = 2,
    MM_FIRM = 4,
    MM_APPL = 8,
    MM_UTIL = 16,
    MM_OPSYS = 32,
    MM_RECOVER = 64,
    MM_NRECOV = 128,
    MM_PRINT = 256,
    MM_CONSOLE = 512,
}

pub enum anon_fmtmsg_53_1 {
    MM_NOSEV = 0,
    MM_HALT = 1,
    MM_ERROR = 2,
    MM_WARNING = 3,
    MM_INFO = 4,
}

pub enum anon_fmtmsg_79_1 {
    MM_NOTOK = 4294967295,
    MM_OK = 0,
    MM_NOMSG = 1,
    MM_NOCON = 4,
}

pub enum anon_ftw_35_1 {
    FTW_F = 0,
    FTW_D = 1,
    FTW_DNR = 2,
    FTW_NS = 3,
    FTW_SL = 4,
}

pub enum anon_gconv_37_1 {
    __GCONV_OK = 0,
    __GCONV_NOCONV = 1,
    __GCONV_NODB = 2,
    __GCONV_NOMEM = 3,
    __GCONV_EMPTY_INPUT = 4,
    __GCONV_FULL_OUTPUT = 5,
    __GCONV_ILLEGAL_INPUT = 6,
    __GCONV_INCOMPLETE_INPUT = 7,
    __GCONV_ILLEGAL_DESCRIPTOR = 8,
    __GCONV_INTERNAL_ERROR = 9,
}

pub enum anon_gconv_55_1 {
    __GCONV_IS_LAST = 1,
    __GCONV_IGNORE_ERRORS = 2,
    __GCONV_SWAP = 4,
    __GCONV_TRANSLIT = 8,
}

pub enum anon_socket_41_1 {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2,
}

pub enum anon_langinfo_41_1 {
    ABDAY_1 = 131072,
    ABDAY_2 = 131073,
    ABDAY_3 = 131074,
    ABDAY_4 = 131075,
    ABDAY_5 = 131076,
    ABDAY_6 = 131077,
    ABDAY_7 = 131078,
    DAY_1 = 131079,
    DAY_2 = 131080,
    DAY_3 = 131081,
    DAY_4 = 131082,
    DAY_5 = 131083,
    DAY_6 = 131084,
    DAY_7 = 131085,
    ABMON_1 = 131086,
    ABMON_2 = 131087,
    ABMON_3 = 131088,
    ABMON_4 = 131089,
    ABMON_5 = 131090,
    ABMON_6 = 131091,
    ABMON_7 = 131092,
    ABMON_8 = 131093,
    ABMON_9 = 131094,
    ABMON_10 = 131095,
    ABMON_11 = 131096,
    ABMON_12 = 131097,
    MON_1 = 131098,
    MON_2 = 131099,
    MON_3 = 131100,
    MON_4 = 131101,
    MON_5 = 131102,
    MON_6 = 131103,
    MON_7 = 131104,
    MON_8 = 131105,
    MON_9 = 131106,
    MON_10 = 131107,
    MON_11 = 131108,
    MON_12 = 131109,
    AM_STR = 131110,
    PM_STR = 131111,
    D_T_FMT = 131112,
    D_FMT = 131113,
    T_FMT = 131114,
    T_FMT_AMPM = 131115,
    ERA = 131116,
    __ERA_YEAR = 131117,
    ERA_D_FMT = 131118,
    ALT_DIGITS = 131119,
    ERA_D_T_FMT = 131120,
    ERA_T_FMT = 131121,
    _NL_TIME_ERA_NUM_ENTRIES = 131122,
    _NL_TIME_ERA_ENTRIES = 131123,
    _NL_WABDAY_1 = 131124,
    _NL_WABDAY_2 = 131125,
    _NL_WABDAY_3 = 131126,
    _NL_WABDAY_4 = 131127,
    _NL_WABDAY_5 = 131128,
    _NL_WABDAY_6 = 131129,
    _NL_WABDAY_7 = 131130,
    _NL_WDAY_1 = 131131,
    _NL_WDAY_2 = 131132,
    _NL_WDAY_3 = 131133,
    _NL_WDAY_4 = 131134,
    _NL_WDAY_5 = 131135,
    _NL_WDAY_6 = 131136,
    _NL_WDAY_7 = 131137,
    _NL_WABMON_1 = 131138,
    _NL_WABMON_2 = 131139,
    _NL_WABMON_3 = 131140,
    _NL_WABMON_4 = 131141,
    _NL_WABMON_5 = 131142,
    _NL_WABMON_6 = 131143,
    _NL_WABMON_7 = 131144,
    _NL_WABMON_8 = 131145,
    _NL_WABMON_9 = 131146,
    _NL_WABMON_10 = 131147,
    _NL_WABMON_11 = 131148,
    _NL_WABMON_12 = 131149,
    _NL_WMON_1 = 131150,
    _NL_WMON_2 = 131151,
    _NL_WMON_3 = 131152,
    _NL_WMON_4 = 131153,
    _NL_WMON_5 = 131154,
    _NL_WMON_6 = 131155,
    _NL_WMON_7 = 131156,
    _NL_WMON_8 = 131157,
    _NL_WMON_9 = 131158,
    _NL_WMON_10 = 131159,
    _NL_WMON_11 = 131160,
    _NL_WMON_12 = 131161,
    _NL_WAM_STR = 131162,
    _NL_WPM_STR = 131163,
    _NL_WD_T_FMT = 131164,
    _NL_WD_FMT = 131165,
    _NL_WT_FMT = 131166,
    _NL_WT_FMT_AMPM = 131167,
    _NL_WERA_YEAR = 131168,
    _NL_WERA_D_FMT = 131169,
    _NL_WALT_DIGITS = 131170,
    _NL_WERA_D_T_FMT = 131171,
    _NL_WERA_T_FMT = 131172,
    _NL_TIME_WEEK_NDAYS = 131173,
    _NL_TIME_WEEK_1STDAY = 131174,
    _NL_TIME_WEEK_1STWEEK = 131175,
    _NL_TIME_FIRST_WEEKDAY = 131176,
    _NL_TIME_FIRST_WORKDAY = 131177,
    _NL_TIME_CAL_DIRECTION = 131178,
    _NL_TIME_TIMEZONE = 131179,
    _DATE_FMT = 131180,
    _NL_W_DATE_FMT = 131181,
    _NL_TIME_CODESET = 131182,
    __ALTMON_1 = 131183,
    __ALTMON_2 = 131184,
    __ALTMON_3 = 131185,
    __ALTMON_4 = 131186,
    __ALTMON_5 = 131187,
    __ALTMON_6 = 131188,
    __ALTMON_7 = 131189,
    __ALTMON_8 = 131190,
    __ALTMON_9 = 131191,
    __ALTMON_10 = 131192,
    __ALTMON_11 = 131193,
    __ALTMON_12 = 131194,
    _NL_WALTMON_1 = 131195,
    _NL_WALTMON_2 = 131196,
    _NL_WALTMON_3 = 131197,
    _NL_WALTMON_4 = 131198,
    _NL_WALTMON_5 = 131199,
    _NL_WALTMON_6 = 131200,
    _NL_WALTMON_7 = 131201,
    _NL_WALTMON_8 = 131202,
    _NL_WALTMON_9 = 131203,
    _NL_WALTMON_10 = 131204,
    _NL_WALTMON_11 = 131205,
    _NL_WALTMON_12 = 131206,
    _NL_ABALTMON_1 = 131207,
    _NL_ABALTMON_2 = 131208,
    _NL_ABALTMON_3 = 131209,
    _NL_ABALTMON_4 = 131210,
    _NL_ABALTMON_5 = 131211,
    _NL_ABALTMON_6 = 131212,
    _NL_ABALTMON_7 = 131213,
    _NL_ABALTMON_8 = 131214,
    _NL_ABALTMON_9 = 131215,
    _NL_ABALTMON_10 = 131216,
    _NL_ABALTMON_11 = 131217,
    _NL_ABALTMON_12 = 131218,
    _NL_WABALTMON_1 = 131219,
    _NL_WABALTMON_2 = 131220,
    _NL_WABALTMON_3 = 131221,
    _NL_WABALTMON_4 = 131222,
    _NL_WABALTMON_5 = 131223,
    _NL_WABALTMON_6 = 131224,
    _NL_WABALTMON_7 = 131225,
    _NL_WABALTMON_8 = 131226,
    _NL_WABALTMON_9 = 131227,
    _NL_WABALTMON_10 = 131228,
    _NL_WABALTMON_11 = 131229,
    _NL_WABALTMON_12 = 131230,
    _NL_NUM_LC_TIME = 131231,
    _NL_COLLATE_NRULES = 196608,
    _NL_COLLATE_RULESETS = 196609,
    _NL_COLLATE_TABLEMB = 196610,
    _NL_COLLATE_WEIGHTMB = 196611,
    _NL_COLLATE_EXTRAMB = 196612,
    _NL_COLLATE_INDIRECTMB = 196613,
    _NL_COLLATE_GAP1 = 196614,
    _NL_COLLATE_GAP2 = 196615,
    _NL_COLLATE_GAP3 = 196616,
    _NL_COLLATE_TABLEWC = 196617,
    _NL_COLLATE_WEIGHTWC = 196618,
    _NL_COLLATE_EXTRAWC = 196619,
    _NL_COLLATE_INDIRECTWC = 196620,
    _NL_COLLATE_SYMB_HASH_SIZEMB = 196621,
    _NL_COLLATE_SYMB_TABLEMB = 196622,
    _NL_COLLATE_SYMB_EXTRAMB = 196623,
    _NL_COLLATE_COLLSEQMB = 196624,
    _NL_COLLATE_COLLSEQWC = 196625,
    _NL_COLLATE_CODESET = 196626,
    _NL_NUM_LC_COLLATE = 196627,
    _NL_CTYPE_CLASS = 0,
    _NL_CTYPE_TOUPPER = 1,
    _NL_CTYPE_GAP1 = 2,
    _NL_CTYPE_TOLOWER = 3,
    _NL_CTYPE_GAP2 = 4,
    _NL_CTYPE_CLASS32 = 5,
    _NL_CTYPE_GAP3 = 6,
    _NL_CTYPE_GAP4 = 7,
    _NL_CTYPE_GAP5 = 8,
    _NL_CTYPE_GAP6 = 9,
    _NL_CTYPE_CLASS_NAMES = 10,
    _NL_CTYPE_MAP_NAMES = 11,
    _NL_CTYPE_WIDTH = 12,
    _NL_CTYPE_MB_CUR_MAX = 13,
    _NL_CTYPE_CODESET_NAME = 14,
    CODESET = 14,
    _NL_CTYPE_TOUPPER32 = 15,
    _NL_CTYPE_TOLOWER32 = 16,
    _NL_CTYPE_CLASS_OFFSET = 17,
    _NL_CTYPE_MAP_OFFSET = 18,
    _NL_CTYPE_INDIGITS_MB_LEN = 19,
    _NL_CTYPE_INDIGITS0_MB = 20,
    _NL_CTYPE_INDIGITS1_MB = 21,
    _NL_CTYPE_INDIGITS2_MB = 22,
    _NL_CTYPE_INDIGITS3_MB = 23,
    _NL_CTYPE_INDIGITS4_MB = 24,
    _NL_CTYPE_INDIGITS5_MB = 25,
    _NL_CTYPE_INDIGITS6_MB = 26,
    _NL_CTYPE_INDIGITS7_MB = 27,
    _NL_CTYPE_INDIGITS8_MB = 28,
    _NL_CTYPE_INDIGITS9_MB = 29,
    _NL_CTYPE_INDIGITS_WC_LEN = 30,
    _NL_CTYPE_INDIGITS0_WC = 31,
    _NL_CTYPE_INDIGITS1_WC = 32,
    _NL_CTYPE_INDIGITS2_WC = 33,
    _NL_CTYPE_INDIGITS3_WC = 34,
    _NL_CTYPE_INDIGITS4_WC = 35,
    _NL_CTYPE_INDIGITS5_WC = 36,
    _NL_CTYPE_INDIGITS6_WC = 37,
    _NL_CTYPE_INDIGITS7_WC = 38,
    _NL_CTYPE_INDIGITS8_WC = 39,
    _NL_CTYPE_INDIGITS9_WC = 40,
    _NL_CTYPE_OUTDIGIT0_MB = 41,
    _NL_CTYPE_OUTDIGIT1_MB = 42,
    _NL_CTYPE_OUTDIGIT2_MB = 43,
    _NL_CTYPE_OUTDIGIT3_MB = 44,
    _NL_CTYPE_OUTDIGIT4_MB = 45,
    _NL_CTYPE_OUTDIGIT5_MB = 46,
    _NL_CTYPE_OUTDIGIT6_MB = 47,
    _NL_CTYPE_OUTDIGIT7_MB = 48,
    _NL_CTYPE_OUTDIGIT8_MB = 49,
    _NL_CTYPE_OUTDIGIT9_MB = 50,
    _NL_CTYPE_OUTDIGIT0_WC = 51,
    _NL_CTYPE_OUTDIGIT1_WC = 52,
    _NL_CTYPE_OUTDIGIT2_WC = 53,
    _NL_CTYPE_OUTDIGIT3_WC = 54,
    _NL_CTYPE_OUTDIGIT4_WC = 55,
    _NL_CTYPE_OUTDIGIT5_WC = 56,
    _NL_CTYPE_OUTDIGIT6_WC = 57,
    _NL_CTYPE_OUTDIGIT7_WC = 58,
    _NL_CTYPE_OUTDIGIT8_WC = 59,
    _NL_CTYPE_OUTDIGIT9_WC = 60,
    _NL_CTYPE_TRANSLIT_TAB_SIZE = 61,
    _NL_CTYPE_TRANSLIT_FROM_IDX = 62,
    _NL_CTYPE_TRANSLIT_FROM_TBL = 63,
    _NL_CTYPE_TRANSLIT_TO_IDX = 64,
    _NL_CTYPE_TRANSLIT_TO_TBL = 65,
    _NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN = 66,
    _NL_CTYPE_TRANSLIT_DEFAULT_MISSING = 67,
    _NL_CTYPE_TRANSLIT_IGNORE_LEN = 68,
    _NL_CTYPE_TRANSLIT_IGNORE = 69,
    _NL_CTYPE_MAP_TO_NONASCII = 70,
    _NL_CTYPE_NONASCII_CASE = 71,
    _NL_CTYPE_EXTRA_MAP_1 = 72,
    _NL_CTYPE_EXTRA_MAP_2 = 73,
    _NL_CTYPE_EXTRA_MAP_3 = 74,
    _NL_CTYPE_EXTRA_MAP_4 = 75,
    _NL_CTYPE_EXTRA_MAP_5 = 76,
    _NL_CTYPE_EXTRA_MAP_6 = 77,
    _NL_CTYPE_EXTRA_MAP_7 = 78,
    _NL_CTYPE_EXTRA_MAP_8 = 79,
    _NL_CTYPE_EXTRA_MAP_9 = 80,
    _NL_CTYPE_EXTRA_MAP_10 = 81,
    _NL_CTYPE_EXTRA_MAP_11 = 82,
    _NL_CTYPE_EXTRA_MAP_12 = 83,
    _NL_CTYPE_EXTRA_MAP_13 = 84,
    _NL_CTYPE_EXTRA_MAP_14 = 85,
    _NL_NUM_LC_CTYPE = 86,
    __INT_CURR_SYMBOL = 262144,
    __CURRENCY_SYMBOL = 262145,
    __MON_DECIMAL_POINT = 262146,
    __MON_THOUSANDS_SEP = 262147,
    __MON_GROUPING = 262148,
    __POSITIVE_SIGN = 262149,
    __NEGATIVE_SIGN = 262150,
    __INT_FRAC_DIGITS = 262151,
    __FRAC_DIGITS = 262152,
    __P_CS_PRECEDES = 262153,
    __P_SEP_BY_SPACE = 262154,
    __N_CS_PRECEDES = 262155,
    __N_SEP_BY_SPACE = 262156,
    __P_SIGN_POSN = 262157,
    __N_SIGN_POSN = 262158,
    _NL_MONETARY_CRNCYSTR = 262159,
    __INT_P_CS_PRECEDES = 262160,
    __INT_P_SEP_BY_SPACE = 262161,
    __INT_N_CS_PRECEDES = 262162,
    __INT_N_SEP_BY_SPACE = 262163,
    __INT_P_SIGN_POSN = 262164,
    __INT_N_SIGN_POSN = 262165,
    _NL_MONETARY_DUO_INT_CURR_SYMBOL = 262166,
    _NL_MONETARY_DUO_CURRENCY_SYMBOL = 262167,
    _NL_MONETARY_DUO_INT_FRAC_DIGITS = 262168,
    _NL_MONETARY_DUO_FRAC_DIGITS = 262169,
    _NL_MONETARY_DUO_P_CS_PRECEDES = 262170,
    _NL_MONETARY_DUO_P_SEP_BY_SPACE = 262171,
    _NL_MONETARY_DUO_N_CS_PRECEDES = 262172,
    _NL_MONETARY_DUO_N_SEP_BY_SPACE = 262173,
    _NL_MONETARY_DUO_INT_P_CS_PRECEDES = 262174,
    _NL_MONETARY_DUO_INT_P_SEP_BY_SPACE = 262175,
    _NL_MONETARY_DUO_INT_N_CS_PRECEDES = 262176,
    _NL_MONETARY_DUO_INT_N_SEP_BY_SPACE = 262177,
    _NL_MONETARY_DUO_P_SIGN_POSN = 262178,
    _NL_MONETARY_DUO_N_SIGN_POSN = 262179,
    _NL_MONETARY_DUO_INT_P_SIGN_POSN = 262180,
    _NL_MONETARY_DUO_INT_N_SIGN_POSN = 262181,
    _NL_MONETARY_UNO_VALID_FROM = 262182,
    _NL_MONETARY_UNO_VALID_TO = 262183,
    _NL_MONETARY_DUO_VALID_FROM = 262184,
    _NL_MONETARY_DUO_VALID_TO = 262185,
    _NL_MONETARY_CONVERSION_RATE = 262186,
    _NL_MONETARY_DECIMAL_POINT_WC = 262187,
    _NL_MONETARY_THOUSANDS_SEP_WC = 262188,
    _NL_MONETARY_CODESET = 262189,
    _NL_NUM_LC_MONETARY = 262190,
    __DECIMAL_POINT = 65536,
    RADIXCHAR = 65536,
    __THOUSANDS_SEP = 65537,
    THOUSEP = 65537,
    __GROUPING = 65538,
    _NL_NUMERIC_DECIMAL_POINT_WC = 65539,
    _NL_NUMERIC_THOUSANDS_SEP_WC = 65540,
    _NL_NUMERIC_CODESET = 65541,
    _NL_NUM_LC_NUMERIC = 65542,
    __YESEXPR = 327680,
    __NOEXPR = 327681,
    __YESSTR = 327682,
    __NOSTR = 327683,
    _NL_MESSAGES_CODESET = 327684,
    _NL_NUM_LC_MESSAGES = 327685,
    _NL_PAPER_HEIGHT = 458752,
    _NL_PAPER_WIDTH = 458753,
    _NL_PAPER_CODESET = 458754,
    _NL_NUM_LC_PAPER = 458755,
    _NL_NAME_NAME_FMT = 524288,
    _NL_NAME_NAME_GEN = 524289,
    _NL_NAME_NAME_MR = 524290,
    _NL_NAME_NAME_MRS = 524291,
    _NL_NAME_NAME_MISS = 524292,
    _NL_NAME_NAME_MS = 524293,
    _NL_NAME_CODESET = 524294,
    _NL_NUM_LC_NAME = 524295,
    _NL_ADDRESS_POSTAL_FMT = 589824,
    _NL_ADDRESS_COUNTRY_NAME = 589825,
    _NL_ADDRESS_COUNTRY_POST = 589826,
    _NL_ADDRESS_COUNTRY_AB2 = 589827,
    _NL_ADDRESS_COUNTRY_AB3 = 589828,
    _NL_ADDRESS_COUNTRY_CAR = 589829,
    _NL_ADDRESS_COUNTRY_NUM = 589830,
    _NL_ADDRESS_COUNTRY_ISBN = 589831,
    _NL_ADDRESS_LANG_NAME = 589832,
    _NL_ADDRESS_LANG_AB = 589833,
    _NL_ADDRESS_LANG_TERM = 589834,
    _NL_ADDRESS_LANG_LIB = 589835,
    _NL_ADDRESS_CODESET = 589836,
    _NL_NUM_LC_ADDRESS = 589837,
    _NL_TELEPHONE_TEL_INT_FMT = 655360,
    _NL_TELEPHONE_TEL_DOM_FMT = 655361,
    _NL_TELEPHONE_INT_SELECT = 655362,
    _NL_TELEPHONE_INT_PREFIX = 655363,
    _NL_TELEPHONE_CODESET = 655364,
    _NL_NUM_LC_TELEPHONE = 655365,
    _NL_MEASUREMENT_MEASUREMENT = 720896,
    _NL_MEASUREMENT_CODESET = 720897,
    _NL_NUM_LC_MEASUREMENT = 720898,
    _NL_IDENTIFICATION_TITLE = 786432,
    _NL_IDENTIFICATION_SOURCE = 786433,
    _NL_IDENTIFICATION_ADDRESS = 786434,
    _NL_IDENTIFICATION_CONTACT = 786435,
    _NL_IDENTIFICATION_EMAIL = 786436,
    _NL_IDENTIFICATION_TEL = 786437,
    _NL_IDENTIFICATION_FAX = 786438,
    _NL_IDENTIFICATION_LANGUAGE = 786439,
    _NL_IDENTIFICATION_TERRITORY = 786440,
    _NL_IDENTIFICATION_AUDIENCE = 786441,
    _NL_IDENTIFICATION_APPLICATION = 786442,
    _NL_IDENTIFICATION_ABBREVIATION = 786443,
    _NL_IDENTIFICATION_REVISION = 786444,
    _NL_IDENTIFICATION_DATE = 786445,
    _NL_IDENTIFICATION_CATEGORY = 786446,
    _NL_IDENTIFICATION_CODESET = 786447,
    _NL_NUM_LC_IDENTIFICATION = 786448,
    _NL_NUM = 786449,
}

pub enum anon_link_53_5 {
    RT_CONSISTENT = 0,
    RT_ADD = 1,
    RT_DELETE = 2,
}

pub enum anon_math_934_1 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}

pub enum mcheck_status {
    MCHECK_DISABLED = 4294967295,
    MCHECK_OK = 0,
    MCHECK_FREE = 1,
    MCHECK_HEAD = 2,
    MCHECK_TAIL = 3,
}

pub enum anon_in_40_1 {
    IPPROTO_IP = 0,
    IPPROTO_ICMP = 1,
    IPPROTO_IGMP = 2,
    IPPROTO_IPIP = 4,
    IPPROTO_TCP = 6,
    IPPROTO_EGP = 8,
    IPPROTO_PUP = 12,
    IPPROTO_UDP = 17,
    IPPROTO_IDP = 22,
    IPPROTO_TP = 29,
    IPPROTO_DCCP = 33,
    IPPROTO_IPV6 = 41,
    IPPROTO_RSVP = 46,
    IPPROTO_GRE = 47,
    IPPROTO_ESP = 50,
    IPPROTO_AH = 51,
    IPPROTO_MTP = 92,
    IPPROTO_BEETPH = 94,
    IPPROTO_ENCAP = 98,
    IPPROTO_PIM = 103,
    IPPROTO_COMP = 108,
    IPPROTO_L2TP = 115,
    IPPROTO_SCTP = 132,
    IPPROTO_UDPLITE = 136,
    IPPROTO_MPLS = 137,
    IPPROTO_ETHERNET = 143,
    IPPROTO_RAW = 255,
    IPPROTO_MPTCP = 262,
    IPPROTO_MAX = 263,
}

pub enum anon_in_105_1 {
    IPPROTO_HOPOPTS = 0,
    IPPROTO_ROUTING = 43,
    IPPROTO_FRAGMENT = 44,
    IPPROTO_ICMPV6 = 58,
    IPPROTO_NONE = 59,
    IPPROTO_DSTOPTS = 60,
    IPPROTO_MH = 135,
}

pub enum anon_in_128_1 {
    IPPORT_ECHO = 7,
    IPPORT_DISCARD = 9,
    IPPORT_SYSTAT = 11,
    IPPORT_DAYTIME = 13,
    IPPORT_NETSTAT = 15,
    IPPORT_FTP = 21,
    IPPORT_TELNET = 23,
    IPPORT_SMTP = 25,
    IPPORT_TIMESERVER = 37,
    IPPORT_NAMESERVER = 42,
    IPPORT_WHOIS = 43,
    IPPORT_MTP = 57,
    IPPORT_TFTP = 69,
    IPPORT_RJE = 77,
    IPPORT_FINGER = 79,
    IPPORT_TTYLINK = 87,
    IPPORT_SUPDUP = 95,
    IPPORT_EXECSERVER = 512,
    IPPORT_LOGINSERVER = 513,
    IPPORT_CMDSERVER = 514,
    IPPORT_EFSSERVER = 520,
    IPPORT_BIFFUDP = 512,
    IPPORT_WHOSERVER = 513,
    IPPORT_ROUTESERVER = 520,
    IPPORT_RESERVED = 1024,
    IPPORT_USERRESERVED = 5000,
}

pub enum nss_status {
    NSS_STATUS_TRYAGAIN = 4294967294,
    NSS_STATUS_UNAVAIL = 4294967295,
    NSS_STATUS_NOTFOUND = 0,
    NSS_STATUS_SUCCESS = 1,
    NSS_STATUS_RETURN = 2,
}

pub enum anon_printf_147_1 {
    PA_INT = 0,
    PA_CHAR = 1,
    PA_WCHAR = 2,
    PA_STRING = 3,
    PA_WSTRING = 4,
    PA_POINTER = 5,
    PA_FLOAT = 6,
    PA_DOUBLE = 7,
    PA_LAST = 8,
}

pub enum ps_err_e {
    PS_OK = 0,
    PS_ERR = 1,
    PS_BADPID = 2,
    PS_BADLID = 3,
    PS_BADADDR = 4,
    PS_NOSYM = 5,
    PS_NOFREGS = 6,
}

pub enum anon_pthread_37_1 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1,
}

pub enum anon_pthread_47_1 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
    PTHREAD_MUTEX_NORMAL = 0,
    PTHREAD_MUTEX_RECURSIVE = 1,
    PTHREAD_MUTEX_ERRORCHECK = 2,
    PTHREAD_MUTEX_DEFAULT = 0,
}

pub enum anon_pthread_69_1 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_STALLED_NP = 0,
    PTHREAD_MUTEX_ROBUST = 1,
    PTHREAD_MUTEX_ROBUST_NP = 1,
}

pub enum anon_pthread_81_1 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2,
}

pub enum anon_pthread_104_1 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
    PTHREAD_RWLOCK_DEFAULT_NP = 0,
}

pub enum anon_pthread_124_1 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1,
}

pub enum anon_pthread_134_1 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1,
}

pub enum anon_pthread_144_1 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1,
}

pub enum anon_pthread_168_1 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1,
}

pub enum anon_pthread_175_1 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1,
}

pub enum reg_errcode_t {
    _REG_ENOSYS = 4294967295,
    _REG_NOERROR = 0,
    _REG_NOMATCH = 1,
    _REG_BADPAT = 2,
    _REG_ECOLLATE = 3,
    _REG_ECTYPE = 4,
    _REG_EESCAPE = 5,
    _REG_ESUBREG = 6,
    _REG_EBRACK = 7,
    _REG_EPAREN = 8,
    _REG_EBRACE = 9,
    _REG_BADBR = 10,
    _REG_ERANGE = 11,
    _REG_ESPACE = 12,
    _REG_BADRPT = 13,
    _REG_EEND = 14,
    _REG_ESIZE = 15,
    _REG_ERPAREN = 16,
}

pub enum __ns_sect {
    ns_s_qd = 0,
    ns_s_zn = 0,
    ns_s_an = 1,
    ns_s_pr = 1,
    ns_s_ns = 2,
    ns_s_ud = 2,
    ns_s_ar = 3,
    ns_s_max = 4,
}

pub enum __ns_flag {
    ns_f_qr = 0,
    ns_f_opcode = 1,
    ns_f_aa = 2,
    ns_f_tc = 3,
    ns_f_rd = 4,
    ns_f_ra = 5,
    ns_f_z = 6,
    ns_f_ad = 7,
    ns_f_cd = 8,
    ns_f_rcode = 9,
    ns_f_max = 10,
}

pub enum __ns_opcode {
    ns_o_query = 0,
    ns_o_iquery = 1,
    ns_o_status = 2,
    ns_o_notify = 4,
    ns_o_update = 5,
    ns_o_max = 6,
}

pub enum __ns_rcode {
    ns_r_noerror = 0,
    ns_r_formerr = 1,
    ns_r_servfail = 2,
    ns_r_nxdomain = 3,
    ns_r_notimpl = 4,
    ns_r_refused = 5,
    ns_r_yxdomain = 6,
    ns_r_yxrrset = 7,
    ns_r_nxrrset = 8,
    ns_r_notauth = 9,
    ns_r_notzone = 10,
    ns_r_max = 11,
    ns_r_badvers = 16,
    ns_r_badsig = 16,
    ns_r_badkey = 17,
    ns_r_badtime = 18,
}

pub enum __ns_update_operation {
    ns_uop_delete = 0,
    ns_uop_add = 1,
    ns_uop_max = 2,
}

pub enum __ns_type {
    ns_t_invalid = 0,
    ns_t_a = 1,
    ns_t_ns = 2,
    ns_t_md = 3,
    ns_t_mf = 4,
    ns_t_cname = 5,
    ns_t_soa = 6,
    ns_t_mb = 7,
    ns_t_mg = 8,
    ns_t_mr = 9,
    ns_t_null = 10,
    ns_t_wks = 11,
    ns_t_ptr = 12,
    ns_t_hinfo = 13,
    ns_t_minfo = 14,
    ns_t_mx = 15,
    ns_t_txt = 16,
    ns_t_rp = 17,
    ns_t_afsdb = 18,
    ns_t_x25 = 19,
    ns_t_isdn = 20,
    ns_t_rt = 21,
    ns_t_nsap = 22,
    ns_t_nsap_ptr = 23,
    ns_t_sig = 24,
    ns_t_key = 25,
    ns_t_px = 26,
    ns_t_gpos = 27,
    ns_t_aaaa = 28,
    ns_t_loc = 29,
    ns_t_nxt = 30,
    ns_t_eid = 31,
    ns_t_nimloc = 32,
    ns_t_srv = 33,
    ns_t_atma = 34,
    ns_t_naptr = 35,
    ns_t_kx = 36,
    ns_t_cert = 37,
    ns_t_a6 = 38,
    ns_t_dname = 39,
    ns_t_sink = 40,
    ns_t_opt = 41,
    ns_t_apl = 42,
    ns_t_ds = 43,
    ns_t_sshfp = 44,
    ns_t_ipseckey = 45,
    ns_t_rrsig = 46,
    ns_t_nsec = 47,
    ns_t_dnskey = 48,
    ns_t_dhcid = 49,
    ns_t_nsec3 = 50,
    ns_t_nsec3param = 51,
    ns_t_tlsa = 52,
    ns_t_smimea = 53,
    ns_t_hip = 55,
    ns_t_ninfo = 56,
    ns_t_rkey = 57,
    ns_t_talink = 58,
    ns_t_cds = 59,
    ns_t_cdnskey = 60,
    ns_t_openpgpkey = 61,
    ns_t_csync = 62,
    ns_t_spf = 99,
    ns_t_uinfo = 100,
    ns_t_uid = 101,
    ns_t_gid = 102,
    ns_t_unspec = 103,
    ns_t_nid = 104,
    ns_t_l32 = 105,
    ns_t_l64 = 106,
    ns_t_lp = 107,
    ns_t_eui48 = 108,
    ns_t_eui64 = 109,
    ns_t_tkey = 249,
    ns_t_tsig = 250,
    ns_t_ixfr = 251,
    ns_t_axfr = 252,
    ns_t_mailb = 253,
    ns_t_maila = 254,
    ns_t_any = 255,
    ns_t_uri = 256,
    ns_t_caa = 257,
    ns_t_avc = 258,
    ns_t_ta = 32768,
    ns_t_dlv = 32769,
    ns_t_max = 65536,
}

pub enum __ns_class {
    ns_c_invalid = 0,
    ns_c_in = 1,
    ns_c_2 = 2,
    ns_c_chaos = 3,
    ns_c_hs = 4,
    ns_c_none = 254,
    ns_c_any = 255,
    ns_c_max = 65536,
}

pub enum __ns_cert_types {
    cert_t_pkix = 1,
    cert_t_spki = 2,
    cert_t_pgp = 3,
    cert_t_url = 253,
    cert_t_oid = 254,
}

pub enum ACTION {
    FIND = 0,
    ENTER = 1,
}

pub enum VISIT {
    preorder = 0,
    postorder = 1,
    endorder = 2,
    leaf = 3,
}

pub enum anon_siginfo_consts_35_1 {
    SI_ASYNCNL = 4294967236,
    SI_DETHREAD = 4294967289,
    SI_TKILL = 4294967290,
    SI_SIGIO = 4294967291,
    SI_ASYNCIO = 4294967292,
    SI_MESGQ = 4294967293,
    SI_TIMER = 4294967294,
    SI_QUEUE = 4294967295,
    SI_USER = 0,
    SI_KERNEL = 128,
}

pub enum anon_siginfo_consts_71_1 {
    ILL_ILLOPC = 1,
    ILL_ILLOPN = 2,
    ILL_ILLADR = 3,
    ILL_ILLTRP = 4,
    ILL_PRVOPC = 5,
    ILL_PRVREG = 6,
    ILL_COPROC = 7,
    ILL_BADSTK = 8,
    ILL_BADIADDR = 9,
}

pub enum anon_siginfo_consts_94_1 {
    FPE_INTDIV = 1,
    FPE_INTOVF = 2,
    FPE_FLTDIV = 3,
    FPE_FLTOVF = 4,
    FPE_FLTUND = 5,
    FPE_FLTRES = 6,
    FPE_FLTINV = 7,
    FPE_FLTSUB = 8,
    FPE_FLTUNK = 14,
    FPE_CONDTRAP = 15,
}

pub enum anon_siginfo_consts_119_1 {
    SEGV_MAPERR = 1,
    SEGV_ACCERR = 2,
    SEGV_BNDERR = 3,
    SEGV_PKUERR = 4,
    SEGV_ACCADI = 5,
    SEGV_ADIDERR = 6,
    SEGV_ADIPERR = 7,
    SEGV_MTEAERR = 8,
    SEGV_MTESERR = 9,
}

pub enum anon_siginfo_consts_142_1 {
    BUS_ADRALN = 1,
    BUS_ADRERR = 2,
    BUS_OBJERR = 3,
    BUS_MCEERR_AR = 4,
    BUS_MCEERR_AO = 5,
}

pub enum anon_siginfo_consts_176_1 {
    CLD_EXITED = 1,
    CLD_KILLED = 2,
    CLD_DUMPED = 3,
    CLD_TRAPPED = 4,
    CLD_STOPPED = 5,
    CLD_CONTINUED = 6,
}

pub enum anon_siginfo_consts_193_1 {
    POLL_IN = 1,
    POLL_OUT = 2,
    POLL_MSG = 3,
    POLL_ERR = 4,
    POLL_PRI = 5,
    POLL_HUP = 6,
}

pub enum anon_ss_flags_27_1 {
    SS_ONSTACK = 1,
    SS_DISABLE = 2,
}

pub enum __stab_debug_code {
    N_GSYM = 32,
    N_FNAME = 34,
    N_FUN = 36,
    N_STSYM = 38,
    N_LCSYM = 40,
    N_MAIN = 42,
    N_PC = 48,
    N_NSYMS = 50,
    N_NOMAP = 52,
    N_OBJ = 56,
    N_OPT = 60,
    N_RSYM = 64,
    N_M2C = 66,
    N_SLINE = 68,
    N_DSLINE = 70,
    N_BSLINE = 72,
    N_BROWS = 72,
    N_DEFD = 74,
    N_EHDECL = 80,
    N_MOD2 = 80,
    N_CATCH = 84,
    N_SSYM = 96,
    N_SO = 100,
    N_LSYM = 128,
    N_BINCL = 130,
    N_SOL = 132,
    N_PSYM = 160,
    N_EINCL = 162,
    N_ENTRY = 164,
    N_LBRAC = 192,
    N_EXCL = 194,
    N_SCOPE = 196,
    N_RBRAC = 224,
    N_BCOMM = 226,
    N_ECOMM = 228,
    N_ECOML = 232,
    N_NBTEXT = 240,
    N_NBDATA = 242,
    N_NBBSS = 244,
    N_NBSTS = 246,
    N_NBLCS = 248,
    N_LENG = 254,
    LAST_UNUSED_STAB_CODE = 255,
}

pub enum anon_stdio_ext_27_1 {
    FSETLOCKING_QUERY = 0,
    FSETLOCKING_INTERNAL = 1,
    FSETLOCKING_BYCALLER = 2,
}

pub enum td_err_e {
    TD_OK = 0,
    TD_ERR = 1,
    TD_NOTHR = 2,
    TD_NOSV = 3,
    TD_NOLWP = 4,
    TD_BADPH = 5,
    TD_BADTH = 6,
    TD_BADSH = 7,
    TD_BADTA = 8,
    TD_BADKEY = 9,
    TD_NOMSG = 10,
    TD_NOFPREGS = 11,
    TD_NOLIBTHREAD = 12,
    TD_NOEVENT = 13,
    TD_NOCAPAB = 14,
    TD_DBERR = 15,
    TD_NOAPLIC = 16,
    TD_NOTSD = 17,
    TD_MALLOC = 18,
    TD_PARTIALREG = 19,
    TD_NOXREGS = 20,
    TD_TLSDEFER = 21,
    TD_NOTALLOC = 21,
    TD_VERSION = 22,
    TD_NOTLS = 23,
}

pub enum td_thr_state_e {
    TD_THR_ANY_STATE = 0,
    TD_THR_UNKNOWN = 1,
    TD_THR_STOPPED = 2,
    TD_THR_RUN = 3,
    TD_THR_ACTIVE = 4,
    TD_THR_ZOMBIE = 5,
    TD_THR_SLEEP = 6,
    TD_THR_STOPPED_ASLEEP = 7,
}

pub enum td_thr_type_e {
    TD_THR_ANY_TYPE = 0,
    TD_THR_USER = 1,
    TD_THR_SYSTEM = 2,
}

pub enum td_event_e {
    TD_ALL_EVENTS = 0,
    TD_EVENT_NONE = 0,
    TD_READY = 1,
    TD_SLEEP = 2,
    TD_SWITCHTO = 3,
    TD_SWITCHFROM = 4,
    TD_LOCK_TRY = 5,
    TD_CATCHSIG = 6,
    TD_IDLE = 7,
    TD_CREATE = 8,
    TD_DEATH = 9,
    TD_PREEMPT = 10,
    TD_PRI_INHERIT = 11,
    TD_REAP = 12,
    TD_CONCURRENCY = 13,
    TD_TIMEOUT = 14,
    TD_MIN_EVENT_NUM = 1,
    TD_MAX_EVENT_NUM = 14,
    TD_EVENTS_ENABLE = 31,
}

pub enum td_notify_e {
    NOTIFY_BPT = 0,
    NOTIFY_AUTOBPT = 1,
    NOTIFY_SYSCALL = 2,
}

pub enum anon_threads_44_1 {
    thrd_success = 0,
    thrd_busy = 1,
    thrd_error = 2,
    thrd_nomem = 3,
    thrd_timedout = 4,
}

pub enum anon_threads_54_1 {
    mtx_plain = 0,
    mtx_recursive = 1,
    mtx_timed = 2,
}

pub enum anon_ulimit_25_1 {
    UL_GETFSIZE = 1,
    UL_SETFSIZE = 2,
    __UL_GETMAXBRK = 3,
    __UL_GETOPENMAX = 4,
}

pub enum anon_confname_24_1 {
    _PC_LINK_MAX = 0,
    _PC_MAX_CANON = 1,
    _PC_MAX_INPUT = 2,
    _PC_NAME_MAX = 3,
    _PC_PATH_MAX = 4,
    _PC_PIPE_BUF = 5,
    _PC_CHOWN_RESTRICTED = 6,
    _PC_NO_TRUNC = 7,
    _PC_VDISABLE = 8,
    _PC_SYNC_IO = 9,
    _PC_ASYNC_IO = 10,
    _PC_PRIO_IO = 11,
    _PC_SOCK_MAXBUF = 12,
    _PC_FILESIZEBITS = 13,
    _PC_REC_INCR_XFER_SIZE = 14,
    _PC_REC_MAX_XFER_SIZE = 15,
    _PC_REC_MIN_XFER_SIZE = 16,
    _PC_REC_XFER_ALIGN = 17,
    _PC_ALLOC_SIZE_MIN = 18,
    _PC_SYMLINK_MAX = 19,
    _PC_2_SYMLINKS = 20,
}

pub enum anon_confname_71_1 {
    _SC_ARG_MAX = 0,
    _SC_CHILD_MAX = 1,
    _SC_CLK_TCK = 2,
    _SC_NGROUPS_MAX = 3,
    _SC_OPEN_MAX = 4,
    _SC_STREAM_MAX = 5,
    _SC_TZNAME_MAX = 6,
    _SC_JOB_CONTROL = 7,
    _SC_SAVED_IDS = 8,
    _SC_REALTIME_SIGNALS = 9,
    _SC_PRIORITY_SCHEDULING = 10,
    _SC_TIMERS = 11,
    _SC_ASYNCHRONOUS_IO = 12,
    _SC_PRIORITIZED_IO = 13,
    _SC_SYNCHRONIZED_IO = 14,
    _SC_FSYNC = 15,
    _SC_MAPPED_FILES = 16,
    _SC_MEMLOCK = 17,
    _SC_MEMLOCK_RANGE = 18,
    _SC_MEMORY_PROTECTION = 19,
    _SC_MESSAGE_PASSING = 20,
    _SC_SEMAPHORES = 21,
    _SC_SHARED_MEMORY_OBJECTS = 22,
    _SC_AIO_LISTIO_MAX = 23,
    _SC_AIO_MAX = 24,
    _SC_AIO_PRIO_DELTA_MAX = 25,
    _SC_DELAYTIMER_MAX = 26,
    _SC_MQ_OPEN_MAX = 27,
    _SC_MQ_PRIO_MAX = 28,
    _SC_VERSION = 29,
    _SC_PAGESIZE = 30,
    _SC_RTSIG_MAX = 31,
    _SC_SEM_NSEMS_MAX = 32,
    _SC_SEM_VALUE_MAX = 33,
    _SC_SIGQUEUE_MAX = 34,
    _SC_TIMER_MAX = 35,
    _SC_BC_BASE_MAX = 36,
    _SC_BC_DIM_MAX = 37,
    _SC_BC_SCALE_MAX = 38,
    _SC_BC_STRING_MAX = 39,
    _SC_COLL_WEIGHTS_MAX = 40,
    _SC_EQUIV_CLASS_MAX = 41,
    _SC_EXPR_NEST_MAX = 42,
    _SC_LINE_MAX = 43,
    _SC_RE_DUP_MAX = 44,
    _SC_CHARCLASS_NAME_MAX = 45,
    _SC_2_VERSION = 46,
    _SC_2_C_BIND = 47,
    _SC_2_C_DEV = 48,
    _SC_2_FORT_DEV = 49,
    _SC_2_FORT_RUN = 50,
    _SC_2_SW_DEV = 51,
    _SC_2_LOCALEDEF = 52,
    _SC_PII = 53,
    _SC_PII_XTI = 54,
    _SC_PII_SOCKET = 55,
    _SC_PII_INTERNET = 56,
    _SC_PII_OSI = 57,
    _SC_POLL = 58,
    _SC_SELECT = 59,
    _SC_UIO_MAXIOV = 60,
    _SC_IOV_MAX = 60,
    _SC_PII_INTERNET_STREAM = 61,
    _SC_PII_INTERNET_DGRAM = 62,
    _SC_PII_OSI_COTS = 63,
    _SC_PII_OSI_CLTS = 64,
    _SC_PII_OSI_M = 65,
    _SC_T_IOV_MAX = 66,
    _SC_THREADS = 67,
    _SC_THREAD_SAFE_FUNCTIONS = 68,
    _SC_GETGR_R_SIZE_MAX = 69,
    _SC_GETPW_R_SIZE_MAX = 70,
    _SC_LOGIN_NAME_MAX = 71,
    _SC_TTY_NAME_MAX = 72,
    _SC_THREAD_DESTRUCTOR_ITERATIONS = 73,
    _SC_THREAD_KEYS_MAX = 74,
    _SC_THREAD_STACK_MIN = 75,
    _SC_THREAD_THREADS_MAX = 76,
    _SC_THREAD_ATTR_STACKADDR = 77,
    _SC_THREAD_ATTR_STACKSIZE = 78,
    _SC_THREAD_PRIORITY_SCHEDULING = 79,
    _SC_THREAD_PRIO_INHERIT = 80,
    _SC_THREAD_PRIO_PROTECT = 81,
    _SC_THREAD_PROCESS_SHARED = 82,
    _SC_NPROCESSORS_CONF = 83,
    _SC_NPROCESSORS_ONLN = 84,
    _SC_PHYS_PAGES = 85,
    _SC_AVPHYS_PAGES = 86,
    _SC_ATEXIT_MAX = 87,
    _SC_PASS_MAX = 88,
    _SC_XOPEN_VERSION = 89,
    _SC_XOPEN_XCU_VERSION = 90,
    _SC_XOPEN_UNIX = 91,
    _SC_XOPEN_CRYPT = 92,
    _SC_XOPEN_ENH_I18N = 93,
    _SC_XOPEN_SHM = 94,
    _SC_2_CHAR_TERM = 95,
    _SC_2_C_VERSION = 96,
    _SC_2_UPE = 97,
    _SC_XOPEN_XPG2 = 98,
    _SC_XOPEN_XPG3 = 99,
    _SC_XOPEN_XPG4 = 100,
    _SC_CHAR_BIT = 101,
    _SC_CHAR_MAX = 102,
    _SC_CHAR_MIN = 103,
    _SC_INT_MAX = 104,
    _SC_INT_MIN = 105,
    _SC_LONG_BIT = 106,
    _SC_WORD_BIT = 107,
    _SC_MB_LEN_MAX = 108,
    _SC_NZERO = 109,
    _SC_SSIZE_MAX = 110,
    _SC_SCHAR_MAX = 111,
    _SC_SCHAR_MIN = 112,
    _SC_SHRT_MAX = 113,
    _SC_SHRT_MIN = 114,
    _SC_UCHAR_MAX = 115,
    _SC_UINT_MAX = 116,
    _SC_ULONG_MAX = 117,
    _SC_USHRT_MAX = 118,
    _SC_NL_ARGMAX = 119,
    _SC_NL_LANGMAX = 120,
    _SC_NL_MSGMAX = 121,
    _SC_NL_NMAX = 122,
    _SC_NL_SETMAX = 123,
    _SC_NL_TEXTMAX = 124,
    _SC_XBS5_ILP32_OFF32 = 125,
    _SC_XBS5_ILP32_OFFBIG = 126,
    _SC_XBS5_LP64_OFF64 = 127,
    _SC_XBS5_LPBIG_OFFBIG = 128,
    _SC_XOPEN_LEGACY = 129,
    _SC_XOPEN_REALTIME = 130,
    _SC_XOPEN_REALTIME_THREADS = 131,
    _SC_ADVISORY_INFO = 132,
    _SC_BARRIERS = 133,
    _SC_BASE = 134,
    _SC_C_LANG_SUPPORT = 135,
    _SC_C_LANG_SUPPORT_R = 136,
    _SC_CLOCK_SELECTION = 137,
    _SC_CPUTIME = 138,
    _SC_THREAD_CPUTIME = 139,
    _SC_DEVICE_IO = 140,
    _SC_DEVICE_SPECIFIC = 141,
    _SC_DEVICE_SPECIFIC_R = 142,
    _SC_FD_MGMT = 143,
    _SC_FIFO = 144,
    _SC_PIPE = 145,
    _SC_FILE_ATTRIBUTES = 146,
    _SC_FILE_LOCKING = 147,
    _SC_FILE_SYSTEM = 148,
    _SC_MONOTONIC_CLOCK = 149,
    _SC_MULTI_PROCESS = 150,
    _SC_SINGLE_PROCESS = 151,
    _SC_NETWORKING = 152,
    _SC_READER_WRITER_LOCKS = 153,
    _SC_SPIN_LOCKS = 154,
    _SC_REGEXP = 155,
    _SC_REGEX_VERSION = 156,
    _SC_SHELL = 157,
    _SC_SIGNALS = 158,
    _SC_SPAWN = 159,
    _SC_SPORADIC_SERVER = 160,
    _SC_THREAD_SPORADIC_SERVER = 161,
    _SC_SYSTEM_DATABASE = 162,
    _SC_SYSTEM_DATABASE_R = 163,
    _SC_TIMEOUTS = 164,
    _SC_TYPED_MEMORY_OBJECTS = 165,
    _SC_USER_GROUPS = 166,
    _SC_USER_GROUPS_R = 167,
    _SC_2_PBS = 168,
    _SC_2_PBS_ACCOUNTING = 169,
    _SC_2_PBS_LOCATE = 170,
    _SC_2_PBS_MESSAGE = 171,
    _SC_2_PBS_TRACK = 172,
    _SC_SYMLOOP_MAX = 173,
    _SC_STREAMS = 174,
    _SC_2_PBS_CHECKPOINT = 175,
    _SC_V6_ILP32_OFF32 = 176,
    _SC_V6_ILP32_OFFBIG = 177,
    _SC_V6_LP64_OFF64 = 178,
    _SC_V6_LPBIG_OFFBIG = 179,
    _SC_HOST_NAME_MAX = 180,
    _SC_TRACE = 181,
    _SC_TRACE_EVENT_FILTER = 182,
    _SC_TRACE_INHERIT = 183,
    _SC_TRACE_LOG = 184,
    _SC_LEVEL1_ICACHE_SIZE = 185,
    _SC_LEVEL1_ICACHE_ASSOC = 186,
    _SC_LEVEL1_ICACHE_LINESIZE = 187,
    _SC_LEVEL1_DCACHE_SIZE = 188,
    _SC_LEVEL1_DCACHE_ASSOC = 189,
    _SC_LEVEL1_DCACHE_LINESIZE = 190,
    _SC_LEVEL2_CACHE_SIZE = 191,
    _SC_LEVEL2_CACHE_ASSOC = 192,
    _SC_LEVEL2_CACHE_LINESIZE = 193,
    _SC_LEVEL3_CACHE_SIZE = 194,
    _SC_LEVEL3_CACHE_ASSOC = 195,
    _SC_LEVEL3_CACHE_LINESIZE = 196,
    _SC_LEVEL4_CACHE_SIZE = 197,
    _SC_LEVEL4_CACHE_ASSOC = 198,
    _SC_LEVEL4_CACHE_LINESIZE = 199,
    _SC_IPV6 = 235,
    _SC_RAW_SOCKETS = 236,
    _SC_V7_ILP32_OFF32 = 237,
    _SC_V7_ILP32_OFFBIG = 238,
    _SC_V7_LP64_OFF64 = 239,
    _SC_V7_LPBIG_OFFBIG = 240,
    _SC_SS_REPL_MAX = 241,
    _SC_TRACE_EVENT_NAME_MAX = 242,
    _SC_TRACE_NAME_MAX = 243,
    _SC_TRACE_SYS_MAX = 244,
    _SC_TRACE_USER_EVENT_MAX = 245,
    _SC_XOPEN_STREAMS = 246,
    _SC_THREAD_ROBUST_PRIO_INHERIT = 247,
    _SC_THREAD_ROBUST_PRIO_PROTECT = 248,
    _SC_MINSIGSTKSZ = 249,
    _SC_SIGSTKSZ = 250,
}

pub enum anon_confname_539_1 {
    _CS_PATH = 0,
    _CS_V6_WIDTH_RESTRICTED_ENVS = 1,
    _CS_GNU_LIBC_VERSION = 2,
    _CS_GNU_LIBPTHREAD_VERSION = 3,
    _CS_V5_WIDTH_RESTRICTED_ENVS = 4,
    _CS_V7_WIDTH_RESTRICTED_ENVS = 5,
    _CS_LFS_CFLAGS = 1000,
    _CS_LFS_LDFLAGS = 1001,
    _CS_LFS_LIBS = 1002,
    _CS_LFS_LINTFLAGS = 1003,
    _CS_LFS64_CFLAGS = 1004,
    _CS_LFS64_LDFLAGS = 1005,
    _CS_LFS64_LIBS = 1006,
    _CS_LFS64_LINTFLAGS = 1007,
    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
    _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101,
    _CS_XBS5_ILP32_OFF32_LIBS = 1102,
    _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103,
    _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104,
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105,
    _CS_XBS5_ILP32_OFFBIG_LIBS = 1106,
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107,
    _CS_XBS5_LP64_OFF64_CFLAGS = 1108,
    _CS_XBS5_LP64_OFF64_LDFLAGS = 1109,
    _CS_XBS5_LP64_OFF64_LIBS = 1110,
    _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111,
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112,
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113,
    _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114,
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115,
    _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116,
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117,
    _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118,
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119,
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120,
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121,
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122,
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123,
    _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124,
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125,
    _CS_POSIX_V6_LP64_OFF64_LIBS = 1126,
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127,
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128,
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129,
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130,
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131,
    _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132,
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133,
    _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134,
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135,
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136,
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137,
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138,
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139,
    _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140,
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141,
    _CS_POSIX_V7_LP64_OFF64_LIBS = 1142,
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143,
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144,
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145,
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146,
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147,
    _CS_V6_ENV = 1148,
    _CS_V7_ENV = 1149,
}

pub enum __itimer_which {
    ITIMER_REAL = 0,
    ITIMER_VIRTUAL = 1,
    ITIMER_PROF = 2,
}

pub enum anon_wctype_wchar_56_1 {
    __ISwupper = 0,
    __ISwlower = 1,
    __ISwalpha = 2,
    __ISwdigit = 3,
    __ISwxdigit = 4,
    __ISwspace = 5,
    __ISwprint = 6,
    __ISwgraph = 7,
    __ISwblank = 8,
    __ISwcntrl = 9,
    __ISwpunct = 10,
    __ISwalnum = 11,
    _ISwupper = 16777216,
    _ISwlower = 33554432,
    _ISwalpha = 67108864,
    _ISwdigit = 134217728,
    _ISwxdigit = 268435456,
    _ISwspace = 536870912,
    _ISwprint = 1073741824,
    _ISwgraph = 2147483648,
    _ISwblank = 65536,
    _ISwcntrl = 131072,
    _ISwpunct = 262144,
    _ISwalnum = 524288,
}

pub enum anon_wordexp_28_1 {
    WRDE_DOOFFS = 1,
    WRDE_APPEND = 2,
    WRDE_NOCMD = 4,
    WRDE_REUSE = 8,
    WRDE_SHOWERR = 16,
    WRDE_UNDEF = 32,
    __WRDE_FLAGS = 63,
}

pub enum anon_wordexp_49_1 {
    WRDE_NOSPACE = 1,
    WRDE_BADCHAR = 2,
    WRDE_BADVAL = 3,
    WRDE_CMDSUB = 4,
    WRDE_SYNTAX = 5,
}

