namespace test::interop::raylib;

pub foreign fn Clamp(value #f32, min #f32, max #f32) #f32;

pub foreign fn Lerp(start #f32, end #f32, amount #f32) #f32;

pub foreign fn Normalize(value #f32, start #f32, end #f32) #f32;

pub foreign fn Remap(value #f32, inputStart #f32, inputEnd #f32, outputStart #f32, outputEnd #f32) #f32;

pub foreign fn Wrap(value #f32, min #f32, max #f32) #f32;

pub foreign fn FloatEquals(x #f32, y #f32) #i32;

pub foreign fn Vector2Zero() #Vector2;

pub foreign fn Vector2One() #Vector2;

pub foreign fn Vector2Add(v1 #Vector2, v2 #Vector2) #Vector2;

pub foreign fn Vector2AddValue(v #Vector2, add #f32) #Vector2;

pub foreign fn Vector2Subtract(v1 #Vector2, v2 #Vector2) #Vector2;

pub foreign fn Vector2SubtractValue(v #Vector2, sub #f32) #Vector2;

pub foreign fn Vector2Length(v #Vector2) #f32;

pub foreign fn Vector2LengthSqr(v #Vector2) #f32;

pub foreign fn Vector2DotProduct(v1 #Vector2, v2 #Vector2) #f32;

pub foreign fn Vector2Distance(v1 #Vector2, v2 #Vector2) #f32;

pub foreign fn Vector2DistanceSqr(v1 #Vector2, v2 #Vector2) #f32;

pub foreign fn Vector2Angle(v1 #Vector2, v2 #Vector2) #f32;

pub foreign fn Vector2LineAngle(start #Vector2, end #Vector2) #f32;

pub foreign fn Vector2Scale(v #Vector2, scale #f32) #Vector2;

pub foreign fn Vector2Multiply(v1 #Vector2, v2 #Vector2) #Vector2;

pub foreign fn Vector2Negate(v #Vector2) #Vector2;

pub foreign fn Vector2Divide(v1 #Vector2, v2 #Vector2) #Vector2;

pub foreign fn Vector2Normalize(v #Vector2) #Vector2;

pub foreign fn Vector2Transform(v #Vector2, mat #Matrix) #Vector2;

pub foreign fn Vector2Lerp(v1 #Vector2, v2 #Vector2, amount #f32) #Vector2;

pub foreign fn Vector2Reflect(v #Vector2, normal #Vector2) #Vector2;

pub foreign fn Vector2Rotate(v #Vector2, angle #f32) #Vector2;

pub foreign fn Vector2MoveTowards(v #Vector2, target #Vector2, maxDistance #f32) #Vector2;

pub foreign fn Vector2Invert(v #Vector2) #Vector2;

pub foreign fn Vector2Clamp(v #Vector2, min #Vector2, max #Vector2) #Vector2;

pub foreign fn Vector2ClampValue(v #Vector2, min #f32, max #f32) #Vector2;

pub foreign fn Vector2Equals(p #Vector2, q #Vector2) #i32;

pub foreign fn Vector3Zero() #Vector3;

pub foreign fn Vector3One() #Vector3;

pub foreign fn Vector3Add(v1 #Vector3, v2 #Vector3) #Vector3;

pub foreign fn Vector3AddValue(v #Vector3, add #f32) #Vector3;

pub foreign fn Vector3Subtract(v1 #Vector3, v2 #Vector3) #Vector3;

pub foreign fn Vector3SubtractValue(v #Vector3, sub #f32) #Vector3;

pub foreign fn Vector3Scale(v #Vector3, scalar #f32) #Vector3;

pub foreign fn Vector3Multiply(v1 #Vector3, v2 #Vector3) #Vector3;

pub foreign fn Vector3CrossProduct(v1 #Vector3, v2 #Vector3) #Vector3;

pub foreign fn Vector3Perpendicular(v #Vector3) #Vector3;

pub foreign fn Vector3Length(v #Vector3) #f32;

pub foreign fn Vector3LengthSqr(v #Vector3) #f32;

pub foreign fn Vector3DotProduct(v1 #Vector3, v2 #Vector3) #f32;

pub foreign fn Vector3Distance(v1 #Vector3, v2 #Vector3) #f32;

pub foreign fn Vector3DistanceSqr(v1 #Vector3, v2 #Vector3) #f32;

pub foreign fn Vector3Angle(v1 #Vector3, v2 #Vector3) #f32;

pub foreign fn Vector3Negate(v #Vector3) #Vector3;

pub foreign fn Vector3Divide(v1 #Vector3, v2 #Vector3) #Vector3;

pub foreign fn Vector3Normalize(v #Vector3) #Vector3;

pub foreign fn Vector3Project(v1 #Vector3, v2 #Vector3) #Vector3;

pub foreign fn Vector3Reject(v1 #Vector3, v2 #Vector3) #Vector3;

pub foreign fn Vector3OrthoNormalize(v1 #Vector3*, v2 #Vector3*) #void;

pub foreign fn Vector3Transform(v #Vector3, mat #Matrix) #Vector3;

pub foreign fn Vector3RotateByQuaternion(v #Vector3, q #Vector4) #Vector3;

pub foreign fn Vector3RotateByAxisAngle(v #Vector3, axis #Vector3, angle #f32) #Vector3;

pub foreign fn Vector3Lerp(v1 #Vector3, v2 #Vector3, amount #f32) #Vector3;

pub foreign fn Vector3Reflect(v #Vector3, normal #Vector3) #Vector3;

pub foreign fn Vector3Min(v1 #Vector3, v2 #Vector3) #Vector3;

pub foreign fn Vector3Max(v1 #Vector3, v2 #Vector3) #Vector3;

pub foreign fn Vector3Barycenter(p #Vector3, a #Vector3, b #Vector3, c #Vector3) #Vector3;

pub foreign fn Vector3Unproject(source #Vector3, projection #Matrix, view #Matrix) #Vector3;

pub foreign fn Vector3ToFloatV(v #Vector3) #float3;

pub foreign fn Vector3Invert(v #Vector3) #Vector3;

pub foreign fn Vector3Clamp(v #Vector3, min #Vector3, max #Vector3) #Vector3;

pub foreign fn Vector3ClampValue(v #Vector3, min #f32, max #f32) #Vector3;

pub foreign fn Vector3Equals(p #Vector3, q #Vector3) #i32;

pub foreign fn Vector3Refract(v #Vector3, n #Vector3, r #f32) #Vector3;

pub foreign fn MatrixDeterminant(mat #Matrix) #f32;

pub foreign fn MatrixTrace(mat #Matrix) #f32;

pub foreign fn MatrixTranspose(mat #Matrix) #Matrix;

pub foreign fn MatrixInvert(mat #Matrix) #Matrix;

pub foreign fn MatrixIdentity() #Matrix;

pub foreign fn MatrixAdd(left #Matrix, right #Matrix) #Matrix;

pub foreign fn MatrixSubtract(left #Matrix, right #Matrix) #Matrix;

pub foreign fn MatrixMultiply(left #Matrix, right #Matrix) #Matrix;

pub foreign fn MatrixTranslate(x #f32, y #f32, z #f32) #Matrix;

pub foreign fn MatrixRotate(axis #Vector3, angle #f32) #Matrix;

pub foreign fn MatrixRotateX(angle #f32) #Matrix;

pub foreign fn MatrixRotateY(angle #f32) #Matrix;

pub foreign fn MatrixRotateZ(angle #f32) #Matrix;

pub foreign fn MatrixRotateXYZ(angle #Vector3) #Matrix;

pub foreign fn MatrixRotateZYX(angle #Vector3) #Matrix;

pub foreign fn MatrixScale(x #f32, y #f32, z #f32) #Matrix;

pub foreign fn MatrixFrustum(left #f64, right #f64, bottom #f64, top #f64, near #f64, far #f64) #Matrix;

pub foreign fn MatrixPerspective(fovY #f64, aspect #f64, nearPlane #f64, farPlane #f64) #Matrix;

pub foreign fn MatrixOrtho(left #f64, right #f64, bottom #f64, top #f64, nearPlane #f64, farPlane #f64) #Matrix;

pub foreign fn MatrixLookAt(eye #Vector3, target #Vector3, up #Vector3) #Matrix;

pub foreign fn MatrixToFloatV(mat #Matrix) #float16;

pub foreign fn QuaternionAdd(q1 #Vector4, q2 #Vector4) #Vector4;

pub foreign fn QuaternionAddValue(q #Vector4, add #f32) #Vector4;

pub foreign fn QuaternionSubtract(q1 #Vector4, q2 #Vector4) #Vector4;

pub foreign fn QuaternionSubtractValue(q #Vector4, sub #f32) #Vector4;

pub foreign fn QuaternionIdentity() #Vector4;

pub foreign fn QuaternionLength(q #Vector4) #f32;

pub foreign fn QuaternionNormalize(q #Vector4) #Vector4;

pub foreign fn QuaternionInvert(q #Vector4) #Vector4;

pub foreign fn QuaternionMultiply(q1 #Vector4, q2 #Vector4) #Vector4;

pub foreign fn QuaternionScale(q #Vector4, mul #f32) #Vector4;

pub foreign fn QuaternionDivide(q1 #Vector4, q2 #Vector4) #Vector4;

pub foreign fn QuaternionLerp(q1 #Vector4, q2 #Vector4, amount #f32) #Vector4;

pub foreign fn QuaternionNlerp(q1 #Vector4, q2 #Vector4, amount #f32) #Vector4;

pub foreign fn QuaternionSlerp(q1 #Vector4, q2 #Vector4, amount #f32) #Vector4;

pub foreign fn QuaternionFromVector3ToVector3(from #Vector3, to #Vector3) #Vector4;

pub foreign fn QuaternionFromMatrix(mat #Matrix) #Vector4;

pub foreign fn QuaternionToMatrix(q #Vector4) #Matrix;

pub foreign fn QuaternionFromAxisAngle(axis #Vector3, angle #f32) #Vector4;

pub foreign fn QuaternionToAxisAngle(q #Vector4, outAxis #Vector3*, outAngle #f32*) #void;

pub foreign fn QuaternionFromEuler(pitch #f32, yaw #f32, roll #f32) #Vector4;

pub foreign fn QuaternionToEuler(q #Vector4) #Vector3;

pub foreign fn QuaternionTransform(q #Vector4, mat #Matrix) #Vector4;

pub foreign fn QuaternionEquals(p #Vector4, q #Vector4) #i32;

pub foreign fn InitWindow(width #i32, height #i32, title #i8*) #void;

pub foreign fn CloseWindow() #void;

pub foreign fn WindowShouldClose() #i32;

pub foreign fn IsWindowReady() #i32;

pub foreign fn IsWindowFullscreen() #i32;

pub foreign fn IsWindowHidden() #i32;

pub foreign fn IsWindowMinimized() #i32;

pub foreign fn IsWindowMaximized() #i32;

pub foreign fn IsWindowFocused() #i32;

pub foreign fn IsWindowResized() #i32;

pub foreign fn IsWindowState() #i32;

pub foreign fn SetWindowState(flags #u32) #void;

pub foreign fn ClearWindowState(flags #u32) #void;

pub foreign fn ToggleFullscreen() #void;

pub foreign fn ToggleBorderlessWindowed() #void;

pub foreign fn MaximizeWindow() #void;

pub foreign fn MinimizeWindow() #void;

pub foreign fn RestoreWindow() #void;

pub foreign fn SetWindowIcon(image #Image) #void;

pub foreign fn SetWindowIcons(images #Image*, count #i32) #void;

pub foreign fn SetWindowTitle(title #i8*) #void;

pub foreign fn SetWindowPosition(x #i32, y #i32) #void;

pub foreign fn SetWindowMonitor(monitor #i32) #void;

pub foreign fn SetWindowMinSize(width #i32, height #i32) #void;

pub foreign fn SetWindowMaxSize(width #i32, height #i32) #void;

pub foreign fn SetWindowSize(width #i32, height #i32) #void;

pub foreign fn SetWindowOpacity(opacity #f32) #void;

pub foreign fn SetWindowFocused() #void;

pub foreign fn GetWindowHandle() #void*;

pub foreign fn GetScreenWidth() #i32;

pub foreign fn GetScreenHeight() #i32;

pub foreign fn GetRenderWidth() #i32;

pub foreign fn GetRenderHeight() #i32;

pub foreign fn GetMonitorCount() #i32;

pub foreign fn GetCurrentMonitor() #i32;

pub foreign fn GetMonitorPosition(monitor #i32) #Vector2;

pub foreign fn GetMonitorWidth(monitor #i32) #i32;

pub foreign fn GetMonitorHeight(monitor #i32) #i32;

pub foreign fn GetMonitorPhysicalWidth(monitor #i32) #i32;

pub foreign fn GetMonitorPhysicalHeight(monitor #i32) #i32;

pub foreign fn GetMonitorRefreshRate(monitor #i32) #i32;

pub foreign fn GetWindowPosition() #Vector2;

pub foreign fn GetWindowScaleDPI() #Vector2;

pub foreign fn GetMonitorName(monitor #i32) #i8*;

pub foreign fn SetClipboardText(text #i8*) #void;

pub foreign fn GetClipboardText() #i8*;

pub foreign fn EnableEventWaiting() #void;

pub foreign fn DisableEventWaiting() #void;

pub foreign fn ShowCursor() #void;

pub foreign fn HideCursor() #void;

pub foreign fn IsCursorHidden() #i32;

pub foreign fn EnableCursor() #void;

pub foreign fn DisableCursor() #void;

pub foreign fn IsCursorOnScreen() #i32;

pub foreign fn ClearBackground(color #Color) #void;

pub foreign fn BeginDrawing() #void;

pub foreign fn EndDrawing() #void;

pub foreign fn BeginMode2D(camera #Camera2D) #void;

pub foreign fn EndMode2D() #void;

pub foreign fn BeginMode3D(camera #Camera3D) #void;

pub foreign fn EndMode3D() #void;

pub foreign fn BeginTextureMode(target #RenderTexture) #void;

pub foreign fn EndTextureMode() #void;

pub foreign fn BeginShaderMode(shader #Shader) #void;

pub foreign fn EndShaderMode() #void;

pub foreign fn BeginBlendMode(mode #i32) #void;

pub foreign fn EndBlendMode() #void;

pub foreign fn BeginScissorMode(x #i32, y #i32, width #i32, height #i32) #void;

pub foreign fn EndScissorMode() #void;

pub foreign fn BeginVrStereoMode(config #VrStereoConfig) #void;

pub foreign fn EndVrStereoMode() #void;

pub foreign fn LoadVrStereoConfig(device #VrDeviceInfo) #VrStereoConfig;

pub foreign fn UnloadVrStereoConfig(config #VrStereoConfig) #void;

pub foreign fn LoadShader(vsFileName #i8*, fsFileName #i8*) #Shader;

pub foreign fn LoadShaderFromMemory(vsCode #i8*, fsCode #i8*) #Shader;

pub foreign fn IsShaderReady() #i32;

pub foreign fn GetShaderLocation(shader #Shader, uniformName #i8*) #i32;

pub foreign fn GetShaderLocationAttrib(shader #Shader, attribName #i8*) #i32;

pub foreign fn SetShaderValue(shader #Shader, locIndex #i32, value #void*, uniformType #i32) #void;

pub foreign fn SetShaderValueV(shader #Shader, locIndex #i32, value #void*, uniformType #i32, count #i32) #void;

pub foreign fn SetShaderValueMatrix(shader #Shader, locIndex #i32, mat #Matrix) #void;

pub foreign fn SetShaderValueTexture(shader #Shader, locIndex #i32, texture #Texture) #void;

pub foreign fn UnloadShader(shader #Shader) #void;

pub foreign fn GetMouseRay(mousePosition #Vector2, camera #Camera3D) #Ray;

pub foreign fn GetCameraMatrix(camera #Camera3D) #Matrix;

pub foreign fn GetCameraMatrix2D(camera #Camera2D) #Matrix;

pub foreign fn GetWorldToScreen(position #Vector3, camera #Camera3D) #Vector2;

pub foreign fn GetScreenToWorld2D(position #Vector2, camera #Camera2D) #Vector2;

pub foreign fn GetWorldToScreenEx(position #Vector3, camera #Camera3D, width #i32, height #i32) #Vector2;

pub foreign fn GetWorldToScreen2D(position #Vector2, camera #Camera2D) #Vector2;

pub foreign fn SetTargetFPS(fps #i32) #void;

pub foreign fn GetFrameTime() #f32;

pub foreign fn GetTime() #f64;

pub foreign fn GetFPS() #i32;

pub foreign fn SwapScreenBuffer() #void;

pub foreign fn PollInputEvents() #void;

pub foreign fn WaitTime(seconds #f64) #void;

pub foreign fn SetRandomSeed(seed #u32) #void;

pub foreign fn GetRandomValue(min #i32, max #i32) #i32;

pub foreign fn LoadRandomSequence(count #u32, min #i32, max #i32) #i32*;

pub foreign fn UnloadRandomSequence(sequence #i32*) #void;

pub foreign fn TakeScreenshot(fileName #i8*) #void;

pub foreign fn SetConfigFlags(flags #u32) #void;

pub foreign fn OpenURL(url #i8*) #void;

pub foreign fn TraceLog(logLevel #i32, text #i8*, ...) #void;

pub foreign fn SetTraceLogLevel(logLevel #i32) #void;

pub foreign fn MemAlloc(size #u32) #void*;

pub foreign fn MemRealloc(ptr #void*, size #u32) #void*;

pub foreign fn MemFree(ptr #void*) #void;

pub foreign fn SetTraceLogCallback(callback #(#i32, #i8*, #i32) #void) #void;

pub foreign fn SetLoadFileDataCallback(callback #(#i8*, #i32*) #u8*) #void;

pub foreign fn SetSaveFileDataCallback(callback #i32) #void;

pub foreign fn SetLoadFileTextCallback(callback #(#i8*) #i8*) #void;

pub foreign fn SetSaveFileTextCallback(callback #(#i8*, #i8*) #i32) #void;

pub foreign fn LoadFileData(fileName #i8*, dataSize #i32*) #u8*;

pub foreign fn UnloadFileData(data #u8*) #void;

pub foreign fn SaveFileData() #i32;

pub foreign fn ExportDataAsCode() #i32;

pub foreign fn LoadFileText(fileName #i8*) #i8*;

pub foreign fn UnloadFileText(text #i8*) #void;

pub foreign fn SaveFileText() #i32;

pub foreign fn FileExists() #i32;

pub foreign fn DirectoryExists() #i32;

pub foreign fn IsFileExtension() #i32;

pub foreign fn GetFileLength(fileName #i8*) #i32;

pub foreign fn GetFileExtension(fileName #i8*) #i8*;

pub foreign fn GetFileName(filePath #i8*) #i8*;

pub foreign fn GetFileNameWithoutExt(filePath #i8*) #i8*;

pub foreign fn GetDirectoryPath(filePath #i8*) #i8*;

pub foreign fn GetPrevDirectoryPath(dirPath #i8*) #i8*;

pub foreign fn GetWorkingDirectory() #i8*;

pub foreign fn GetApplicationDirectory() #i8*;

pub foreign fn ChangeDirectory() #i32;

pub foreign fn IsPathFile() #i32;

pub foreign fn LoadDirectoryFiles(dirPath #i8*) #FilePathList;

pub foreign fn LoadDirectoryFilesEx(basePath #i8*, filter #i8*, scanSubdirs #(#i32*) #i32) #FilePathList;

pub foreign fn UnloadDirectoryFiles(files #FilePathList) #void;

pub foreign fn IsFileDropped() #i32;

pub foreign fn LoadDroppedFiles() #FilePathList;

pub foreign fn UnloadDroppedFiles(files #FilePathList) #void;

pub foreign fn GetFileModTime(fileName #i8*) #i64;

pub foreign fn CompressData(data #u8*, dataSize #i32, compDataSize #i32*) #u8*;

pub foreign fn DecompressData(compData #u8*, compDataSize #i32, dataSize #i32*) #u8*;

pub foreign fn EncodeDataBase64(data #u8*, dataSize #i32, outputSize #i32*) #i8*;

pub foreign fn DecodeDataBase64(data #u8*, outputSize #i32*) #u8*;

pub foreign fn LoadAutomationEventList(fileName #i8*) #AutomationEventList;

pub foreign fn UnloadAutomationEventList(list #AutomationEventList*) #void;

pub foreign fn ExportAutomationEventList() #i32;

pub foreign fn SetAutomationEventList(list #AutomationEventList*) #void;

pub foreign fn SetAutomationEventBaseFrame(frame #i32) #void;

pub foreign fn StartAutomationEventRecording() #void;

pub foreign fn StopAutomationEventRecording() #void;

pub foreign fn PlayAutomationEvent(event #AutomationEvent) #void;

pub foreign fn IsKeyPressed() #i32;

pub foreign fn IsKeyPressedRepeat() #i32;

pub foreign fn IsKeyDown() #i32;

pub foreign fn IsKeyReleased() #i32;

pub foreign fn IsKeyUp() #i32;

pub foreign fn GetKeyPressed() #i32;

pub foreign fn GetCharPressed() #i32;

pub foreign fn SetExitKey(key #i32) #void;

pub foreign fn IsGamepadAvailable() #i32;

pub foreign fn GetGamepadName(gamepad #i32) #i8*;

pub foreign fn IsGamepadButtonPressed() #i32;

pub foreign fn IsGamepadButtonDown() #i32;

pub foreign fn IsGamepadButtonReleased() #i32;

pub foreign fn IsGamepadButtonUp() #i32;

pub foreign fn GetGamepadButtonPressed() #i32;

pub foreign fn GetGamepadAxisCount(gamepad #i32) #i32;

pub foreign fn GetGamepadAxisMovement(gamepad #i32, axis #i32) #f32;

pub foreign fn SetGamepadMappings(mappings #i8*) #i32;

pub foreign fn IsMouseButtonPressed() #i32;

pub foreign fn IsMouseButtonDown() #i32;

pub foreign fn IsMouseButtonReleased() #i32;

pub foreign fn IsMouseButtonUp() #i32;

pub foreign fn GetMouseX() #i32;

pub foreign fn GetMouseY() #i32;

pub foreign fn GetMousePosition() #Vector2;

pub foreign fn GetMouseDelta() #Vector2;

pub foreign fn SetMousePosition(x #i32, y #i32) #void;

pub foreign fn SetMouseOffset(offsetX #i32, offsetY #i32) #void;

pub foreign fn SetMouseScale(scaleX #f32, scaleY #f32) #void;

pub foreign fn GetMouseWheelMove() #f32;

pub foreign fn GetMouseWheelMoveV() #Vector2;

pub foreign fn SetMouseCursor(cursor #i32) #void;

pub foreign fn GetTouchX() #i32;

pub foreign fn GetTouchY() #i32;

pub foreign fn GetTouchPosition(index #i32) #Vector2;

pub foreign fn GetTouchPointId(index #i32) #i32;

pub foreign fn GetTouchPointCount() #i32;

pub foreign fn SetGesturesEnabled(flags #u32) #void;

pub foreign fn IsGestureDetected() #i32;

pub foreign fn GetGestureDetected() #i32;

pub foreign fn GetGestureHoldDuration() #f32;

pub foreign fn GetGestureDragVector() #Vector2;

pub foreign fn GetGestureDragAngle() #f32;

pub foreign fn GetGesturePinchVector() #Vector2;

pub foreign fn GetGesturePinchAngle() #f32;

pub foreign fn UpdateCamera(camera #Camera3D*, mode #i32) #void;

pub foreign fn UpdateCameraPro(camera #Camera3D*, movement #Vector3, rotation #Vector3, zoom #f32) #void;

pub foreign fn SetShapesTexture(texture #Texture, source #Rectangle) #void;

pub foreign fn DrawPixel(posX #i32, posY #i32, color #Color) #void;

pub foreign fn DrawPixelV(position #Vector2, color #Color) #void;

pub foreign fn DrawLine(startPosX #i32, startPosY #i32, endPosX #i32, endPosY #i32, color #Color) #void;

pub foreign fn DrawLineV(startPos #Vector2, endPos #Vector2, color #Color) #void;

pub foreign fn DrawLineEx(startPos #Vector2, endPos #Vector2, thick #f32, color #Color) #void;

pub foreign fn DrawLineStrip(points #Vector2*, pointCount #i32, color #Color) #void;

pub foreign fn DrawLineBezier(startPos #Vector2, endPos #Vector2, thick #f32, color #Color) #void;

pub foreign fn DrawCircle(centerX #i32, centerY #i32, radius #f32, color #Color) #void;

pub foreign fn DrawCircleSector(center #Vector2, radius #f32, startAngle #f32, endAngle #f32, segments #i32, color #Color) #void;

pub foreign fn DrawCircleSectorLines(center #Vector2, radius #f32, startAngle #f32, endAngle #f32, segments #i32, color #Color) #void;

pub foreign fn DrawCircleGradient(centerX #i32, centerY #i32, radius #f32, color1 #Color, color2 #Color) #void;

pub foreign fn DrawCircleV(center #Vector2, radius #f32, color #Color) #void;

pub foreign fn DrawCircleLines(centerX #i32, centerY #i32, radius #f32, color #Color) #void;

pub foreign fn DrawCircleLinesV(center #Vector2, radius #f32, color #Color) #void;

pub foreign fn DrawEllipse(centerX #i32, centerY #i32, radiusH #f32, radiusV #f32, color #Color) #void;

pub foreign fn DrawEllipseLines(centerX #i32, centerY #i32, radiusH #f32, radiusV #f32, color #Color) #void;

pub foreign fn DrawRing(center #Vector2, innerRadius #f32, outerRadius #f32, startAngle #f32, endAngle #f32, segments #i32, color #Color) #void;

pub foreign fn DrawRingLines(center #Vector2, innerRadius #f32, outerRadius #f32, startAngle #f32, endAngle #f32, segments #i32, color #Color) #void;

pub foreign fn DrawRectangle(posX #i32, posY #i32, width #i32, height #i32, color #Color) #void;

pub foreign fn DrawRectangleV(position #Vector2, size #Vector2, color #Color) #void;

pub foreign fn DrawRectangleRec(rec #Rectangle, color #Color) #void;

pub foreign fn DrawRectanglePro(rec #Rectangle, origin #Vector2, rotation #f32, color #Color) #void;

pub foreign fn DrawRectangleGradientV(posX #i32, posY #i32, width #i32, height #i32, color1 #Color, color2 #Color) #void;

pub foreign fn DrawRectangleGradientH(posX #i32, posY #i32, width #i32, height #i32, color1 #Color, color2 #Color) #void;

pub foreign fn DrawRectangleGradientEx(rec #Rectangle, col1 #Color, col2 #Color, col3 #Color, col4 #Color) #void;

pub foreign fn DrawRectangleLines(posX #i32, posY #i32, width #i32, height #i32, color #Color) #void;

pub foreign fn DrawRectangleLinesEx(rec #Rectangle, lineThick #f32, color #Color) #void;

pub foreign fn DrawRectangleRounded(rec #Rectangle, roundness #f32, segments #i32, color #Color) #void;

pub foreign fn DrawRectangleRoundedLines(rec #Rectangle, roundness #f32, segments #i32, lineThick #f32, color #Color) #void;

pub foreign fn DrawTriangle(v1 #Vector2, v2 #Vector2, v3 #Vector2, color #Color) #void;

pub foreign fn DrawTriangleLines(v1 #Vector2, v2 #Vector2, v3 #Vector2, color #Color) #void;

pub foreign fn DrawTriangleFan(points #Vector2*, pointCount #i32, color #Color) #void;

pub foreign fn DrawTriangleStrip(points #Vector2*, pointCount #i32, color #Color) #void;

pub foreign fn DrawPoly(center #Vector2, sides #i32, radius #f32, rotation #f32, color #Color) #void;

pub foreign fn DrawPolyLines(center #Vector2, sides #i32, radius #f32, rotation #f32, color #Color) #void;

pub foreign fn DrawPolyLinesEx(center #Vector2, sides #i32, radius #f32, rotation #f32, lineThick #f32, color #Color) #void;

pub foreign fn DrawSplineLinear(points #Vector2*, pointCount #i32, thick #f32, color #Color) #void;

pub foreign fn DrawSplineBasis(points #Vector2*, pointCount #i32, thick #f32, color #Color) #void;

pub foreign fn DrawSplineCatmullRom(points #Vector2*, pointCount #i32, thick #f32, color #Color) #void;

pub foreign fn DrawSplineBezierQuadratic(points #Vector2*, pointCount #i32, thick #f32, color #Color) #void;

pub foreign fn DrawSplineBezierCubic(points #Vector2*, pointCount #i32, thick #f32, color #Color) #void;

pub foreign fn DrawSplineSegmentLinear(p1 #Vector2, p2 #Vector2, thick #f32, color #Color) #void;

pub foreign fn DrawSplineSegmentBasis(p1 #Vector2, p2 #Vector2, p3 #Vector2, p4 #Vector2, thick #f32, color #Color) #void;

pub foreign fn DrawSplineSegmentCatmullRom(p1 #Vector2, p2 #Vector2, p3 #Vector2, p4 #Vector2, thick #f32, color #Color) #void;

pub foreign fn DrawSplineSegmentBezierQuadratic(p1 #Vector2, c2 #Vector2, p3 #Vector2, thick #f32, color #Color) #void;

pub foreign fn DrawSplineSegmentBezierCubic(p1 #Vector2, c2 #Vector2, c3 #Vector2, p4 #Vector2, thick #f32, color #Color) #void;

pub foreign fn GetSplinePointLinear(startPos #Vector2, endPos #Vector2, t #f32) #Vector2;

pub foreign fn GetSplinePointBasis(p1 #Vector2, p2 #Vector2, p3 #Vector2, p4 #Vector2, t #f32) #Vector2;

pub foreign fn GetSplinePointCatmullRom(p1 #Vector2, p2 #Vector2, p3 #Vector2, p4 #Vector2, t #f32) #Vector2;

pub foreign fn GetSplinePointBezierQuad(p1 #Vector2, c2 #Vector2, p3 #Vector2, t #f32) #Vector2;

pub foreign fn GetSplinePointBezierCubic(p1 #Vector2, c2 #Vector2, c3 #Vector2, p4 #Vector2, t #f32) #Vector2;

pub foreign fn CheckCollisionRecs() #i32;

pub foreign fn CheckCollisionCircles() #i32;

pub foreign fn CheckCollisionCircleRec() #i32;

pub foreign fn CheckCollisionPointRec() #i32;

pub foreign fn CheckCollisionPointCircle() #i32;

pub foreign fn CheckCollisionPointTriangle() #i32;

pub foreign fn CheckCollisionPointPoly() #i32;

pub foreign fn CheckCollisionLines() #i32;

pub foreign fn CheckCollisionPointLine() #i32;

pub foreign fn GetCollisionRec(rec1 #Rectangle, rec2 #Rectangle) #Rectangle;

pub foreign fn LoadImage(fileName #i8*) #Image;

pub foreign fn LoadImageRaw(fileName #i8*, width #i32, height #i32, format #i32, headerSize #i32) #Image;

pub foreign fn LoadImageSvg(fileNameOrString #i8*, width #i32, height #i32) #Image;

pub foreign fn LoadImageAnim(fileName #i8*, frames #i32*) #Image;

pub foreign fn LoadImageFromMemory(fileType #i8*, fileData #u8*, dataSize #i32) #Image;

pub foreign fn LoadImageFromTexture(texture #Texture) #Image;

pub foreign fn LoadImageFromScreen() #Image;

pub foreign fn IsImageReady() #i32;

pub foreign fn UnloadImage(image #Image) #void;

pub foreign fn ExportImage() #i32;

pub foreign fn ExportImageToMemory(image #Image, fileType #i8*, fileSize #i32*) #u8*;

pub foreign fn ExportImageAsCode() #i32;

pub foreign fn GenImageColor(width #i32, height #i32, color #Color) #Image;

pub foreign fn GenImageGradientLinear(width #i32, height #i32, direction #i32, start #Color, end #Color) #Image;

pub foreign fn GenImageGradientRadial(width #i32, height #i32, density #f32, inner #Color, outer #Color) #Image;

pub foreign fn GenImageGradientSquare(width #i32, height #i32, density #f32, inner #Color, outer #Color) #Image;

pub foreign fn GenImageChecked(width #i32, height #i32, checksX #i32, checksY #i32, col1 #Color, col2 #Color) #Image;

pub foreign fn GenImageWhiteNoise(width #i32, height #i32, factor #f32) #Image;

pub foreign fn GenImagePerlinNoise(width #i32, height #i32, offsetX #i32, offsetY #i32, scale #f32) #Image;

pub foreign fn GenImageCellular(width #i32, height #i32, tileSize #i32) #Image;

pub foreign fn GenImageText(width #i32, height #i32, text #i8*) #Image;

pub foreign fn ImageCopy(image #Image) #Image;

pub foreign fn ImageFromImage(image #Image, rec #Rectangle) #Image;

pub foreign fn ImageText(text #i8*, fontSize #i32, color #Color) #Image;

pub foreign fn ImageTextEx(font #Font, text #i8*, fontSize #f32, spacing #f32, tint #Color) #Image;

pub foreign fn ImageFormat(image #Image*, newFormat #i32) #void;

pub foreign fn ImageToPOT(image #Image*, fill #Color) #void;

pub foreign fn ImageCrop(image #Image*, crop #Rectangle) #void;

pub foreign fn ImageAlphaCrop(image #Image*, threshold #f32) #void;

pub foreign fn ImageAlphaClear(image #Image*, color #Color, threshold #f32) #void;

pub foreign fn ImageAlphaMask(image #Image*, alphaMask #Image) #void;

pub foreign fn ImageAlphaPremultiply(image #Image*) #void;

pub foreign fn ImageBlurGaussian(image #Image*, blurSize #i32) #void;

pub foreign fn ImageResize(image #Image*, newWidth #i32, newHeight #i32) #void;

pub foreign fn ImageResizeNN(image #Image*, newWidth #i32, newHeight #i32) #void;

pub foreign fn ImageResizeCanvas(image #Image*, newWidth #i32, newHeight #i32, offsetX #i32, offsetY #i32, fill #Color) #void;

pub foreign fn ImageMipmaps(image #Image*) #void;

pub foreign fn ImageDither(image #Image*, rBpp #i32, gBpp #i32, bBpp #i32, aBpp #i32) #void;

pub foreign fn ImageFlipVertical(image #Image*) #void;

pub foreign fn ImageFlipHorizontal(image #Image*) #void;

pub foreign fn ImageRotate(image #Image*, degrees #i32) #void;

pub foreign fn ImageRotateCW(image #Image*) #void;

pub foreign fn ImageRotateCCW(image #Image*) #void;

pub foreign fn ImageColorTint(image #Image*, color #Color) #void;

pub foreign fn ImageColorInvert(image #Image*) #void;

pub foreign fn ImageColorGrayscale(image #Image*) #void;

pub foreign fn ImageColorContrast(image #Image*, contrast #f32) #void;

pub foreign fn ImageColorBrightness(image #Image*, brightness #i32) #void;

pub foreign fn ImageColorReplace(image #Image*, color #Color, replace #Color) #void;

pub foreign fn LoadImageColors(image #Image) #Color*;

pub foreign fn LoadImagePalette(image #Image, maxPaletteSize #i32, colorCount #i32*) #Color*;

pub foreign fn UnloadImageColors(colors #Color*) #void;

pub foreign fn UnloadImagePalette(colors #Color*) #void;

pub foreign fn GetImageAlphaBorder(image #Image, threshold #f32) #Rectangle;

pub foreign fn GetImageColor(image #Image, x #i32, y #i32) #Color;

pub foreign fn ImageClearBackground(dst #Image*, color #Color) #void;

pub foreign fn ImageDrawPixel(dst #Image*, posX #i32, posY #i32, color #Color) #void;

pub foreign fn ImageDrawPixelV(dst #Image*, position #Vector2, color #Color) #void;

pub foreign fn ImageDrawLine(dst #Image*, startPosX #i32, startPosY #i32, endPosX #i32, endPosY #i32, color #Color) #void;

pub foreign fn ImageDrawLineV(dst #Image*, start #Vector2, end #Vector2, color #Color) #void;

pub foreign fn ImageDrawCircle(dst #Image*, centerX #i32, centerY #i32, radius #i32, color #Color) #void;

pub foreign fn ImageDrawCircleV(dst #Image*, center #Vector2, radius #i32, color #Color) #void;

pub foreign fn ImageDrawCircleLines(dst #Image*, centerX #i32, centerY #i32, radius #i32, color #Color) #void;

pub foreign fn ImageDrawCircleLinesV(dst #Image*, center #Vector2, radius #i32, color #Color) #void;

pub foreign fn ImageDrawRectangle(dst #Image*, posX #i32, posY #i32, width #i32, height #i32, color #Color) #void;

pub foreign fn ImageDrawRectangleV(dst #Image*, position #Vector2, size #Vector2, color #Color) #void;

pub foreign fn ImageDrawRectangleRec(dst #Image*, rec #Rectangle, color #Color) #void;

pub foreign fn ImageDrawRectangleLines(dst #Image*, rec #Rectangle, thick #i32, color #Color) #void;

pub foreign fn ImageDraw(dst #Image*, src #Image, srcRec #Rectangle, dstRec #Rectangle, tint #Color) #void;

pub foreign fn ImageDrawText(dst #Image*, text #i8*, posX #i32, posY #i32, fontSize #i32, color #Color) #void;

pub foreign fn ImageDrawTextEx(dst #Image*, font #Font, text #i8*, position #Vector2, fontSize #f32, spacing #f32, tint #Color) #void;

pub foreign fn LoadTexture(fileName #i8*) #Texture;

pub foreign fn LoadTextureFromImage(image #Image) #Texture;

pub foreign fn LoadTextureCubemap(image #Image, layout #i32) #Texture;

pub foreign fn LoadRenderTexture(width #i32, height #i32) #RenderTexture;

pub foreign fn IsTextureReady() #i32;

pub foreign fn UnloadTexture(texture #Texture) #void;

pub foreign fn IsRenderTextureReady() #i32;

pub foreign fn UnloadRenderTexture(target #RenderTexture) #void;

pub foreign fn UpdateTexture(texture #Texture, pixels #void*) #void;

pub foreign fn UpdateTextureRec(texture #Texture, rec #Rectangle, pixels #void*) #void;

pub foreign fn GenTextureMipmaps(texture #Texture*) #void;

pub foreign fn SetTextureFilter(texture #Texture, filter #i32) #void;

pub foreign fn SetTextureWrap(texture #Texture, wrap #i32) #void;

pub foreign fn DrawTexture(texture #Texture, posX #i32, posY #i32, tint #Color) #void;

pub foreign fn DrawTextureV(texture #Texture, position #Vector2, tint #Color) #void;

pub foreign fn DrawTextureEx(texture #Texture, position #Vector2, rotation #f32, scale #f32, tint #Color) #void;

pub foreign fn DrawTextureRec(texture #Texture, source #Rectangle, position #Vector2, tint #Color) #void;

pub foreign fn DrawTexturePro(texture #Texture, source #Rectangle, dest #Rectangle, origin #Vector2, rotation #f32, tint #Color) #void;

pub foreign fn DrawTextureNPatch(texture #Texture, nPatchInfo #NPatchInfo, dest #Rectangle, origin #Vector2, rotation #f32, tint #Color) #void;

pub foreign fn Fade(color #Color, alpha #f32) #Color;

pub foreign fn ColorToInt(color #Color) #i32;

pub foreign fn ColorNormalize(color #Color) #Vector4;

pub foreign fn ColorFromNormalized(normalized #Vector4) #Color;

pub foreign fn ColorToHSV(color #Color) #Vector3;

pub foreign fn ColorFromHSV(hue #f32, saturation #f32, value #f32) #Color;

pub foreign fn ColorTint(color #Color, tint #Color) #Color;

pub foreign fn ColorBrightness(color #Color, factor #f32) #Color;

pub foreign fn ColorContrast(color #Color, contrast #f32) #Color;

pub foreign fn ColorAlpha(color #Color, alpha #f32) #Color;

pub foreign fn ColorAlphaBlend(dst #Color, src #Color, tint #Color) #Color;

pub foreign fn GetColor(hexValue #u32) #Color;

pub foreign fn GetPixelColor(srcPtr #void*, format #i32) #Color;

pub foreign fn SetPixelColor(dstPtr #void*, color #Color, format #i32) #void;

pub foreign fn GetPixelDataSize(width #i32, height #i32, format #i32) #i32;

pub foreign fn GetFontDefault() #Font;

pub foreign fn LoadFont(fileName #i8*) #Font;

pub foreign fn LoadFontEx(fileName #i8*, fontSize #i32, codepoints #i32*, codepointCount #i32) #Font;

pub foreign fn LoadFontFromImage(image #Image, key #Color, firstChar #i32) #Font;

pub foreign fn LoadFontFromMemory(fileType #i8*, fileData #u8*, dataSize #i32, fontSize #i32, codepoints #i32*, codepointCount #i32) #Font;

pub foreign fn IsFontReady() #i32;

pub foreign fn LoadFontData(fileData #u8*, dataSize #i32, fontSize #i32, codepoints #i32*, codepointCount #i32, type #i32) #GlyphInfo*;

pub foreign fn GenImageFontAtlas(glyphs #GlyphInfo*, glyphRecs #Rectangle**, glyphCount #i32, fontSize #i32, padding #i32, packMethod #i32) #Image;

pub foreign fn UnloadFontData(glyphs #GlyphInfo*, glyphCount #i32) #void;

pub foreign fn UnloadFont(font #Font) #void;

pub foreign fn ExportFontAsCode() #i32;

pub foreign fn DrawFPS(posX #i32, posY #i32) #void;

pub foreign fn DrawText(text #i8*, posX #i32, posY #i32, fontSize #i32, color #Color) #void;

pub foreign fn DrawTextEx(font #Font, text #i8*, position #Vector2, fontSize #f32, spacing #f32, tint #Color) #void;

pub foreign fn DrawTextPro(font #Font, text #i8*, position #Vector2, origin #Vector2, rotation #f32, fontSize #f32, spacing #f32, tint #Color) #void;

pub foreign fn DrawTextCodepoint(font #Font, codepoint #i32, position #Vector2, fontSize #f32, tint #Color) #void;

pub foreign fn DrawTextCodepoints(font #Font, codepoints #i32*, codepointCount #i32, position #Vector2, fontSize #f32, spacing #f32, tint #Color) #void;

pub foreign fn SetTextLineSpacing(spacing #i32) #void;

pub foreign fn MeasureText(text #i8*, fontSize #i32) #i32;

pub foreign fn MeasureTextEx(font #Font, text #i8*, fontSize #f32, spacing #f32) #Vector2;

pub foreign fn GetGlyphIndex(font #Font, codepoint #i32) #i32;

pub foreign fn GetGlyphInfo(font #Font, codepoint #i32) #GlyphInfo;

pub foreign fn GetGlyphAtlasRec(font #Font, codepoint #i32) #Rectangle;

pub foreign fn LoadUTF8(codepoints #i32*, length #i32) #i8*;

pub foreign fn UnloadUTF8(text #i8*) #void;

pub foreign fn LoadCodepoints(text #i8*, count #i32*) #i32*;

pub foreign fn UnloadCodepoints(codepoints #i32*) #void;

pub foreign fn GetCodepointCount(text #i8*) #i32;

pub foreign fn GetCodepoint(text #i8*, codepointSize #i32*) #i32;

pub foreign fn GetCodepointNext(text #i8*, codepointSize #i32*) #i32;

pub foreign fn GetCodepointPrevious(text #i8*, codepointSize #i32*) #i32;

pub foreign fn CodepointToUTF8(codepoint #i32, utf8Size #i32*) #i8*;

pub foreign fn TextCopy(dst #i8*, src #i8*) #i32;

pub foreign fn TextIsEqual() #i32;

pub foreign fn TextLength(text #i8*) #u32;

pub foreign fn TextFormat(text #i8*, ...) #i8*;

pub foreign fn TextSubtext(text #i8*, position #i32, length #i32) #i8*;

pub foreign fn TextReplace(text #i8*, replace #i8*, by #i8*) #i8*;

pub foreign fn TextInsert(text #i8*, insert #i8*, position #i32) #i8*;

pub foreign fn TextJoin(textList #i8**, count #i32, delimiter #i8*) #i8*;

pub foreign fn TextSplit(text #i8*, delimiter #i8, count #i32*) #i8**;

pub foreign fn TextAppend(text #i8*, append #i8*, position #i32*) #void;

pub foreign fn TextFindIndex(text #i8*, find #i8*) #i32;

pub foreign fn TextToUpper(text #i8*) #i8*;

pub foreign fn TextToLower(text #i8*) #i8*;

pub foreign fn TextToPascal(text #i8*) #i8*;

pub foreign fn TextToInteger(text #i8*) #i32;

pub foreign fn DrawLine3D(startPos #Vector3, endPos #Vector3, color #Color) #void;

pub foreign fn DrawPoint3D(position #Vector3, color #Color) #void;

pub foreign fn DrawCircle3D(center #Vector3, radius #f32, rotationAxis #Vector3, rotationAngle #f32, color #Color) #void;

pub foreign fn DrawTriangle3D(v1 #Vector3, v2 #Vector3, v3 #Vector3, color #Color) #void;

pub foreign fn DrawTriangleStrip3D(points #Vector3*, pointCount #i32, color #Color) #void;

pub foreign fn DrawCube(position #Vector3, width #f32, height #f32, length #f32, color #Color) #void;

pub foreign fn DrawCubeV(position #Vector3, size #Vector3, color #Color) #void;

pub foreign fn DrawCubeWires(position #Vector3, width #f32, height #f32, length #f32, color #Color) #void;

pub foreign fn DrawCubeWiresV(position #Vector3, size #Vector3, color #Color) #void;

pub foreign fn DrawSphere(centerPos #Vector3, radius #f32, color #Color) #void;

pub foreign fn DrawSphereEx(centerPos #Vector3, radius #f32, rings #i32, slices #i32, color #Color) #void;

pub foreign fn DrawSphereWires(centerPos #Vector3, radius #f32, rings #i32, slices #i32, color #Color) #void;

pub foreign fn DrawCylinder(position #Vector3, radiusTop #f32, radiusBottom #f32, height #f32, slices #i32, color #Color) #void;

pub foreign fn DrawCylinderEx(startPos #Vector3, endPos #Vector3, startRadius #f32, endRadius #f32, sides #i32, color #Color) #void;

pub foreign fn DrawCylinderWires(position #Vector3, radiusTop #f32, radiusBottom #f32, height #f32, slices #i32, color #Color) #void;

pub foreign fn DrawCylinderWiresEx(startPos #Vector3, endPos #Vector3, startRadius #f32, endRadius #f32, sides #i32, color #Color) #void;

pub foreign fn DrawCapsule(startPos #Vector3, endPos #Vector3, radius #f32, slices #i32, rings #i32, color #Color) #void;

pub foreign fn DrawCapsuleWires(startPos #Vector3, endPos #Vector3, radius #f32, slices #i32, rings #i32, color #Color) #void;

pub foreign fn DrawPlane(centerPos #Vector3, size #Vector2, color #Color) #void;

pub foreign fn DrawRay(ray #Ray, color #Color) #void;

pub foreign fn DrawGrid(slices #i32, spacing #f32) #void;

pub foreign fn LoadModel(fileName #i8*) #Model;

pub foreign fn LoadModelFromMesh(mesh #Mesh) #Model;

pub foreign fn IsModelReady() #i32;

pub foreign fn UnloadModel(model #Model) #void;

pub foreign fn GetModelBoundingBox(model #Model) #BoundingBox;

pub foreign fn DrawModel(model #Model, position #Vector3, scale #f32, tint #Color) #void;

pub foreign fn DrawModelEx(model #Model, position #Vector3, rotationAxis #Vector3, rotationAngle #f32, scale #Vector3, tint #Color) #void;

pub foreign fn DrawModelWires(model #Model, position #Vector3, scale #f32, tint #Color) #void;

pub foreign fn DrawModelWiresEx(model #Model, position #Vector3, rotationAxis #Vector3, rotationAngle #f32, scale #Vector3, tint #Color) #void;

pub foreign fn DrawBoundingBox(box #BoundingBox, color #Color) #void;

pub foreign fn DrawBillboard(camera #Camera3D, texture #Texture, position #Vector3, size #f32, tint #Color) #void;

pub foreign fn DrawBillboardRec(camera #Camera3D, texture #Texture, source #Rectangle, position #Vector3, size #Vector2, tint #Color) #void;

pub foreign fn DrawBillboardPro(camera #Camera3D, texture #Texture, source #Rectangle, position #Vector3, up #Vector3, size #Vector2, origin #Vector2, rotation #f32, tint #Color) #void;

pub foreign fn UploadMesh(mesh #Mesh*, dynamic #(#i32*) #i32) #void;

pub foreign fn UpdateMeshBuffer(mesh #Mesh, index #i32, data #void*, dataSize #i32, offset #i32) #void;

pub foreign fn UnloadMesh(mesh #Mesh) #void;

pub foreign fn DrawMesh(mesh #Mesh, material #Material, transform #Matrix) #void;

pub foreign fn DrawMeshInstanced(mesh #Mesh, material #Material, transforms #Matrix*, instances #i32) #void;

pub foreign fn ExportMesh() #i32;

pub foreign fn GetMeshBoundingBox(mesh #Mesh) #BoundingBox;

pub foreign fn GenMeshTangents(mesh #Mesh*) #void;

pub foreign fn GenMeshPoly(sides #i32, radius #f32) #Mesh;

pub foreign fn GenMeshPlane(width #f32, length #f32, resX #i32, resZ #i32) #Mesh;

pub foreign fn GenMeshCube(width #f32, height #f32, length #f32) #Mesh;

pub foreign fn GenMeshSphere(radius #f32, rings #i32, slices #i32) #Mesh;

pub foreign fn GenMeshHemiSphere(radius #f32, rings #i32, slices #i32) #Mesh;

pub foreign fn GenMeshCylinder(radius #f32, height #f32, slices #i32) #Mesh;

pub foreign fn GenMeshCone(radius #f32, height #f32, slices #i32) #Mesh;

pub foreign fn GenMeshTorus(radius #f32, size #f32, radSeg #i32, sides #i32) #Mesh;

pub foreign fn GenMeshKnot(radius #f32, size #f32, radSeg #i32, sides #i32) #Mesh;

pub foreign fn GenMeshHeightmap(heightmap #Image, size #Vector3) #Mesh;

pub foreign fn GenMeshCubicmap(cubicmap #Image, cubeSize #Vector3) #Mesh;

pub foreign fn LoadMaterials(fileName #i8*, materialCount #i32*) #Material*;

pub foreign fn LoadMaterialDefault() #Material;

pub foreign fn IsMaterialReady() #i32;

pub foreign fn UnloadMaterial(material #Material) #void;

pub foreign fn SetMaterialTexture(material #Material*, mapType #i32, texture #Texture) #void;

pub foreign fn SetModelMeshMaterial(model #Model*, meshId #i32, materialId #i32) #void;

pub foreign fn LoadModelAnimations(fileName #i8*, animCount #i32*) #ModelAnimation*;

pub foreign fn UpdateModelAnimation(model #Model, anim #ModelAnimation, frame #i32) #void;

pub foreign fn UnloadModelAnimation(anim #ModelAnimation) #void;

pub foreign fn UnloadModelAnimations(animations #ModelAnimation*, animCount #i32) #void;

pub foreign fn IsModelAnimationValid() #i32;

pub foreign fn CheckCollisionSpheres() #i32;

pub foreign fn CheckCollisionBoxes() #i32;

pub foreign fn CheckCollisionBoxSphere() #i32;

pub foreign fn GetRayCollisionSphere(ray #Ray, center #Vector3, radius #f32) #RayCollision;

pub foreign fn GetRayCollisionBox(ray #Ray, box #BoundingBox) #RayCollision;

pub foreign fn GetRayCollisionMesh(ray #Ray, mesh #Mesh, transform #Matrix) #RayCollision;

pub foreign fn GetRayCollisionTriangle(ray #Ray, p1 #Vector3, p2 #Vector3, p3 #Vector3) #RayCollision;

pub foreign fn GetRayCollisionQuad(ray #Ray, p1 #Vector3, p2 #Vector3, p3 #Vector3, p4 #Vector3) #RayCollision;

pub foreign fn InitAudioDevice() #void;

pub foreign fn CloseAudioDevice() #void;

pub foreign fn IsAudioDeviceReady() #i32;

pub foreign fn SetMasterVolume(volume #f32) #void;

pub foreign fn GetMasterVolume() #f32;

pub foreign fn LoadWave(fileName #i8*) #Wave;

pub foreign fn LoadWaveFromMemory(fileType #i8*, fileData #u8*, dataSize #i32) #Wave;

pub foreign fn IsWaveReady() #i32;

pub foreign fn LoadSound(fileName #i8*) #Sound;

pub foreign fn LoadSoundFromWave(wave #Wave) #Sound;

pub foreign fn LoadSoundAlias(source #Sound) #Sound;

pub foreign fn IsSoundReady() #i32;

pub foreign fn UpdateSound(sound #Sound, data #void*, sampleCount #i32) #void;

pub foreign fn UnloadWave(wave #Wave) #void;

pub foreign fn UnloadSound(sound #Sound) #void;

pub foreign fn UnloadSoundAlias(alias #Sound) #void;

pub foreign fn ExportWave() #i32;

pub foreign fn ExportWaveAsCode() #i32;

pub foreign fn PlaySound(sound #Sound) #void;

pub foreign fn StopSound(sound #Sound) #void;

pub foreign fn PauseSound(sound #Sound) #void;

pub foreign fn ResumeSound(sound #Sound) #void;

pub foreign fn IsSoundPlaying() #i32;

pub foreign fn SetSoundVolume(sound #Sound, volume #f32) #void;

pub foreign fn SetSoundPitch(sound #Sound, pitch #f32) #void;

pub foreign fn SetSoundPan(sound #Sound, pan #f32) #void;

pub foreign fn WaveCopy(wave #Wave) #Wave;

pub foreign fn WaveCrop(wave #Wave*, initSample #i32, finalSample #i32) #void;

pub foreign fn WaveFormat(wave #Wave*, sampleRate #i32, sampleSize #i32, channels #i32) #void;

pub foreign fn LoadWaveSamples(wave #Wave) #f32*;

pub foreign fn UnloadWaveSamples(samples #f32*) #void;

pub foreign fn LoadMusicStream(fileName #i8*) #Music;

pub foreign fn LoadMusicStreamFromMemory(fileType #i8*, data #u8*, dataSize #i32) #Music;

pub foreign fn IsMusicReady() #i32;

pub foreign fn UnloadMusicStream(music #Music) #void;

pub foreign fn PlayMusicStream(music #Music) #void;

pub foreign fn IsMusicStreamPlaying() #i32;

pub foreign fn UpdateMusicStream(music #Music) #void;

pub foreign fn StopMusicStream(music #Music) #void;

pub foreign fn PauseMusicStream(music #Music) #void;

pub foreign fn ResumeMusicStream(music #Music) #void;

pub foreign fn SeekMusicStream(music #Music, position #f32) #void;

pub foreign fn SetMusicVolume(music #Music, volume #f32) #void;

pub foreign fn SetMusicPitch(music #Music, pitch #f32) #void;

pub foreign fn SetMusicPan(music #Music, pan #f32) #void;

pub foreign fn GetMusicTimeLength(music #Music) #f32;

pub foreign fn GetMusicTimePlayed(music #Music) #f32;

pub foreign fn LoadAudioStream(sampleRate #u32, sampleSize #u32, channels #u32) #AudioStream;

pub foreign fn IsAudioStreamReady() #i32;

pub foreign fn UnloadAudioStream(stream #AudioStream) #void;

pub foreign fn UpdateAudioStream(stream #AudioStream, data #void*, frameCount #i32) #void;

pub foreign fn IsAudioStreamProcessed() #i32;

pub foreign fn PlayAudioStream(stream #AudioStream) #void;

pub foreign fn PauseAudioStream(stream #AudioStream) #void;

pub foreign fn ResumeAudioStream(stream #AudioStream) #void;

pub foreign fn IsAudioStreamPlaying() #i32;

pub foreign fn StopAudioStream(stream #AudioStream) #void;

pub foreign fn SetAudioStreamVolume(stream #AudioStream, volume #f32) #void;

pub foreign fn SetAudioStreamPitch(stream #AudioStream, pitch #f32) #void;

pub foreign fn SetAudioStreamPan(stream #AudioStream, pan #f32) #void;

pub foreign fn SetAudioStreamBufferSizeDefault(size #i32) #void;

pub foreign fn SetAudioStreamCallback(stream #AudioStream, callback #(#void*, #u32) #void) #void;

pub foreign fn AttachAudioStreamProcessor(stream #AudioStream, processor #(#void*, #u32) #void) #void;

pub foreign fn DetachAudioStreamProcessor(stream #AudioStream, processor #(#void*, #u32) #void) #void;

pub foreign fn AttachAudioMixedProcessor(processor #(#void*, #u32) #void) #void;

pub foreign fn DetachAudioMixedProcessor(processor #(#void*, #u32) #void) #void;

pub foreign fn rlMatrixMode(mode #i32) #void;

pub foreign fn rlPushMatrix() #void;

pub foreign fn rlPopMatrix() #void;

pub foreign fn rlLoadIdentity() #void;

pub foreign fn rlTranslatef(x #f32, y #f32, z #f32) #void;

pub foreign fn rlRotatef(angle #f32, x #f32, y #f32, z #f32) #void;

pub foreign fn rlScalef(x #f32, y #f32, z #f32) #void;

pub foreign fn rlMultMatrixf(matf #f32*) #void;

pub foreign fn rlFrustum(left #f64, right #f64, bottom #f64, top #f64, znear #f64, zfar #f64) #void;

pub foreign fn rlOrtho(left #f64, right #f64, bottom #f64, top #f64, znear #f64, zfar #f64) #void;

pub foreign fn rlViewport(x #i32, y #i32, width #i32, height #i32) #void;

pub foreign fn rlBegin(mode #i32) #void;

pub foreign fn rlEnd() #void;

pub foreign fn rlVertex2i(x #i32, y #i32) #void;

pub foreign fn rlVertex2f(x #f32, y #f32) #void;

pub foreign fn rlVertex3f(x #f32, y #f32, z #f32) #void;

pub foreign fn rlTexCoord2f(x #f32, y #f32) #void;

pub foreign fn rlNormal3f(x #f32, y #f32, z #f32) #void;

pub foreign fn rlColor4ub(r #u8, g #u8, b #u8, a #u8) #void;

pub foreign fn rlColor3f(x #f32, y #f32, z #f32) #void;

pub foreign fn rlColor4f(x #f32, y #f32, z #f32, w #f32) #void;

pub foreign fn rlEnableVertexArray() #i32;

pub foreign fn rlDisableVertexArray() #void;

pub foreign fn rlEnableVertexBuffer(id #u32) #void;

pub foreign fn rlDisableVertexBuffer() #void;

pub foreign fn rlEnableVertexBufferElement(id #u32) #void;

pub foreign fn rlDisableVertexBufferElement() #void;

pub foreign fn rlEnableVertexAttribute(index #u32) #void;

pub foreign fn rlDisableVertexAttribute(index #u32) #void;

pub foreign fn rlActiveTextureSlot(slot #i32) #void;

pub foreign fn rlEnableTexture(id #u32) #void;

pub foreign fn rlDisableTexture() #void;

pub foreign fn rlEnableTextureCubemap(id #u32) #void;

pub foreign fn rlDisableTextureCubemap() #void;

pub foreign fn rlTextureParameters(id #u32, param #i32, value #i32) #void;

pub foreign fn rlCubemapParameters(id #u32, param #i32, value #i32) #void;

pub foreign fn rlEnableShader(id #u32) #void;

pub foreign fn rlDisableShader() #void;

pub foreign fn rlEnableFramebuffer(id #u32) #void;

pub foreign fn rlDisableFramebuffer() #void;

pub foreign fn rlActiveDrawBuffers(count #i32) #void;

pub foreign fn rlBlitFramebuffer(srcX #i32, srcY #i32, srcWidth #i32, srcHeight #i32, dstX #i32, dstY #i32, dstWidth #i32, dstHeight #i32, bufferMask #i32) #void;

pub foreign fn rlEnableColorBlend() #void;

pub foreign fn rlDisableColorBlend() #void;

pub foreign fn rlEnableDepthTest() #void;

pub foreign fn rlDisableDepthTest() #void;

pub foreign fn rlEnableDepthMask() #void;

pub foreign fn rlDisableDepthMask() #void;

pub foreign fn rlEnableBackfaceCulling() #void;

pub foreign fn rlDisableBackfaceCulling() #void;

pub foreign fn rlSetCullFace(mode #i32) #void;

pub foreign fn rlEnableScissorTest() #void;

pub foreign fn rlDisableScissorTest() #void;

pub foreign fn rlScissor(x #i32, y #i32, width #i32, height #i32) #void;

pub foreign fn rlEnableWireMode() #void;

pub foreign fn rlEnablePointMode() #void;

pub foreign fn rlDisableWireMode() #void;

pub foreign fn rlSetLineWidth(width #f32) #void;

pub foreign fn rlGetLineWidth() #f32;

pub foreign fn rlEnableSmoothLines() #void;

pub foreign fn rlDisableSmoothLines() #void;

pub foreign fn rlEnableStereoRender() #void;

pub foreign fn rlDisableStereoRender() #void;

pub foreign fn rlIsStereoRenderEnabled() #i32;

pub foreign fn rlClearColor(r #u8, g #u8, b #u8, a #u8) #void;

pub foreign fn rlClearScreenBuffers() #void;

pub foreign fn rlCheckErrors() #void;

pub foreign fn rlSetBlendMode(mode #i32) #void;

pub foreign fn rlSetBlendFactors(glSrcFactor #i32, glDstFactor #i32, glEquation #i32) #void;

pub foreign fn rlSetBlendFactorsSeparate(glSrcRGB #i32, glDstRGB #i32, glSrcAlpha #i32, glDstAlpha #i32, glEqRGB #i32, glEqAlpha #i32) #void;

pub foreign fn rlglInit(width #i32, height #i32) #void;

pub foreign fn rlglClose() #void;

pub foreign fn rlLoadExtensions(loader #void*) #void;

pub foreign fn rlGetVersion() #i32;

pub foreign fn rlSetFramebufferWidth(width #i32) #void;

pub foreign fn rlGetFramebufferWidth() #i32;

pub foreign fn rlSetFramebufferHeight(height #i32) #void;

pub foreign fn rlGetFramebufferHeight() #i32;

pub foreign fn rlGetTextureIdDefault() #u32;

pub foreign fn rlGetShaderIdDefault() #u32;

pub foreign fn rlGetShaderLocsDefault() #i32*;

pub foreign fn rlLoadRenderBatch(numBuffers #i32, bufferElements #i32) #rlRenderBatch;

pub foreign fn rlUnloadRenderBatch(batch #rlRenderBatch) #void;

pub foreign fn rlDrawRenderBatch(batch #rlRenderBatch*) #void;

pub foreign fn rlSetRenderBatchActive(batch #rlRenderBatch*) #void;

pub foreign fn rlDrawRenderBatchActive() #void;

pub foreign fn rlCheckRenderBatchLimit() #i32;

pub foreign fn rlSetTexture(id #u32) #void;

pub foreign fn rlLoadVertexArray() #u32;

pub foreign fn rlLoadVertexBuffer(buffer #void*, size #i32, dynamic #(#i32*) #i32) #u32;

pub foreign fn rlLoadVertexBufferElement(buffer #void*, size #i32, dynamic #(#i32*) #i32) #u32;

pub foreign fn rlUpdateVertexBuffer(bufferId #u32, data #void*, dataSize #i32, offset #i32) #void;

pub foreign fn rlUpdateVertexBufferElements(id #u32, data #void*, dataSize #i32, offset #i32) #void;

pub foreign fn rlUnloadVertexArray(vaoId #u32) #void;

pub foreign fn rlUnloadVertexBuffer(vboId #u32) #void;

pub foreign fn rlSetVertexAttribute(index #u32, compSize #i32, type #i32, normalized #(#i32*) #i32, stride #i32, pointer #void*) #void;

pub foreign fn rlSetVertexAttributeDivisor(index #u32, divisor #i32) #void;

pub foreign fn rlSetVertexAttributeDefault(locIndex #i32, value #void*, attribType #i32, count #i32) #void;

pub foreign fn rlDrawVertexArray(offset #i32, count #i32) #void;

pub foreign fn rlDrawVertexArrayElements(offset #i32, count #i32, buffer #void*) #void;

pub foreign fn rlDrawVertexArrayInstanced(offset #i32, count #i32, instances #i32) #void;

pub foreign fn rlDrawVertexArrayElementsInstanced(offset #i32, count #i32, buffer #void*, instances #i32) #void;

pub foreign fn rlLoadTexture(data #void*, width #i32, height #i32, format #i32, mipmapCount #i32) #u32;

pub foreign fn rlLoadTextureDepth(width #i32, height #i32, useRenderBuffer #(#i32*) #i32) #u32;

pub foreign fn rlLoadTextureCubemap(data #void*, size #i32, format #i32) #u32;

pub foreign fn rlUpdateTexture(id #u32, offsetX #i32, offsetY #i32, width #i32, height #i32, format #i32, data #void*) #void;

pub foreign fn rlGetGlTextureFormats(format #i32, glInternalFormat #u32*, glFormat #u32*, glType #u32*) #void;

pub foreign fn rlGetPixelFormatName(format #u32) #i8*;

pub foreign fn rlUnloadTexture(id #u32) #void;

pub foreign fn rlGenTextureMipmaps(id #u32, width #i32, height #i32, format #i32, mipmaps #i32*) #void;

pub foreign fn rlReadTexturePixels(id #u32, width #i32, height #i32, format #i32) #void*;

pub foreign fn rlReadScreenPixels(width #i32, height #i32) #u8*;

pub foreign fn rlLoadFramebuffer(width #i32, height #i32) #u32;

pub foreign fn rlFramebufferAttach(fboId #u32, texId #u32, attachType #i32, texType #i32, mipLevel #i32) #void;

pub foreign fn rlFramebufferComplete() #i32;

pub foreign fn rlUnloadFramebuffer(id #u32) #void;

pub foreign fn rlLoadShaderCode(vsCode #i8*, fsCode #i8*) #u32;

pub foreign fn rlCompileShader(shaderCode #i8*, type #i32) #u32;

pub foreign fn rlLoadShaderProgram(vShaderId #u32, fShaderId #u32) #u32;

pub foreign fn rlUnloadShaderProgram(id #u32) #void;

pub foreign fn rlGetLocationUniform(shaderId #u32, uniformName #i8*) #i32;

pub foreign fn rlGetLocationAttrib(shaderId #u32, attribName #i8*) #i32;

pub foreign fn rlSetUniform(locIndex #i32, value #void*, uniformType #i32, count #i32) #void;

pub foreign fn rlSetUniformMatrix(locIndex #i32, mat #Matrix) #void;

pub foreign fn rlSetUniformSampler(locIndex #i32, textureId #u32) #void;

pub foreign fn rlSetShader(id #u32, locs #i32*) #void;

pub foreign fn rlLoadComputeShaderProgram(shaderId #u32) #u32;

pub foreign fn rlComputeShaderDispatch(groupX #u32, groupY #u32, groupZ #u32) #void;

pub foreign fn rlLoadShaderBuffer(size #u32, data #void*, usageHint #i32) #u32;

pub foreign fn rlUnloadShaderBuffer(ssboId #u32) #void;

pub foreign fn rlUpdateShaderBuffer(id #u32, data #void*, dataSize #u32, offset #u32) #void;

pub foreign fn rlBindShaderBuffer(id #u32, index #u32) #void;

pub foreign fn rlReadShaderBuffer(id #u32, dest #void*, count #u32, offset #u32) #void;

pub foreign fn rlCopyShaderBuffer(destId #u32, srcId #u32, destOffset #u32, srcOffset #u32, count #u32) #void;

pub foreign fn rlGetShaderBufferSize(id #u32) #u32;

pub foreign fn rlBindImageTexture(id #u32, index #u32, format #i32, readonly #(#i32*) #i32) #void;

pub foreign fn rlGetMatrixModelview() #Matrix;

pub foreign fn rlGetMatrixProjection() #Matrix;

pub foreign fn rlGetMatrixTransform() #Matrix;

pub foreign fn rlGetMatrixProjectionStereo(eye #i32) #Matrix;

pub foreign fn rlGetMatrixViewOffsetStereo(eye #i32) #Matrix;

pub foreign fn rlSetMatrixProjection(proj #Matrix) #void;

pub foreign fn rlSetMatrixModelview(view #Matrix) #void;

pub foreign fn rlSetMatrixProjectionStereo(right #Matrix, left #Matrix) #void;

pub foreign fn rlSetMatrixViewOffsetStereo(right #Matrix, left #Matrix) #void;

pub foreign fn rlLoadDrawCube() #void;

pub foreign fn rlLoadDrawQuad() #void;

pub type Vector2 {
    pub x #f32;
    pub y #f32;
}

pub type Vector3 {
    pub x #f32;
    pub y #f32;
    pub z #f32;
}

pub type Vector4 {
    pub x #f32;
    pub y #f32;
    pub z #f32;
    pub w #f32;
}

pub type Matrix {
    pub m0 #f32;
    pub m4 #f32;
    pub m8 #f32;
    pub m12 #f32;
    pub m1 #f32;
    pub m5 #f32;
    pub m9 #f32;
    pub m13 #f32;
    pub m2 #f32;
    pub m6 #f32;
    pub m10 #f32;
    pub m14 #f32;
    pub m3 #f32;
    pub m7 #f32;
    pub m11 #f32;
    pub m15 #f32;
}

pub type float3 {
    pub v #[#f32; 3];
}

pub type float16 {
    pub v #[#f32; 16];
}

pub type anon_raylib_204_16 {
    pub x #f32;
    pub y #f32;
}

pub type anon_raylib_210_16 {
    pub x #f32;
    pub y #f32;
    pub z #f32;
}

pub type anon_raylib_217_16 {
    pub x #f32;
    pub y #f32;
    pub z #f32;
    pub w #f32;
}

pub type anon_raylib_228_16 {
    pub m0 #f32;
    pub m4 #f32;
    pub m8 #f32;
    pub m12 #f32;
    pub m1 #f32;
    pub m5 #f32;
    pub m9 #f32;
    pub m13 #f32;
    pub m2 #f32;
    pub m6 #f32;
    pub m10 #f32;
    pub m14 #f32;
    pub m3 #f32;
    pub m7 #f32;
    pub m11 #f32;
    pub m15 #f32;
}

pub type Color {
    pub r #u8;
    pub g #u8;
    pub b #u8;
    pub a #u8;
}

pub type Rectangle {
    pub x #f32;
    pub y #f32;
    pub width #f32;
    pub height #f32;
}

pub type Image {
    pub data #void*;
    pub width #i32;
    pub height #i32;
    pub mipmaps #i32;
    pub format #i32;
}

pub type Texture {
    pub id #u32;
    pub width #i32;
    pub height #i32;
    pub mipmaps #i32;
    pub format #i32;
}

pub type RenderTexture {
    pub id #u32;
    pub texture #Texture;
    pub depth #Texture;
}

pub type NPatchInfo {
    pub source #Rectangle;
    pub left #i32;
    pub top #i32;
    pub right #i32;
    pub bottom #i32;
    pub layout #i32;
}

pub type GlyphInfo {
    pub value #i32;
    pub offsetX #i32;
    pub offsetY #i32;
    pub advanceX #i32;
    pub image #Image;
}

pub type Font {
    pub baseSize #i32;
    pub glyphCount #i32;
    pub glyphPadding #i32;
    pub texture #Texture;
    pub recs #Rectangle*;
    pub glyphs #GlyphInfo*;
}

pub type Camera3D {
    pub position #Vector3;
    pub target #Vector3;
    pub up #Vector3;
    pub fovy #f32;
    pub projection #i32;
}

pub type Camera2D {
    pub offset #Vector2;
    pub target #Vector2;
    pub rotation #f32;
    pub zoom #f32;
}

pub type Mesh {
    pub vertexCount #i32;
    pub triangleCount #i32;
    pub vertices #f32*;
    pub texcoords #f32*;
    pub texcoords2 #f32*;
    pub normals #f32*;
    pub tangents #f32*;
    pub colors #u8*;
    pub indices #u16*;
    pub animVertices #f32*;
    pub animNormals #f32*;
    pub boneIds #u8*;
    pub boneWeights #f32*;
    pub vaoId #u32;
    pub vboId #u32*;
}

pub type Shader {
    pub id #u32;
    pub locs #i32*;
}

pub type MaterialMap {
    pub texture #Texture;
    pub color #Color;
    pub value #f32;
}

pub type Material {
    pub shader #Shader;
    pub maps #MaterialMap*;
    pub params #[#f32; 4];
}

pub type Transform {
    pub translation #Vector3;
    pub rotation #Vector4;
    pub scale #Vector3;
}

pub type BoneInfo {
    pub name #[#i8; 32];
    pub parent #i32;
}

pub type Model {
    pub transform #Matrix;
    pub meshCount #i32;
    pub materialCount #i32;
    pub meshes #Mesh*;
    pub materials #Material*;
    pub meshMaterial #i32*;
    pub boneCount #i32;
    pub bones #BoneInfo*;
    pub bindPose #Transform*;
}

pub type ModelAnimation {
    pub boneCount #i32;
    pub frameCount #i32;
    pub bones #BoneInfo*;
    pub framePoses #Transform**;
    pub name #[#i8; 32];
}

pub type Ray {
    pub position #Vector3;
    pub direction #Vector3;
}

pub type RayCollision {
    pub hit #i32;
    pub distance #f32;
    pub point #Vector3;
    pub normal #Vector3;
}

pub type BoundingBox {
    pub min #Vector3;
    pub max #Vector3;
}

pub type Wave {
    pub frameCount #u32;
    pub sampleRate #u32;
    pub sampleSize #u32;
    pub channels #u32;
    pub data #void*;
}

pub type rAudioBuffer;

pub type rAudioProcessor;

pub type AudioStream {
    pub buffer #rAudioBuffer*;
    pub processor #rAudioProcessor*;
    pub sampleRate #u32;
    pub sampleSize #u32;
    pub channels #u32;
}

pub type Sound {
    pub stream #AudioStream;
    pub frameCount #u32;
}

pub type Music {
    pub stream #AudioStream;
    pub frameCount #u32;
    pub looping #i32;
    pub ctxType #i32;
    pub ctxData #void*;
}

pub type VrDeviceInfo {
    pub hResolution #i32;
    pub vResolution #i32;
    pub hScreenSize #f32;
    pub vScreenSize #f32;
    pub vScreenCenter #f32;
    pub eyeToScreenDistance #f32;
    pub lensSeparationDistance #f32;
    pub interpupillaryDistance #f32;
    pub lensDistortionValues #[#f32; 4];
    pub chromaAbCorrection #[#f32; 4];
}

pub type VrStereoConfig {
    pub projection #[#Matrix; 2];
    pub viewOffset #[#Matrix; 2];
    pub leftLensCenter #[#f32; 2];
    pub rightLensCenter #[#f32; 2];
    pub leftScreenCenter #[#f32; 2];
    pub rightScreenCenter #[#f32; 2];
    pub scale #[#f32; 2];
    pub scaleIn #[#f32; 2];
}

pub type FilePathList {
    pub capacity #u32;
    pub count #u32;
    pub paths #i8**;
}

pub type AutomationEvent {
    pub frame #u32;
    pub type #u32;
    pub params #[#i32; 4];
}

pub type AutomationEventList {
    pub capacity #u32;
    pub count #u32;
    pub events #AutomationEvent*;
}

pub type rlVertexBuffer {
    pub elementCount #i32;
    pub vertices #f32*;
    pub texcoords #f32*;
    pub colors #u8*;
    pub indices #u32*;
    pub vaoId #u32;
    pub vboId #[#u32; 4];
}

pub type rlDrawCall {
    pub mode #i32;
    pub vertexCount #i32;
    pub vertexAlignment #i32;
    pub textureId #u32;
}

pub type rlRenderBatch {
    pub bufferCount #i32;
    pub currentBuffer #i32;
    pub vertexBuffer #rlVertexBuffer*;
    pub draws #rlDrawCall*;
    pub drawCounter #i32;
    pub currentDepth #f32;
}

pub enum ConfigFlags {
    FLAG_VSYNC_HINT = 64,
    FLAG_FULLSCREEN_MODE = 2,
    FLAG_WINDOW_RESIZABLE = 4,
    FLAG_WINDOW_UNDECORATED = 8,
    FLAG_WINDOW_HIDDEN = 128,
    FLAG_WINDOW_MINIMIZED = 512,
    FLAG_WINDOW_MAXIMIZED = 1024,
    FLAG_WINDOW_UNFOCUSED = 2048,
    FLAG_WINDOW_TOPMOST = 4096,
    FLAG_WINDOW_ALWAYS_RUN = 256,
    FLAG_WINDOW_TRANSPARENT = 16,
    FLAG_WINDOW_HIGHDPI = 8192,
    FLAG_WINDOW_MOUSE_PASSTHROUGH = 16384,
    FLAG_BORDERLESS_WINDOWED_MODE = 32768,
    FLAG_MSAA_4X_HINT = 32,
    FLAG_INTERLACED_HINT = 65536,
}

pub enum TraceLogLevel {
    LOG_ALL = 0,
    LOG_TRACE = 1,
    LOG_DEBUG = 2,
    LOG_INFO = 3,
    LOG_WARNING = 4,
    LOG_ERROR = 5,
    LOG_FATAL = 6,
    LOG_NONE = 7,
}

pub enum KeyboardKey {
    KEY_NULL = 0,
    KEY_APOSTROPHE = 39,
    KEY_COMMA = 44,
    KEY_MINUS = 45,
    KEY_PERIOD = 46,
    KEY_SLASH = 47,
    KEY_ZERO = 48,
    KEY_ONE = 49,
    KEY_TWO = 50,
    KEY_THREE = 51,
    KEY_FOUR = 52,
    KEY_FIVE = 53,
    KEY_SIX = 54,
    KEY_SEVEN = 55,
    KEY_EIGHT = 56,
    KEY_NINE = 57,
    KEY_SEMICOLON = 59,
    KEY_EQUAL = 61,
    KEY_A = 65,
    KEY_B = 66,
    KEY_C = 67,
    KEY_D = 68,
    KEY_E = 69,
    KEY_F = 70,
    KEY_G = 71,
    KEY_H = 72,
    KEY_I = 73,
    KEY_J = 74,
    KEY_K = 75,
    KEY_L = 76,
    KEY_M = 77,
    KEY_N = 78,
    KEY_O = 79,
    KEY_P = 80,
    KEY_Q = 81,
    KEY_R = 82,
    KEY_S = 83,
    KEY_T = 84,
    KEY_U = 85,
    KEY_V = 86,
    KEY_W = 87,
    KEY_X = 88,
    KEY_Y = 89,
    KEY_Z = 90,
    KEY_LEFT_BRACKET = 91,
    KEY_BACKSLASH = 92,
    KEY_RIGHT_BRACKET = 93,
    KEY_GRAVE = 96,
    KEY_SPACE = 32,
    KEY_ESCAPE = 256,
    KEY_ENTER = 257,
    KEY_TAB = 258,
    KEY_BACKSPACE = 259,
    KEY_INSERT = 260,
    KEY_DELETE = 261,
    KEY_RIGHT = 262,
    KEY_LEFT = 263,
    KEY_DOWN = 264,
    KEY_UP = 265,
    KEY_PAGE_UP = 266,
    KEY_PAGE_DOWN = 267,
    KEY_HOME = 268,
    KEY_END = 269,
    KEY_CAPS_LOCK = 280,
    KEY_SCROLL_LOCK = 281,
    KEY_NUM_LOCK = 282,
    KEY_PRINT_SCREEN = 283,
    KEY_PAUSE = 284,
    KEY_F1 = 290,
    KEY_F2 = 291,
    KEY_F3 = 292,
    KEY_F4 = 293,
    KEY_F5 = 294,
    KEY_F6 = 295,
    KEY_F7 = 296,
    KEY_F8 = 297,
    KEY_F9 = 298,
    KEY_F10 = 299,
    KEY_F11 = 300,
    KEY_F12 = 301,
    KEY_LEFT_SHIFT = 340,
    KEY_LEFT_CONTROL = 341,
    KEY_LEFT_ALT = 342,
    KEY_LEFT_SUPER = 343,
    KEY_RIGHT_SHIFT = 344,
    KEY_RIGHT_CONTROL = 345,
    KEY_RIGHT_ALT = 346,
    KEY_RIGHT_SUPER = 347,
    KEY_KB_MENU = 348,
    KEY_KP_0 = 320,
    KEY_KP_1 = 321,
    KEY_KP_2 = 322,
    KEY_KP_3 = 323,
    KEY_KP_4 = 324,
    KEY_KP_5 = 325,
    KEY_KP_6 = 326,
    KEY_KP_7 = 327,
    KEY_KP_8 = 328,
    KEY_KP_9 = 329,
    KEY_KP_DECIMAL = 330,
    KEY_KP_DIVIDE = 331,
    KEY_KP_MULTIPLY = 332,
    KEY_KP_SUBTRACT = 333,
    KEY_KP_ADD = 334,
    KEY_KP_ENTER = 335,
    KEY_KP_EQUAL = 336,
    KEY_BACK = 4,
    KEY_MENU = 82,
    KEY_VOLUME_UP = 24,
    KEY_VOLUME_DOWN = 25,
}

pub enum MouseButton {
    MOUSE_BUTTON_LEFT = 0,
    MOUSE_BUTTON_RIGHT = 1,
    MOUSE_BUTTON_MIDDLE = 2,
    MOUSE_BUTTON_SIDE = 3,
    MOUSE_BUTTON_EXTRA = 4,
    MOUSE_BUTTON_FORWARD = 5,
    MOUSE_BUTTON_BACK = 6,
}

pub enum MouseCursor {
    MOUSE_CURSOR_DEFAULT = 0,
    MOUSE_CURSOR_ARROW = 1,
    MOUSE_CURSOR_IBEAM = 2,
    MOUSE_CURSOR_CROSSHAIR = 3,
    MOUSE_CURSOR_POINTING_HAND = 4,
    MOUSE_CURSOR_RESIZE_EW = 5,
    MOUSE_CURSOR_RESIZE_NS = 6,
    MOUSE_CURSOR_RESIZE_NWSE = 7,
    MOUSE_CURSOR_RESIZE_NESW = 8,
    MOUSE_CURSOR_RESIZE_ALL = 9,
    MOUSE_CURSOR_NOT_ALLOWED = 10,
}

pub enum GamepadButton {
    GAMEPAD_BUTTON_UNKNOWN = 0,
    GAMEPAD_BUTTON_LEFT_FACE_UP = 1,
    GAMEPAD_BUTTON_LEFT_FACE_RIGHT = 2,
    GAMEPAD_BUTTON_LEFT_FACE_DOWN = 3,
    GAMEPAD_BUTTON_LEFT_FACE_LEFT = 4,
    GAMEPAD_BUTTON_RIGHT_FACE_UP = 5,
    GAMEPAD_BUTTON_RIGHT_FACE_RIGHT = 6,
    GAMEPAD_BUTTON_RIGHT_FACE_DOWN = 7,
    GAMEPAD_BUTTON_RIGHT_FACE_LEFT = 8,
    GAMEPAD_BUTTON_LEFT_TRIGGER_1 = 9,
    GAMEPAD_BUTTON_LEFT_TRIGGER_2 = 10,
    GAMEPAD_BUTTON_RIGHT_TRIGGER_1 = 11,
    GAMEPAD_BUTTON_RIGHT_TRIGGER_2 = 12,
    GAMEPAD_BUTTON_MIDDLE_LEFT = 13,
    GAMEPAD_BUTTON_MIDDLE = 14,
    GAMEPAD_BUTTON_MIDDLE_RIGHT = 15,
    GAMEPAD_BUTTON_LEFT_THUMB = 16,
    GAMEPAD_BUTTON_RIGHT_THUMB = 17,
}

pub enum GamepadAxis {
    GAMEPAD_AXIS_LEFT_X = 0,
    GAMEPAD_AXIS_LEFT_Y = 1,
    GAMEPAD_AXIS_RIGHT_X = 2,
    GAMEPAD_AXIS_RIGHT_Y = 3,
    GAMEPAD_AXIS_LEFT_TRIGGER = 4,
    GAMEPAD_AXIS_RIGHT_TRIGGER = 5,
}

pub enum MaterialMapIndex {
    MATERIAL_MAP_ALBEDO = 0,
    MATERIAL_MAP_METALNESS = 1,
    MATERIAL_MAP_NORMAL = 2,
    MATERIAL_MAP_ROUGHNESS = 3,
    MATERIAL_MAP_OCCLUSION = 4,
    MATERIAL_MAP_EMISSION = 5,
    MATERIAL_MAP_HEIGHT = 6,
    MATERIAL_MAP_CUBEMAP = 7,
    MATERIAL_MAP_IRRADIANCE = 8,
    MATERIAL_MAP_PREFILTER = 9,
    MATERIAL_MAP_BRDF = 10,
}

pub enum ShaderLocationIndex {
    SHADER_LOC_VERTEX_POSITION = 0,
    SHADER_LOC_VERTEX_TEXCOORD01 = 1,
    SHADER_LOC_VERTEX_TEXCOORD02 = 2,
    SHADER_LOC_VERTEX_NORMAL = 3,
    SHADER_LOC_VERTEX_TANGENT = 4,
    SHADER_LOC_VERTEX_COLOR = 5,
    SHADER_LOC_MATRIX_MVP = 6,
    SHADER_LOC_MATRIX_VIEW = 7,
    SHADER_LOC_MATRIX_PROJECTION = 8,
    SHADER_LOC_MATRIX_MODEL = 9,
    SHADER_LOC_MATRIX_NORMAL = 10,
    SHADER_LOC_VECTOR_VIEW = 11,
    SHADER_LOC_COLOR_DIFFUSE = 12,
    SHADER_LOC_COLOR_SPECULAR = 13,
    SHADER_LOC_COLOR_AMBIENT = 14,
    SHADER_LOC_MAP_ALBEDO = 15,
    SHADER_LOC_MAP_METALNESS = 16,
    SHADER_LOC_MAP_NORMAL = 17,
    SHADER_LOC_MAP_ROUGHNESS = 18,
    SHADER_LOC_MAP_OCCLUSION = 19,
    SHADER_LOC_MAP_EMISSION = 20,
    SHADER_LOC_MAP_HEIGHT = 21,
    SHADER_LOC_MAP_CUBEMAP = 22,
    SHADER_LOC_MAP_IRRADIANCE = 23,
    SHADER_LOC_MAP_PREFILTER = 24,
    SHADER_LOC_MAP_BRDF = 25,
}

pub enum ShaderUniformDataType {
    SHADER_UNIFORM_FLOAT = 0,
    SHADER_UNIFORM_VEC2 = 1,
    SHADER_UNIFORM_VEC3 = 2,
    SHADER_UNIFORM_VEC4 = 3,
    SHADER_UNIFORM_INT = 4,
    SHADER_UNIFORM_IVEC2 = 5,
    SHADER_UNIFORM_IVEC3 = 6,
    SHADER_UNIFORM_IVEC4 = 7,
    SHADER_UNIFORM_SAMPLER2D = 8,
}

pub enum ShaderAttributeDataType {
    SHADER_ATTRIB_FLOAT = 0,
    SHADER_ATTRIB_VEC2 = 1,
    SHADER_ATTRIB_VEC3 = 2,
    SHADER_ATTRIB_VEC4 = 3,
}

pub enum PixelFormat {
    PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1,
    PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA = 2,
    PIXELFORMAT_UNCOMPRESSED_R5G6B5 = 3,
    PIXELFORMAT_UNCOMPRESSED_R8G8B8 = 4,
    PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 = 5,
    PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 = 6,
    PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 = 7,
    PIXELFORMAT_UNCOMPRESSED_R32 = 8,
    PIXELFORMAT_UNCOMPRESSED_R32G32B32 = 9,
    PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 = 10,
    PIXELFORMAT_UNCOMPRESSED_R16 = 11,
    PIXELFORMAT_UNCOMPRESSED_R16G16B16 = 12,
    PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 = 13,
    PIXELFORMAT_COMPRESSED_DXT1_RGB = 14,
    PIXELFORMAT_COMPRESSED_DXT1_RGBA = 15,
    PIXELFORMAT_COMPRESSED_DXT3_RGBA = 16,
    PIXELFORMAT_COMPRESSED_DXT5_RGBA = 17,
    PIXELFORMAT_COMPRESSED_ETC1_RGB = 18,
    PIXELFORMAT_COMPRESSED_ETC2_RGB = 19,
    PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA = 20,
    PIXELFORMAT_COMPRESSED_PVRT_RGB = 21,
    PIXELFORMAT_COMPRESSED_PVRT_RGBA = 22,
    PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA = 23,
    PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA = 24,
}

pub enum TextureFilter {
    TEXTURE_FILTER_POINT = 0,
    TEXTURE_FILTER_BILINEAR = 1,
    TEXTURE_FILTER_TRILINEAR = 2,
    TEXTURE_FILTER_ANISOTROPIC_4X = 3,
    TEXTURE_FILTER_ANISOTROPIC_8X = 4,
    TEXTURE_FILTER_ANISOTROPIC_16X = 5,
}

pub enum TextureWrap {
    TEXTURE_WRAP_REPEAT = 0,
    TEXTURE_WRAP_CLAMP = 1,
    TEXTURE_WRAP_MIRROR_REPEAT = 2,
    TEXTURE_WRAP_MIRROR_CLAMP = 3,
}

pub enum CubemapLayout {
    CUBEMAP_LAYOUT_AUTO_DETECT = 0,
    CUBEMAP_LAYOUT_LINE_VERTICAL = 1,
    CUBEMAP_LAYOUT_LINE_HORIZONTAL = 2,
    CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR = 3,
    CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE = 4,
    CUBEMAP_LAYOUT_PANORAMA = 5,
}

pub enum FontType {
    FONT_DEFAULT = 0,
    FONT_BITMAP = 1,
    FONT_SDF = 2,
}

pub enum BlendMode {
    BLEND_ALPHA = 0,
    BLEND_ADDITIVE = 1,
    BLEND_MULTIPLIED = 2,
    BLEND_ADD_COLORS = 3,
    BLEND_SUBTRACT_COLORS = 4,
    BLEND_ALPHA_PREMULTIPLY = 5,
    BLEND_CUSTOM = 6,
    BLEND_CUSTOM_SEPARATE = 7,
}

pub enum Gesture {
    GESTURE_NONE = 0,
    GESTURE_TAP = 1,
    GESTURE_DOUBLETAP = 2,
    GESTURE_HOLD = 4,
    GESTURE_DRAG = 8,
    GESTURE_SWIPE_RIGHT = 16,
    GESTURE_SWIPE_LEFT = 32,
    GESTURE_SWIPE_UP = 64,
    GESTURE_SWIPE_DOWN = 128,
    GESTURE_PINCH_IN = 256,
    GESTURE_PINCH_OUT = 512,
}

pub enum CameraMode {
    CAMERA_CUSTOM = 0,
    CAMERA_FREE = 1,
    CAMERA_ORBITAL = 2,
    CAMERA_FIRST_PERSON = 3,
    CAMERA_THIRD_PERSON = 4,
}

pub enum CameraProjection {
    CAMERA_PERSPECTIVE = 0,
    CAMERA_ORTHOGRAPHIC = 1,
}

pub enum NPatchLayout {
    NPATCH_NINE_PATCH = 0,
    NPATCH_THREE_PATCH_VERTICAL = 1,
    NPATCH_THREE_PATCH_HORIZONTAL = 2,
}

pub enum rlGlVersion {
    RL_OPENGL_11 = 1,
    RL_OPENGL_21 = 2,
    RL_OPENGL_33 = 3,
    RL_OPENGL_43 = 4,
    RL_OPENGL_ES_20 = 5,
    RL_OPENGL_ES_30 = 6,
}

pub enum rlTraceLogLevel {
    RL_LOG_ALL = 0,
    RL_LOG_TRACE = 1,
    RL_LOG_DEBUG = 2,
    RL_LOG_INFO = 3,
    RL_LOG_WARNING = 4,
    RL_LOG_ERROR = 5,
    RL_LOG_FATAL = 6,
    RL_LOG_NONE = 7,
}

pub enum rlPixelFormat {
    RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1,
    RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA = 2,
    RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5 = 3,
    RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8 = 4,
    RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1 = 5,
    RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4 = 6,
    RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8 = 7,
    RL_PIXELFORMAT_UNCOMPRESSED_R32 = 8,
    RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32 = 9,
    RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 = 10,
    RL_PIXELFORMAT_UNCOMPRESSED_R16 = 11,
    RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16 = 12,
    RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 = 13,
    RL_PIXELFORMAT_COMPRESSED_DXT1_RGB = 14,
    RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA = 15,
    RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA = 16,
    RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA = 17,
    RL_PIXELFORMAT_COMPRESSED_ETC1_RGB = 18,
    RL_PIXELFORMAT_COMPRESSED_ETC2_RGB = 19,
    RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA = 20,
    RL_PIXELFORMAT_COMPRESSED_PVRT_RGB = 21,
    RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA = 22,
    RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA = 23,
    RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA = 24,
}

pub enum rlTextureFilter {
    RL_TEXTURE_FILTER_POINT = 0,
    RL_TEXTURE_FILTER_BILINEAR = 1,
    RL_TEXTURE_FILTER_TRILINEAR = 2,
    RL_TEXTURE_FILTER_ANISOTROPIC_4X = 3,
    RL_TEXTURE_FILTER_ANISOTROPIC_8X = 4,
    RL_TEXTURE_FILTER_ANISOTROPIC_16X = 5,
}

pub enum rlBlendMode {
    RL_BLEND_ALPHA = 0,
    RL_BLEND_ADDITIVE = 1,
    RL_BLEND_MULTIPLIED = 2,
    RL_BLEND_ADD_COLORS = 3,
    RL_BLEND_SUBTRACT_COLORS = 4,
    RL_BLEND_ALPHA_PREMULTIPLY = 5,
    RL_BLEND_CUSTOM = 6,
    RL_BLEND_CUSTOM_SEPARATE = 7,
}

pub enum rlShaderLocationIndex {
    RL_SHADER_LOC_VERTEX_POSITION = 0,
    RL_SHADER_LOC_VERTEX_TEXCOORD01 = 1,
    RL_SHADER_LOC_VERTEX_TEXCOORD02 = 2,
    RL_SHADER_LOC_VERTEX_NORMAL = 3,
    RL_SHADER_LOC_VERTEX_TANGENT = 4,
    RL_SHADER_LOC_VERTEX_COLOR = 5,
    RL_SHADER_LOC_MATRIX_MVP = 6,
    RL_SHADER_LOC_MATRIX_VIEW = 7,
    RL_SHADER_LOC_MATRIX_PROJECTION = 8,
    RL_SHADER_LOC_MATRIX_MODEL = 9,
    RL_SHADER_LOC_MATRIX_NORMAL = 10,
    RL_SHADER_LOC_VECTOR_VIEW = 11,
    RL_SHADER_LOC_COLOR_DIFFUSE = 12,
    RL_SHADER_LOC_COLOR_SPECULAR = 13,
    RL_SHADER_LOC_COLOR_AMBIENT = 14,
    RL_SHADER_LOC_MAP_ALBEDO = 15,
    RL_SHADER_LOC_MAP_METALNESS = 16,
    RL_SHADER_LOC_MAP_NORMAL = 17,
    RL_SHADER_LOC_MAP_ROUGHNESS = 18,
    RL_SHADER_LOC_MAP_OCCLUSION = 19,
    RL_SHADER_LOC_MAP_EMISSION = 20,
    RL_SHADER_LOC_MAP_HEIGHT = 21,
    RL_SHADER_LOC_MAP_CUBEMAP = 22,
    RL_SHADER_LOC_MAP_IRRADIANCE = 23,
    RL_SHADER_LOC_MAP_PREFILTER = 24,
    RL_SHADER_LOC_MAP_BRDF = 25,
}

pub enum rlShaderUniformDataType {
    RL_SHADER_UNIFORM_FLOAT = 0,
    RL_SHADER_UNIFORM_VEC2 = 1,
    RL_SHADER_UNIFORM_VEC3 = 2,
    RL_SHADER_UNIFORM_VEC4 = 3,
    RL_SHADER_UNIFORM_INT = 4,
    RL_SHADER_UNIFORM_IVEC2 = 5,
    RL_SHADER_UNIFORM_IVEC3 = 6,
    RL_SHADER_UNIFORM_IVEC4 = 7,
    RL_SHADER_UNIFORM_SAMPLER2D = 8,
}

pub enum rlShaderAttributeDataType {
    RL_SHADER_ATTRIB_FLOAT = 0,
    RL_SHADER_ATTRIB_VEC2 = 1,
    RL_SHADER_ATTRIB_VEC3 = 2,
    RL_SHADER_ATTRIB_VEC4 = 3,
}

pub enum rlFramebufferAttachType {
    RL_ATTACHMENT_COLOR_CHANNEL0 = 0,
    RL_ATTACHMENT_COLOR_CHANNEL1 = 1,
    RL_ATTACHMENT_COLOR_CHANNEL2 = 2,
    RL_ATTACHMENT_COLOR_CHANNEL3 = 3,
    RL_ATTACHMENT_COLOR_CHANNEL4 = 4,
    RL_ATTACHMENT_COLOR_CHANNEL5 = 5,
    RL_ATTACHMENT_COLOR_CHANNEL6 = 6,
    RL_ATTACHMENT_COLOR_CHANNEL7 = 7,
    RL_ATTACHMENT_DEPTH = 100,
    RL_ATTACHMENT_STENCIL = 200,
}

pub enum rlFramebufferAttachTextureType {
    RL_ATTACHMENT_CUBEMAP_POSITIVE_X = 0,
    RL_ATTACHMENT_CUBEMAP_NEGATIVE_X = 1,
    RL_ATTACHMENT_CUBEMAP_POSITIVE_Y = 2,
    RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y = 3,
    RL_ATTACHMENT_CUBEMAP_POSITIVE_Z = 4,
    RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z = 5,
    RL_ATTACHMENT_TEXTURE2D = 100,
    RL_ATTACHMENT_RENDERBUFFER = 200,
}

pub enum rlCullMode {
    RL_CULL_FACE_FRONT = 0,
    RL_CULL_FACE_BACK = 1,
}

